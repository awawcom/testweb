const models = require('./models');
const index = require('../index');
const db = require('../database');

module.exports = (bot) => {
    bot.hears(`üìç –ú–æ—è –º–∞—à–∏–Ω–∞`, async (ctx)=>{
        if(ctx.res.status !== 3) return;
        const data = await models.openDriverCars(ctx.from.id);
        ctx.replyWithHTML(data.text, {reply_markup: {inline_keyboard: data.but}})
    })

    bot.hears(`üöö –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ`, async (ctx)=>{
        if(ctx.res.status !== 3) return;

        const data = await models.getOrdersForDriver(ctx.from.id);
        ctx.replyWithHTML(data.text, {reply_markup: {inline_keyboard: data.but}})
    })

    bot.hears(`üöõ –ú–æ–∏ –∑–∞—è–≤–∫–∏`, async (ctx)=>{
        if(ctx.res.status !== 3) return;

        await ctx.replyWithHTML(`<b>–ö–∞–∫–∏–µ –∑–∞—è–≤–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å?</b>`, {reply_markup: {inline_keyboard: [[{text: '–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ', callback_data: 'driver_my_forms:2'}],[{text: '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ', callback_data: 'driver_my_forms:3'}],[{text: '–ü—Ä–∏–≤—è–∑–∞—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–µ', callback_data: 'attachToFormDriver'}]]}})
    })

    bot.action(/driver_my_forms:(\d+)/, async (ctx)=>{
        if(ctx.res.status !== 3) return;

        let data = await models.getOrdersForDriverByStatus(ctx.from.id, ctx.match[1]);
        data.but.push([{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'driverForms'}])
        ctx.editMessageText(data.text, {parse_mode: 'HTML',reply_markup: {inline_keyboard: data.but}})
    })

    bot.action(`driverForms`, async (ctx)=>{
        if(ctx.res.status !== 3) return;

        await ctx.editMessageText(`<b>–ö–∞–∫–∏–µ –∑–∞—è–≤–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å?</b>`, {parse_mode: 'HTML',reply_markup: {inline_keyboard: [[{text: '–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ', callback_data: 'driver_my_forms:2'}],[{text: '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ', callback_data: 'driver_my_forms:3'}],[{text: '–ü—Ä–∏–≤—è–∑–∞—Ç—å—Å—è –∫ –∑–∞—è–≤–∫–µ', callback_data: 'attachToFormDriver'}]]}})
    })

    bot.action(`attachToFormDriver`, async (ctx)=>{
        if(ctx.res.status !== 3) return;

        ctx.scene.enter(`attachToForm`)
    })

    bot.action('change_car_driver', async (ctx)=>{
        if(ctx.res.status !== 3) return;
        
        let data = await models.getCarsForDriver(ctx.from.id);
        data.but.push([{text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_driver_menu'}])
        ctx.editMessageText(data.text, {reply_markup: {inline_keyboard: data.but}, parse_mode: 'HTML'})
    })

    bot.action('back_to_driver_menu', async (ctx)=>{
        if(ctx.res.status !== 3) return;

        const data = await models.openDriverCars(ctx.from.id);
        ctx.editMessageText(data.text, {reply_markup: {inline_keyboard: data.but}, parse_mode: 'HTML'})
    })

    bot.action(/change_car:(\d+)/, async (ctx)=>{
        if(ctx.res.status !== 3) return;

        await db.setDriver(ctx.match[1], ctx.from.id, ctx);
        ctx.answerCbQuery('–ú–∞—à–∏–Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –∑–∞ –≤–∞–º–∏')
        const data = await models.openDriverCars(ctx.from.id);
        ctx.editMessageText(data.text, {reply_markup: {inline_keyboard: data.but}, parse_mode: 'HTML'})
    })

    bot.action(/driver_form:(\d+)/, async (ctx)=>{
        if(ctx.res.status === 3 || ctx.res.status === 7) {
            await index.openAncet(ctx, ctx.match[1], 0)
        }
    })

    bot.action(/sos:(\d+)/, async (ctx)=>{
        let but = [
            [{text: '–ù–µ –¥–∞–µ—Ç –¥–µ–Ω—å–≥–∏', callback_data: `sos_type:${ctx.match[1]}:–ù–µ –¥–∞–µ—Ç –¥–µ–Ω—å–≥–∏`}],
            [{text: '–ó–∞—Å—Ç—Ä—è–ª', callback_data: `sos_type:${ctx.match[1]}:–ó–∞—Å—Ç—Ä—è–ª`}],
            [{text: '–ù–µ –º–æ–≥—É –¥–æ–∑–≤–æ–Ω–∏—Ç—Å—è –¥–æ –∫–ª–∏–µ–Ω—Ç–∞', callback_data: `sos_type:${ctx.match[1]}:–ù–µ –¥–æ–∑–≤–æ–Ω–∏—Ç—Å—è –¥–æ –∫–ª–∏–µ–Ω—Ç–∞`}],
            [{text: '–°–ª–æ–º–∞–ª–∞—Å—å –º–∞—à–∏–Ω–∞', callback_data: `sos_type:${ctx.match[1]}:–°–ª–æ–º–∞–ª–∞—Å—å –º–∞—à–∏–Ω–∞`}],
            [{text: '–ü—Ä–æ–±–∏–ª–æ –∫–æ–ª–µ—Å–æ', callback_data: `sos_type:${ctx.match[1]}:–ü—Ä–æ–±–∏–ª–æ –∫–æ–ª–µ—Å–æ`}],
            [{text: '–£–≥—Ä–æ–∑–∞ –∂–∏–∑–Ω–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—é', callback_data: `sos_type:${ctx.match[1]}:–£–≥—Ä–æ–∑–∞ –∑–¥–æ—Ä–æ–≤—å—é`}],
            [{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: `driver_form:${ctx.match[1]}`}]
        ]
        ctx.editMessageText(`<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –ª–æ–≥–∏—Å—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ</b>`, {parse_mode: 'HTML', reply_markup: {inline_keyboard: but}})
    })

    bot.action(/sos_type:(\d+):(.*)/, async (ctx)=>{
        await models.sendSos(ctx.match[1], ctx.match[2], ctx)
        ctx.answerCbQuery('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {show_alert: true})
        await index.openAncet(ctx, ctx.match[1], 0)
    })
    bot.action(/finish_form:(\d+)/, async (ctx)=>{
        await ctx.scene.enter('finish_form', {form_id: ctx.match[1]})
    })
};