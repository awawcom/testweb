const { Scenes, Markup} = require('telegraf');
const db = require('./database');
const { query, getUser, createForm} = require('./database');
const {mainMenu, betonType, status, payForms, editTypes, ancetaStatus, entity} = require('./data');
const Calendar = require('telegraf-calendar-telegram');
const XLSX = require('xlsx');
const fs = require('fs');
function formatPhoneNumber(input) {
    const cleaned = input.replace(/\D/g, '');

    if (cleaned.length === 11 && (cleaned.startsWith('7') || cleaned.startsWith('8'))) {
        return `+7${cleaned.slice(1)}`;
    } else if (cleaned.length === 10 && cleaned.startsWith('9')) {
        return `+7${cleaned}`;
    } else if (cleaned.length === 12 && cleaned.startsWith('7')) {
        return `+${cleaned}`;
    } else {
        return null;
    }
}
require('dotenv').config();
const calendar = new Calendar(process.env.BOT_TOKEN, {
    startWeekDay: 1,
    weekDayNames: ["–í—Å", "–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"],
    monthNames: [
        "–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω",
        "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"
    ],
    minDate: new Date(),
    maxDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)
});
function chunkArray(arr, size) {
    return Array.from({length: Math.ceil(arr.length / size)}, (_, i) =>
        arr.slice(i * size, i * size + size)
    );
}
const index = require(`./index`);

const carrierModels = require('./carrier/models');

function toFloat(str) {
    if (typeof str !== 'string') {
      return parseFloat(str) || 0;
    }
  
    // –£–¥–∞–ª—è–µ–º –í–°–ï –ø—Ä–æ–±–µ–ª—ã –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –æ–¥–Ω—É —Ç–æ—á–∫—É/–∑–∞–ø—è—Ç—É—é –∏ –º–∏–Ω—É—Å
    const cleaned = str
      .replace(/\s+/g, '')          // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
      .replace(/[^\d.,-]/g, '')     // –£–¥–∞–ª—è–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–æ—á–µ–∫, –∑–∞–ø—è—Ç—ã—Ö –∏ –º–∏–Ω—É—Å–∞
      .replace(/,/g, '.');          // –ú–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
  
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Ç–æ—á–∫–∏/–∑–∞–ø—è—Ç—ã–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é)
    const parts = cleaned.split('.');
    const integerPart = parts[0] || '0';
    const decimalPart = parts.length > 1 ? `.${parts[1]}` : '';
  
    const result = parseFloat(integerPart + decimalPart);
    return isNaN(result) ? 0 : result;
  }
  

module.exports.setupScenes = () => {
    function hasDangerousChars(text) {
        return /[{}[\]\\|`]/.test(text);
    }

    const createErrorHandledScene = (sceneId, ...steps) => {
        const scene = new Scenes.WizardScene(sceneId, ...steps);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ–π —Å—Ü–µ–Ω—ã
        scene.use(async (ctx, next) => {
          try {
            // –í–∞–∂–Ω–æ: await next() –ø–µ—Ä–µ–¥–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É middleware –∏–ª–∏ —à–∞–≥—É —Å—Ü–µ–Ω—ã
            await next();
          } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–µ ${sceneId}:`, error);
            await ctx.scene.leave();
            
            // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            await ctx.replyWithHTML(`${error.message}`);
          }
        });
        
        return scene;
      };

    const enter_name= new Scenes.WizardScene(
        'enter_name',
        async (ctx) => {
            const s = await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:</b>`);
            ctx.wizard.state.messageId2 = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            let name = ctx.message.text;
            if(name.startsWith(`/start`)) return await ctx.replyWithHTML(`‚ùå <b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è</b>`);
            if(!hasDangerousChars(name)){
                ctx.deleteMessage()
                ctx.deleteMessage(ctx.wizard.state.messageId2);
                await query(`UPDATE users SET real_name=?, referal=? WHERE id=?`, [name, ctx.wizard.state.ref, ctx.from.id])
                let user = await getUser(ctx.from.id);
                mainMenu(ctx, user.status)
                return ctx.scene.leave();
            }
            else {
                await ctx.reply(`‚ùå`)
                return ctx.scene.leave()
            }
        },
    );
    const search_by_phone= new Scenes.WizardScene(
        'search_by_phone',
        async (ctx) => {
            const s = await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏:</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
            ctx.wizard.state.messageId2 = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }
            let phone = ctx.message.text;
            const form = formatPhoneNumber(phone);
            if(form){
                ctx.deleteMessage()
                ctx.deleteMessage(ctx.wizard.state.messageId2);
                let z = await query(`SELECT * FROM forms WHERE phone=? AND priv=-1 AND (type=0 OR type=1)`, [form]);
                if(z.length > 0){
                    await query(`UPDATE forms SET priv=? WHERE fid=?`, [ctx.from.id,z[0].fid]);
                    await index.userAncets(ctx);
                    await ctx.scene.leave();
                }
                else{
                    await ctx.replyWithHTML(`<b>–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</b>`);
                    await ctx.scene.leave();
                }
            }
            else {
                await ctx.replyWithHTML(`<b>–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}})
            }
        },
    );
    const search_by_id= new Scenes.WizardScene(
        'search_by_id',
        async (ctx) => {
            const s = await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
            ctx.wizard.state.messageId2 = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }
            let fid = Number(ctx.message.text);
            if(fid > 0){
                ctx.deleteMessage()
                ctx.deleteMessage(ctx.wizard.state.messageId2);
                let z = await query(`SELECT * FROM forms WHERE fid=? AND priv=-1 AND (type=0 OR type=1)`, [fid]);
                if(z.length > 0){
                    await query(`UPDATE forms SET priv=? WHERE fid=?`, [ctx.from.id,fid]);
                    await index.userAncets(ctx);
                    await ctx.scene.leave();
                }
                else{
                    await ctx.replyWithHTML(`<b>–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</b>`);
                    await ctx.scene.leave();
                }
            }
            else {
                await ctx.replyWithHTML(`<b>–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏!</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}})
            }
        },
    );
    const enter_company = new Scenes.WizardScene(
        'enter_company',
        async (ctx) => {
            const s = await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</b>`);
            ctx.wizard.state.messageId2 = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            let name = ctx.message.text;
            if(!hasDangerousChars(name)){
                await query(`UPDATE users SET company=? WHERE id=?`, [name, ctx.from.id])
                ctx.deleteMessage(ctx.wizard.state.messageId2);
                ctx.deleteMessage()
                const s = await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:</b>`);
                ctx.wizard.state.messageId2 = s.message_id;
                return ctx.wizard.next();
            }
            else {
                await ctx.reply(`‚ùå`)
                return ctx.scene.leave()
            }
        },
        async (ctx) => {
            let name = ctx.message.text;
            if(!hasDangerousChars(name)){
                ctx.deleteMessage()
                ctx.deleteMessage(ctx.wizard.state.messageId2);
                await query(`UPDATE users SET real_name=?, referal=? WHERE id=?`, [name, ctx.wizard.state.ref, ctx.from.id])
                let user = await getUser(ctx.from.id);
                mainMenu(ctx, user.status)
                return ctx.scene.leave();
            }
            else {
                await ctx.reply(`‚ùå`)
                return ctx.scene.leave()
            }
        },
    );
    const create_ancet = new Scenes.WizardScene(
        'create_ancet',
        async (ctx) => {
            const calendarKeyboard = calendar.getCalendar(new Date())
            const cancelButton = Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene');
            const s = await ctx.replyWithHTML(`üìÜ <b>–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–µ—Ç–æ–Ω</b>`, { reply_markup: { inline_keyboard: [
                        ...calendarKeyboard.reply_markup.inline_keyboard,
                        [cancelButton]
                    ]
                }});
            ctx.wizard.state.messageId = s.message_id;
            const now = new Date();
            ctx.wizard.state.calendarMessageId = s.message_id;
            ctx.wizard.state.currentMonth = now.getMonth();
            ctx.wizard.state.currentYear = now.getFullYear();
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }

                if (ctx.callbackQuery.data.startsWith('calendar-telegram-prev')) {
                    const { currentMonth, currentYear } = ctx.wizard.state;
                    const prevMonth = currentMonth === 0 ? 11 : currentMonth - 1;
                    const prevYear = currentMonth === 0 ? currentYear - 1 : currentYear;

                    ctx.wizard.state.currentMonth = prevMonth;
                    ctx.wizard.state.currentYear = prevYear;

                    const newDate = new Date(prevYear, prevMonth, 1);
                    const newCalendar = calendar.getCalendar(newDate);

                    await ctx.editMessageReplyMarkup({
                        inline_keyboard: [
                            ...newCalendar.reply_markup.inline_keyboard,
                            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')]
                        ]
                    });
                    return;
                }

                if (ctx.callbackQuery.data.startsWith('calendar-telegram-next')) {
                    const { currentMonth, currentYear } = ctx.wizard.state;
                    const nextMonth = currentMonth === 11 ? 0 : currentMonth + 1;
                    const nextYear = currentMonth === 11 ? currentYear + 1 : currentYear;

                    ctx.wizard.state.currentMonth = nextMonth;
                    ctx.wizard.state.currentYear = nextYear;

                    const newDate = new Date(nextYear, nextMonth, 1);
                    const newCalendar = calendar.getCalendar(newDate);

                    await ctx.editMessageReplyMarkup({
                        inline_keyboard: [
                            ...newCalendar.reply_markup.inline_keyboard,
                            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')]
                        ]
                    });
                    return;
                }

                else if (ctx.callbackQuery.data.startsWith('calendar-telegram-ignore')) {
                    return ctx.answerCbQuery();
                }
                else if (ctx.callbackQuery.data.startsWith('calendar-telegram')) {
                    const dateStr = ctx.callbackQuery.data.replace('calendar-telegram-date-', '');
                    const [year, month, day] = dateStr.split('-').map(Number);
                    const date = new Date(year, month - 1, day);
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    ctx.wizard.state.date = date.toLocaleDateString('ru-RU');


                    const timeKeyboard = Markup.inlineKeyboard([
                        [
                            Markup.button.callback('üåÖ –£—Ç—Ä–æ (8:00-11:00)', 'interval_8_11'),
                            Markup.button.callback('üåá –î–µ–Ω—å (13:00-16:00)', 'interval_13_16')
                        ],
                        [Markup.button.callback('‚è± –í—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é', 'manual_time')],
                        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')]
                    ]);


                    const s = await ctx.replyWithHTML(`‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏ (–æ—Ç 7:00 –¥–æ 18:00):</b>`,
                        timeKeyboard);
                    ctx.wizard.state.messageId = s.message_id;
                    ctx.wizard.state.timeSelectionStage = 'start';
                    return ctx.wizard.next();
                }
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }

                if (ctx.callbackQuery.data.startsWith('interval_')) {
                    const [start, end] = ctx.callbackQuery.data.replace('interval_', '').split('_').map(Number);
                    ctx.wizard.state.timeInterval = `${start}:00 - ${end}:00`;
                    ctx.wizard.state.startHour = start;
                    ctx.wizard.state.endHour = end;

                    await ctx.deleteMessage(ctx.wizard.state.messageId);

                    const betonBut = betonType.map(b =>
                        [{text: `${b}`, callback_data:`type_${b}`}]
                    );
                    betonBut.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene' }])
                    const s = await ctx.replyWithHTML(
                        `üìÖ <b>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> ${ctx.wizard.state.date}\n` +
                        `‚è∞ <b>–í—Ä–µ–º—è:</b> ${ctx.wizard.state.timeInterval}\n\n` +
                        `üì¶ <b>–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –±–µ—Ç–æ–Ω–∞:</b>`,
                        {
                            reply_markup: {
                                inline_keyboard: betonBut
                            }
                        }
                    );

                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }

                if (ctx.callbackQuery.data === 'manual_time') {
                    const hours = Array.from({length: 12}, (_, i) => i + 7);
                    const timeButtons = hours.map(h =>
                        Markup.button.callback(`${h}:00`, `time_${h}`)
                    );

                    await ctx.editMessageText(
                        `‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (7:00-18:00):</b>`,
                        { parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: [
                                    ...chunkArray(timeButtons, 4),
                                    [
                                        Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'time_back'),
                                        Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')
                                    ]
                                ]
                            }
                        }
                    );

                    ctx.wizard.state.timeSelectionStage = 'start';
                    return;
                }

                if (ctx.callbackQuery.data.startsWith('time_')) {
                    const selectedHour = parseInt(ctx.callbackQuery.data.replace('time_', ''));

                    if (ctx.wizard.state.timeSelectionStage === 'start') {
                        ctx.wizard.state.startHour = selectedHour;
                        ctx.wizard.state.timeSelectionStage = 'end';

                        const minEnd = selectedHour + 1;
                        const maxEnd = Math.min(selectedHour + 3, 18);
                        const endHours = Array.from({length: maxEnd - minEnd + 1}, (_, i) => minEnd + i);

                        const endButtons = endHours.map(h =>
                            Markup.button.callback(`${h}:00`, `time_${h}`)
                        );

                        await ctx.editMessageText(
                            `‚è∞ –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—á–∞–ª–æ –≤ ${selectedHour}:00\n` +
                            `<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è (–¥–æ ${maxEnd}:00):</b>`,
                            { parse_mode: 'HTML',
                                reply_markup: {
                                    inline_keyboard: [
                                        ...chunkArray(endButtons, 3),
                                        [
                                            Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'time_back'),
                                            Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')
                                        ]
                                    ]
                                }
                            }
                        );
                    } else if (ctx.wizard.state.timeSelectionStage === 'end') {
                        const startHour = ctx.wizard.state.startHour;
                        const endHour = selectedHour;

                        if (endHour <= startHour || endHour > startHour + 3) {
                            await ctx.answerCbQuery('‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 3 —á–∞—Å–æ–≤');
                            return;
                        }

                        ctx.wizard.state.endHour = endHour;
                        ctx.wizard.state.timeInterval = `${startHour}:00 - ${endHour}:00`;

                        await ctx.deleteMessage(ctx.wizard.state.messageId);
                        const betonBut = betonType.map(b =>
                            [{text: `${b}`, callback_data:`type_${b}`}]
                        );
                        betonBut.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene' }])
                        const s = await ctx.replyWithHTML(
                            `üìÖ <b>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> ${ctx.wizard.state.date}\n` +
                            `‚è∞ <b>–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:</b> ${ctx.wizard.state.timeInterval}\n\n` +
                            `üì¶ <b>–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –±–µ—Ç–æ–Ω–∞:</b>`,
                            {
                                reply_markup: {
                                    inline_keyboard: betonBut
                                }
                            }
                        );

                        ctx.wizard.state.messageId = s.message_id;
                        return ctx.wizard.next();
                    }
                }

                if (ctx.callbackQuery.data === 'time_back') {
                    const timeKeyboard = Markup.inlineKeyboard([
                        [
                            Markup.button.callback('üåÖ –£—Ç—Ä–æ (8:00-11:00)', 'interval_8_11'),
                            Markup.button.callback('üåá –î–µ–Ω—å (13:00-16:00)', 'interval_13_16')
                        ],
                        [Markup.button.callback('‚è± –í—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é', 'manual_time')],
                        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')]
                    ]);

                    await ctx.editMessageText(
                        `‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏:</b>`,
                        {parse_mode: 'HTML',
                        ...timeKeyboard}
                    );

                    delete ctx.wizard.state.timeSelectionStage;
                }
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data.startsWith(`type_`)){
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    ctx.wizard.state.betonType = ctx.callbackQuery.data.split('_')[1];
                    const s = await ctx.replyWithHTML(`‚öñÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ –æ–±—ä–µ–º/—Ü–µ–Ω—É –∑–∞ –∫—É–±–æ–º–µ—Ç—Ä —Å–æ —Å–∫–∏–¥–∫–æ–π 
‚ùóÔ∏è–ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø–æ –ø—Ä–∞–π—Å—É, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–º‚ùóÔ∏è
‚ùóÔ∏è–ï—Å–ª–∏ –Ω–µ—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, —Ç–æ –≤–≤–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É –∏–ª–∏ –∑–∞–ø—è—Ç—É—é‚ùóÔ∏è
–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–º–∏ –º–∞—Ä–∫–∞: ${await db.getBetonName(ctx.wizard.state.betonType)}

(–ü—Ä–∏–º–µ—Ä 10/7000)</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }
            await ctx.deleteMessage(ctx.wizard.state.messageId)
            await ctx.deleteMessage()
            ctx.wizard.state.amount = ctx.message.text;
            const s = await ctx.replyWithHTML(`üìç <b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –ø–æ—Å—Ç–∞–≤–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –≥–æ—Ä–æ–¥, –Ω–∞–ø–∏—à–∏—Ç–µ —É–ª–∏—Ü—É –∫—É–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–µ—Ç–æ–Ω</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }
            await ctx.deleteMessage(ctx.wizard.state.messageId)
            await ctx.deleteMessage()
            ctx.wizard.state.place = ctx.message.text;
            const s = await ctx.replyWithHTML(`üìç <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø—ã –∫ –∑–∞—è–≤–∫–µ</b>`, {reply_markup: {inline_keyboard: [[{text: '–ê–≤—Ç–æ–±–µ—Ç–æ–Ω–æ–Ω–∞—Å–æ—Å', callback_data: 'selectdop:–ê–≤—Ç–æ–±–µ—Ç–æ–Ω–æ–Ω–∞—Å–æ—Å'}],[{text: '–¢—Ä—É–±–∞ 6–º', callback_data: 'selectdop:–¢—Ä—É–±–∞ 6–º'}],[{text: '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è', callback_data: 'dop'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data === `dop`){
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    ctx.wizard.state.dop = '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è';
                    const s = await ctx.replyWithHTML(`üì∑ <b>–î–ª—è –Ω–∞–∏–±–æ–ª–µ–µ –≥—Ä–∞–º–æ—Ç–Ω–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏ –±–µ—Ç–æ–Ω–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø–æ–¥—ä–µ–∑–¥–Ω—ã—Ö –ø—É—Ç–µ–π, —Ç–∞–∫ –ª–æ–≥–∏—Å—Ç—ã —Å–º–æ–≥—É—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞</b>`, {reply_markup: {inline_keyboard: [[{text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ', callback_data: 'noPhoto'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }
                else if(ctx.callbackQuery.data.startsWith(`selectdop:`)){
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    ctx.wizard.state.dop = ctx.callbackQuery.data.split(':')[1];
                    const s = await ctx.replyWithHTML(`üì∑ <b>–î–ª—è –Ω–∞–∏–±–æ–ª–µ–µ –≥—Ä–∞–º–æ—Ç–Ω–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏ –±–µ—Ç–æ–Ω–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –ø–æ–¥—ä–µ–∑–¥–Ω—ã—Ö –ø—É—Ç–µ–π, —Ç–∞–∫ –ª–æ–≥–∏—Å—Ç—ã —Å–º–æ–≥—É—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞</b>`, {reply_markup: {inline_keyboard: [[{text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ', callback_data: 'noPhoto'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data === `noPhoto`){
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    ctx.wizard.state.photos = null;
                    ctx.wizard.state.video = null;
                    const s = await ctx.replyWithHTML(`‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ (–ü—Ä–∏–º–µ—Ä: —Ñ–æ—Ä–º–∞ –æ–¥–µ–∂–¥—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –º–∞—à–∏–Ω–∞–º–∏, –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ)</b>`, {reply_markup: {inline_keyboard: [[{text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', callback_data: 'nocom'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }
                else if(ctx.callbackQuery.data === `stop`){
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    const s = await ctx.replyWithHTML(`‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ (–ü—Ä–∏–º–µ—Ä: —Ñ–æ—Ä–º–∞ –æ–¥–µ–∂–¥—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –º–∞—à–∏–Ω–∞–º–∏, –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ)</b>`, {reply_markup: {inline_keyboard: [[{text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', callback_data: 'nocom'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }
            }
            if(ctx.message.photo){
                if(!ctx.wizard.state.photo) ctx.wizard.state.photo = [];
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                await ctx.deleteMessage()
                ctx.wizard.state.photo.push(ctx.message.photo[ctx.message.photo.length - 1].file_id);
                const s = await ctx.replyWithHTML(`üì∑ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ!</b>`, {reply_markup: {inline_keyboard: [[{text: '–ó–∞–∫–æ–Ω—á–∏—Ç—å', callback_data: 'stop'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                ctx.wizard.state.messageId = s.message_id;
            }
            else if(ctx.message.video){
                if(!ctx.wizard.state.video) ctx.wizard.state.video = [];
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                await ctx.deleteMessage()
                ctx.wizard.state.video.push(ctx.message.video.file_id);
                const s = await ctx.replyWithHTML(`üì∑ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ!</b>`, {reply_markup: {inline_keyboard: [[{text: '–ó–∞–∫–æ–Ω—á–∏—Ç—å', callback_data: 'stop'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                ctx.wizard.state.messageId = s.message_id;
            }
            else{
                return ctx.replyWithHTML(`‚ùå <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ!</b>`)
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data === `nocom`){
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    ctx.wizard.state.com = '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è';
                    const s = await ctx.replyWithHTML(`<b>üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>
<i>(–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∏–∫—Ç–æ –Ω–µ –≤–∏–¥–∏—Ç –ø–æ–∫–∞ –≤—ã –Ω–µ –≤—ã–±–µ—Ä–µ—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –±–µ—Ç–æ–Ω–∞
–¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞–º–∏ –∑–∞—è–≤–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ—è–≤–ª—è–µ—Ç—Å—è —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏)</i>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }
            }
            await ctx.deleteMessage(ctx.wizard.state.messageId)
            await ctx.deleteMessage()
            ctx.wizard.state.com = ctx.message.text;
            const s = await ctx.replyWithHTML(`<b>üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>
<i>(–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∏–∫—Ç–æ –Ω–µ –≤–∏–¥–∏—Ç –ø–æ–∫–∞ –≤—ã –Ω–µ –≤—ã–±–µ—Ä–µ—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –±–µ—Ç–æ–Ω–∞
–¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞–º–∏ –∑–∞—è–≤–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ—è–≤–ª—è–µ—Ç—Å—è —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏)</i>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }
            const form = formatPhoneNumber(ctx.message.text)

            if(form){
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                await ctx.deleteMessage()
                ctx.wizard.state.phone = form;
                let but = [];
                const user = await getUser(ctx.from.id);
                if(user.referal !== -1 && user.referal !== null){
                    const zavod = (await query(`SELECT * FROM zavod WHERE fid=?`, [user.referal]))[0];
                    but.push([{text: `–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ ${zavod.name}`, callback_data: `sendto:${zavod.fid}`}])
                }
                but.push([{text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –∑–∞–≤–æ–¥–∞–º', callback_data: 'sendto:-1'}],[{text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∑–∞–≤–æ–¥—É', callback_data: 'sendz'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}])
                const s = await ctx.replyWithHTML(`<b>üìã –ó–∞—è–≤–∫–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞!
1. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> ${ctx.wizard.state.date} ${ctx.wizard.state.timeInterval}
<b>2. –ú–∞—Ä–∫–∞ –∏ –æ–±—å–µ–º:</b> ${ctx.wizard.state.betonType} | ${ctx.wizard.state.amount} –º¬≥
<b>3. –ê–¥—Ä–µ—Å:</b> ${ctx.wizard.state.place}
<b>4. –î–æ–ø—ã:</b> ${ctx.wizard.state.dop}
<b>5. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${ctx.wizard.state.com}
<b>6. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> ${ctx.wizard.state.phone}

<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É –∑–∞—è–≤–∫—É –≤—Å–µ–º –∑–∞–≤–æ–¥–∞–º —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∏–ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≤–æ–¥</i>`, {reply_markup: {inline_keyboard: but}});
                ctx.wizard.state.messageId = s.message_id;
                return ctx.wizard.next();
            }
            else{
                await ctx.replyWithHTML('<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>');
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data === `sendz`){
                    const all = await query(`SELECT * FROM zavod WHERE type=0`);
                    let but = all.map(s=>[{text: `‚Ä¢ ${s.name}`, callback_data: 'ignore'}, {text: '–í—ã–±—Ä–∞—Ç—å', callback_data: `getz:${s.fid}`}]);
                    but.push([{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'toancet'}]);
                    ctx.editMessageText(`üì® <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≤–æ–¥</b>`, {parse_mode: 'HTML', reply_markup: {inline_keyboard: but}})
                }
                else if(ctx.callbackQuery.data === `ignore`){
                    ctx.answerCbQuery();
                }
                else if(ctx.callbackQuery.data === `toancet`){
                    let but = [];
                    const user = await getUser(ctx.from.id);
                    if(user.referal !== -1 && user.referal !== null){
                        const zavod = (await query(`SELECT * FROM zavod WHERE fid=?`, [user.referal]))[0];
                        but.push([{text: `–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ ${zavod.name}`, callback_data: `sendto:${zavod.fid}`}])
                    }
                    but.push([{text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –∑–∞–≤–æ–¥–∞–º', callback_data: 'sendto:-1'}],[{text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∑–∞–≤–æ–¥—É', callback_data: 'sendz'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}])
                    await ctx.editMessageText(`<b>üìã –ó–∞—è–≤–∫–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞!
1. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> ${ctx.wizard.state.date} ${ctx.wizard.state.timeInterval}
<b>2. –ú–∞—Ä–∫–∞ –∏ –æ–±—å–µ–º:</b> ${ctx.wizard.state.betonType} | ${ctx.wizard.state.amount} –º¬≥
<b>3. –ê–¥—Ä–µ—Å:</b> ${ctx.wizard.state.place}
<b>4. –î–æ–ø—ã:</b> ${ctx.wizard.state.dop}
<b>5. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${ctx.wizard.state.com}
<b>6. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> ${ctx.wizard.state.phone}

<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É –∑–∞—è–≤–∫—É –≤—Å–µ–º –∑–∞–≤–æ–¥–∞–º —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∏–ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≤–æ–¥</i>`, {parse_mode: 'HTML',reply_markup: {inline_keyboard: [[{text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –∑–∞–≤–æ–¥–∞–º', callback_data: 'sendto:-1'}],[{text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∑–∞–≤–æ–¥—É', callback_data: 'sendz'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                }
                else if(ctx.callbackQuery.data.startsWith(`getz:`)){
                    ctx.answerCbQuery();
                    const id = ctx.callbackQuery.data.split(':')[1];
                    const z = (await query(`SELECT * FROM zavod WHERE fid=${id}`))[0];
                    if(z){
                        await ctx.editMessageText(`<b>üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:</b> <i>${z.name}</i>

<b>–ê–¥—Ä–µ—Å:</b> <i>${z.place}</i>
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> <i>${z.discription}</i>`, {parse_mode: 'HTML',reply_markup: {inline_keyboard: [[{text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –∑–∞–≤–æ–¥', callback_data: `sendto:${id}`}],[{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'sendz'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    }
                }
                else if(ctx.callbackQuery.data.startsWith(`sendto:`)){
                    ctx.deleteMessage();
                    ctx.scene.leave();
                    const {date, timeInterval, betonType, amount, place, dop, com, phone} = ctx.wizard.state
                    let media = [];
                    let ph = [];
                    let vd = [];
                    if(ctx.wizard.state.photo !== undefined && ctx.wizard.state.photo?.length > 0){
                        ph = ctx.wizard.state.photo.map((fileId) => {
                            return {type: 'photo', fileId: fileId}});
                    }
                    if(ctx.wizard.state.video !== undefined && ctx.wizard.state.video?.length > 0){
                        vd = ctx.wizard.state.video.map((fileId) => {return {type: 'video', fileId: fileId}});
                    }
                    media = JSON.stringify(media.concat(ph,vd));
                    const res = await createForm({
                        type: 0,
                        created_by: ctx.from.id,
                        date: `${date} ${timeInterval}`,
                        place: place,
                        phone: phone,
                        betonType: betonType,
                        betonAmount: amount,
                        dopAll: dop,
                        com: com,
                        media: media,
                        zavod: Number(ctx.callbackQuery.data.split(':')[1]),
                        status: 0
                    })
                    if(res){
                        await ctx.replyWithHTML(`üóÇ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.</b>

<i>–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "‚ùóÔ∏è –£ –ú–ï–ù–Ø –£–ñ–ï –ï–°–¢–¨ –ó–ê–Ø–í–ö–ê"</i>`)

                        const id = parseInt(ctx.callbackQuery.data.split(':')[1]);
                        let allManagers;
                        if(id !== -1){
                            allManagers = await query(`SELECT * FROM users WHERE status=1 AND zavod=?`, [id])
                        }
                        else{
                            allManagers = await query(`SELECT * FROM users WHERE status=1`)
                        }
                        for(const manager of allManagers){
                            await ctx.telegram.sendMessage(manager.id, `üì® <b>–ü—Ä–∏—à–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É!</b>`, {parse_mode: 'HTML', reply_markup: {inline_keyboard: [[{text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', callback_data: `getanc:${res}`}]]}})
                        }
                    }
                }
            }
        },
    );
    const load_nc = new Scenes.WizardScene(
        'load_nc',
        async (ctx) => {
            const s = await ctx.replyWithHTML(`<b>–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —Ç–∞–±–ª–∏—Ü—ã (—Ñ–æ—Ä–º–∞—Ç: .xlsx, .xls, .csv).</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
            ctx.wizard.state.messageId2 = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }
            if(ctx.message.document){
                const user = await getUser(ctx.from.id);
                if(user?.status === 5){
                    const fileId = ctx.message.document.file_id;
                    const fileLink = await ctx.telegram.getFileLink(fileId);
                    const fileResponse = await fetch(fileLink);
                    const fileBuffer = await fileResponse.arrayBuffer();

                    try {
                        ctx.deleteMessage();
                        ctx.deleteMessage(ctx.wizard.state.messageId2);

                        const workbook = XLSX.read(fileBuffer);
                        const firstSheetName = workbook.SheetNames[0];
                        const worksheet = workbook.Sheets[firstSheetName];
                        const jsonData = XLSX.utils.sheet_to_json(worksheet);

                        const formattedData = jsonData.map((row) => ({
                            id: row['–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä'] || -1,
                            rod_id: row['–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä'] || -1,
                            name: row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] || '',
                            price_per_unit: row['—Ü–µ–Ω–∞ –∑–∞ –µ–¥.'] || -1,
                            unit_of_measurement: row['–µ–¥. –∏–∑–º–µ—Ä–µ–Ω–∏—è'] || '',
                            key: row['–∫–ª—é—á –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è'] || '',
                            multiplicity: row['–∫—Ä–∞—Ç–Ω–æ—Å—Ç—å'] || -1,
                        }));
                        await query(`DELETE FROM nc WHERE zavod=${user.zavod}`);
                        let all = 0;
                        let t = 0;
                        let f = 0
                        for (const row of formattedData) {
                            if(row.id !== -1){
                                all += 1;
                                try {
                                    await query(`INSERT INTO nc (id, rod_id, name, price_per_unit, unit_of_measurement, \`key\`, multiplicity, zavod) VALUES (?,?,?,?,?,?,?,?)`, [row.id,row.rod_id,row.name,row.price_per_unit, row.unit_of_measurement, row.key, row.multiplicity, user.zavod])
                                    t += 1
                                }
                                catch (e) {
                                    f += 1;
                                    console.log(e);
                                }
                            }
                        }
                        await ctx.replyWithHTML(`<b>–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!</b>
                        
<b>–í—Å–µ–≥–æ —Å—Ç–æ–ª–±—Ü–æ–≤:</b> ${all}
<b>–£–¥–∞—á–Ω–æ:</b> ${t}
<b>–ù–µ—É–¥–∞—á–Ω–æ:</b> ${f}`)
                        return ctx.scene.leave();
                    } catch (error) {
                        console.error(error);
                        await ctx.replyWithHTML('<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ Excel-—Ç–∞–±–ª–∏—Ü–∞.</b>');
                        return ctx.scene.leave();
                    }
                }
            }
        }
    );

    const worker_registration = new Scenes.WizardScene(
        'worker_registration',
        async (ctx) => {
            const s = await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è</b>`);
            ctx.wizard.state.messageId2 = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            let name = ctx.message.text;
            if(!hasDangerousChars(name)){
                await query(`UPDATE users SET real_name=? WHERE id=?`, [name, ctx.from.id])
                ctx.deleteMessage(ctx.wizard.state.messageId2);
                ctx.deleteMessage()
                const s = await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>`);
                ctx.wizard.state.messageId2 = s.message_id;
                return ctx.wizard.next();
            }
            else {
                await ctx.reply(`‚ùå`)
                return ctx.scene.leave()
            }
        },
        async (ctx) => {
            let phone = formatPhoneNumber(ctx.message.text);
            if(phone){
                ctx.deleteMessage()
                ctx.deleteMessage(ctx.wizard.state.messageId2);
                await db.updateUser(ctx.from.id, 'status', ctx.wizard.state.status)
                await db.updateUser(ctx.from.id, 'zavod', ctx.wizard.state.creater_zavod)
                await query(`UPDATE users SET phone=? WHERE id=?`, [phone, ctx.from.id])
                let user = await getUser(ctx.from.id);
                mainMenu(ctx, user.status)
                let u = ctx.from;
                ctx.telegram.sendMessage(ctx.wizard.state.from, `üìã <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id=${u.id}">${u.first_name}</a> (@${u.username || '–ë–µ–∑ —Ç–µ–≥–∞'}), –ø–µ—Ä–µ—à–µ–ª –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∏–ª –¥–æ–ª–∂–Ω–æ—Å—Ç—å: ${status[user.status]}</b>`, {parse_mode: 'HTML'})
                return ctx.scene.leave();
            }
            else {
                await ctx.reply(`‚ùå`)
            }
        },
    );

    const driver_registration = new Scenes.WizardScene(
        'driver_registration',
        async (ctx) => {
            const s = await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</b>`);
            ctx.wizard.state.messageId2 = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            let name = ctx.message.text;
            if(!hasDangerousChars(name)){
                ctx.wizard.state.company_name = name;
                ctx.deleteMessage(ctx.wizard.state.messageId2);
                ctx.deleteMessage()
                const s = await ctx.replyWithHTML(`<b>–ó–∞–ø–∏—à–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä –ø–æ –ø—Ä–∏–º–µ—Ä—É –ê111–ú–†97–®–ê–ö12 "–ì–û–°–ù–û–ú–ï–†+–ú–ê–†–ö–ê+–°–ö–û–õ–¨–ö–ò –ö–£–ë–û–í–ê–Ø"</b>`);
                ctx.wizard.state.messageId2 = s.message_id;
                return ctx.wizard.next();
            }
            else {
                await ctx.reply(`‚ùå`)
                return ctx.scene.leave()
            }
        },
        async (ctx) => {
            let name = ctx.message.text;
            if(!hasDangerousChars(name)){
                ctx.deleteMessage()
                ctx.deleteMessage(ctx.wizard.state.messageId2);
                ctx.wizard.state.car = name;
                ctx.deleteMessage()
                const s = await ctx.replyWithHTML(`<b>–ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–í–≤–µ–¥–∏—Ç–µ –§–ò–û)</b>`);
                ctx.wizard.state.messageId2 = s.message_id;
                return ctx.wizard.next();
            }
            else {
                await ctx.reply(`‚ùå`)
            }
        },
        async (ctx) => {
            let name = ctx.message.text;
            if(!hasDangerousChars(name)){
                ctx.deleteMessage()
                ctx.deleteMessage(ctx.wizard.state.messageId2);
                ctx.scene.leave();
                ctx.wizard.state.name = name;

                await db.updateUser(ctx.from.id, `real_name`, name);
                await db.updateUser(ctx.from.id, 'status', 7)
                const zavod = await db.createZavod(ctx.from.id, ctx.wizard.state.company_name, 1);

                if(!zavod) return;
                
                await db.createCarrierCar(ctx.wizard.state.car, zavod, ctx.from.id);

                let user = await getUser(ctx.from.id);
                mainMenu(ctx, user.status)
                let u = ctx.from;
                ctx.telegram.sendMessage(ctx.wizard.state.from, `üìã <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id=${u.id}">${u.first_name}</a> (@${u.username || '–ë–µ–∑ —Ç–µ–≥–∞'}), –ø–µ—Ä–µ—à–µ–ª –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∏–ª –¥–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–∞–µ–º–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è</b>`, {parse_mode: 'HTML'})
            }
            else {
                await ctx.reply(`‚ùå`)
            }
        },
    );

    const add_car = new Scenes.WizardScene(
        'add_car',
        async (ctx) => {
            const s = await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∞—à–∏–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –•111–•–•52—à–∞–∫10 (–≥–æ—Å. –Ω–æ–º–µ—Ä + –º–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ + –∫–æ–ª-–≤–æ –∫—É–±–æ–≤)</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
            ctx.wizard.state.messageId2 = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }
            let form = ctx.message.text;
            if(!hasDangerousChars(form)){
                const user = await getUser(ctx.from.id);
                if(user && user.status === 5){
                    await query(`INSERT INTO cars (name, zavod) VALUES (?,?)`, [form ? form.normalize("NFKD").replace(/[^\w\s]/g, "") : '–ú–∞—à–∏–Ω–∞', user.zavod])
                    ctx.deleteMessage(ctx.wizard.state.messageId2);
                    ctx.deleteMessage()
                    ctx.res = user
                    await index.allCars(ctx);
                    return ctx.scene.leave();
                }
                else{
                    await ctx.reply(`‚ùå`)
                    return ctx.scene.leave()
                }
            }
            else {
                await ctx.reply(`‚ùå`)
                return ctx.scene.leave()
            }
        }
    );

    
    const create_zavod = new Scenes.WizardScene(
        'create_zavod',
        async (ctx) => {
            const s = await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–æ–¥–∞</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
            ctx.wizard.state.messageId2 = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            let name = ctx.message.text;
            if(!hasDangerousChars(name)){
                ctx.wizard.state.zavod_name = name;
                ctx.deleteMessage(ctx.wizard.state.messageId2);
                ctx.deleteMessage()
                const s = await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–æ–¥–∞</b>`);
                ctx.wizard.state.messageId2 = s.message_id;
                return ctx.wizard.next();
            }
            else {
                await ctx.reply(`‚ùå`)
                return ctx.scene.leave()
            }
        },
        async (ctx) => {
            let name = ctx.message.text;
            if(!hasDangerousChars(name)){
                ctx.wizard.state.zavod_discription = name;
                ctx.deleteMessage(ctx.wizard.state.messageId2);
                ctx.deleteMessage()
                const s = await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–∞–≤–æ–¥–∞</b>`);
                ctx.wizard.state.messageId2 = s.message_id;
                return ctx.wizard.next();
            }
            else {
                await ctx.reply(`‚ùå`)
                return ctx.scene.leave()
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }
            let place = ctx.message.text;
            if(!hasDangerousChars(place)){
                const user = await getUser(ctx.from.id);
                if(user && user.status === 8){
                    ctx.scene.leave()
                    const {state} = ctx.wizard
                    const zavodId = await db.createZavod(ctx.from.id, state.zavod_name, 0, place, state.zavod_discription);

                    let hash = index.generateRandomString(18)
            
                    let res = await query(`INSERT INTO links (zavod, hash, do, \`from\`) VALUES (?,?,?,?)`, [zavodId,hash, `add:5`,ctx.from.id])
            
                    const s = await ctx.replyWithHTML(`<b>–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è ${status[5]}</b>
            
<b>–°—Å—ã–ª–∫–∞:</b> <a href="t.me/${(await ctx.telegram.getMe()).username}?start=${hash}">*–°–ö–û–ü–ò–†–£–ô–¢–ï*</a>
            
<i>–°–°–´–õ–ö–ê –û–î–ù–û–†–ê–ó–û–í–ê–Ø</i>`, {reply_markup: {inline_keyboard: [[{text: '–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É', callback_data: `deletelink:${res.insertId}`}]]}})
                    ctx.pinChatMessage(s.message_id);
                }
                else{
                    await ctx.reply(`‚ùå`)
                    return ctx.scene.leave()
                }
            }
            else {
                await ctx.reply(`‚ùå`)
                return ctx.scene.leave()
            }
        }
    );


    const add_car_carrier = new Scenes.WizardScene(
        'add_car_carrier',
        async (ctx) => {
            const s = await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∞—à–∏–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –•111–•–•52—à–∞–∫10 (–≥–æ—Å. –Ω–æ–º–µ—Ä + –º–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ + –∫–æ–ª-–≤–æ –∫—É–±–æ–≤)</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
            ctx.wizard.state.messageId2 = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }

            let form = ctx.message.text;
            if(!hasDangerousChars(form)){
                const user = await getUser(ctx.from.id);
                if(user && user.status === 6){
                    await db.createCarrierCar(form, user.zavod);
                    ctx.deleteMessage(ctx.wizard.state.messageId2);
                    ctx.deleteMessage()
                    ctx.res = user
                    const {text, keyboard} = await carrierModels.getCars(ctx.res.zavod);
                    await ctx.replyWithHTML(text, {reply_markup: {inline_keyboard: keyboard}})
                    return ctx.scene.leave();
                }
                else{
                    await ctx.reply(`‚ùå`)
                    return ctx.scene.leave()
                }
            }
            else {
                await ctx.reply(`‚ùå`)
                return ctx.scene.leave()
            }
        }
    );

    const manager_create = new Scenes.WizardScene(
        'manager_create',
        async (ctx) => {
            const calendarKeyboard = calendar.getCalendar(new Date())
            const cancelButton = Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene');
            const s = await ctx.replyWithHTML(`üìÜ <b>–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–µ—Ç–æ–Ω</b>`, { reply_markup: { inline_keyboard: [
                        ...calendarKeyboard.reply_markup.inline_keyboard,
                        [cancelButton]
                    ]
                }});
            ctx.wizard.state.messageId = s.message_id;
            const now = new Date();
            ctx.wizard.state.calendarMessageId = s.message_id;
            ctx.wizard.state.currentMonth = now.getMonth();
            ctx.wizard.state.currentYear = now.getFullYear();
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }

                if (ctx.callbackQuery.data.startsWith('calendar-telegram-prev')) {
                    const { currentMonth, currentYear } = ctx.wizard.state;
                    const prevMonth = currentMonth === 0 ? 11 : currentMonth - 1;
                    const prevYear = currentMonth === 0 ? currentYear - 1 : currentYear;

                    ctx.wizard.state.currentMonth = prevMonth;
                    ctx.wizard.state.currentYear = prevYear;

                    const newDate = new Date(prevYear, prevMonth, 1);
                    const newCalendar = calendar.getCalendar(newDate);

                    await ctx.editMessageReplyMarkup({
                        inline_keyboard: [
                            ...newCalendar.reply_markup.inline_keyboard,
                            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')]
                        ]
                    });
                    return;
                }
                if (ctx.callbackQuery.data.startsWith('calendar-telegram-next')) {
                    const { currentMonth, currentYear } = ctx.wizard.state;
                    const nextMonth = currentMonth === 11 ? 0 : currentMonth + 1;
                    const nextYear = currentMonth === 11 ? currentYear + 1 : currentYear;

                    ctx.wizard.state.currentMonth = nextMonth;
                    ctx.wizard.state.currentYear = nextYear;

                    const newDate = new Date(nextYear, nextMonth, 1);
                    const newCalendar = calendar.getCalendar(newDate);

                    await ctx.editMessageReplyMarkup({
                        inline_keyboard: [
                            ...newCalendar.reply_markup.inline_keyboard,
                            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')]
                        ]
                    });
                    return;
                }
                else if (ctx.callbackQuery.data.startsWith('calendar-telegram-ignore')) {
                    return ctx.answerCbQuery();
                }
                else if (ctx.callbackQuery.data.startsWith('calendar-telegram')) {
                    const dateStr = ctx.callbackQuery.data.replace('calendar-telegram-date-', '');
                    const [year, month, day] = dateStr.split('-').map(Number);
                    const date = new Date(year, month - 1, day);
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    ctx.wizard.state.date = date.toLocaleDateString('ru-RU');


                    const timeKeyboard = Markup.inlineKeyboard([
                        [
                            Markup.button.callback('üåÖ –£—Ç—Ä–æ (8:00-11:00)', 'interval_8_11'),
                            Markup.button.callback('üåá –î–µ–Ω—å (13:00-16:00)', 'interval_13_16')
                        ],
                        [Markup.button.callback('‚è± –í—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é', 'manual_time')],
                        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')]
                    ]);


                    const s = await ctx.replyWithHTML(`‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏ (–æ—Ç 7:00 –¥–æ 18:00):</b>`,
                        timeKeyboard);
                    ctx.wizard.state.messageId = s.message_id;
                    ctx.wizard.state.timeSelectionStage = 'start';
                    return ctx.wizard.next();
                }
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }

                if (ctx.callbackQuery.data.startsWith('interval_')) {
                    const [start, end] = ctx.callbackQuery.data.replace('interval_', '').split('_').map(Number);
                    ctx.wizard.state.timeInterval = `${start}:00 - ${end}:00`;
                    ctx.wizard.state.startHour = start;
                    ctx.wizard.state.endHour = end;

                    await ctx.deleteMessage(ctx.wizard.state.messageId);

                    const s = await ctx.replyWithHTML(
                        `üìÖ <b>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> ${ctx.wizard.state.date}\n` +
                        `‚è∞ <b>–í—Ä–µ–º—è:</b> ${ctx.wizard.state.timeInterval}\n\n` +
                        `üì¶ <b>–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:</b>`,
                        {
                            reply_markup: {
                                inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene' }]]
                            }
                        }
                    );

                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }

                if (ctx.callbackQuery.data === 'manual_time') {
                    const hours = Array.from({length: 12}, (_, i) => i + 7);
                    const timeButtons = hours.map(h =>
                        Markup.button.callback(`${h}:00`, `time_${h}`)
                    );

                    await ctx.editMessageText(
                        `‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (7:00-18:00):</b>`,
                        { parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: [
                                    ...chunkArray(timeButtons, 4),
                                    [
                                        Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'time_back'),
                                        Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')
                                    ]
                                ]
                            }
                        }
                    );

                    ctx.wizard.state.timeSelectionStage = 'start';
                    return;
                }

                if (ctx.callbackQuery.data.startsWith('time_')) {
                    const selectedHour = parseInt(ctx.callbackQuery.data.replace('time_', ''));

                    if (ctx.wizard.state.timeSelectionStage === 'start') {
                        ctx.wizard.state.startHour = selectedHour;
                        ctx.wizard.state.timeSelectionStage = 'end';

                        const minEnd = selectedHour + 1;
                        const maxEnd = Math.min(selectedHour + 3, 18);
                        const endHours = Array.from({length: maxEnd - minEnd + 1}, (_, i) => minEnd + i);

                        const endButtons = endHours.map(h =>
                            Markup.button.callback(`${h}:00`, `time_${h}`)
                        );

                        await ctx.editMessageText(
                            `‚è∞ –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—á–∞–ª–æ –≤ ${selectedHour}:00\n` +
                            `<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è (–¥–æ ${maxEnd}:00):</b>`,
                            { parse_mode: 'HTML',
                                reply_markup: {
                                    inline_keyboard: [
                                        ...chunkArray(endButtons, 3),
                                        [
                                            Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'time_back'),
                                            Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')
                                        ]
                                    ]
                                }
                            }
                        );
                    } else if (ctx.wizard.state.timeSelectionStage === 'end') {
                        const startHour = ctx.wizard.state.startHour;
                        const endHour = selectedHour;

                        if (endHour <= startHour || endHour > startHour + 3) {
                            await ctx.answerCbQuery('‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 3 —á–∞—Å–æ–≤');
                            return;
                        }

                        ctx.wizard.state.endHour = endHour;
                        ctx.wizard.state.timeInterval = `${startHour}:00 - ${endHour}:00`;

                        await ctx.deleteMessage(ctx.wizard.state.messageId);
                        const betonBut = betonType.map(b =>
                            [{text: `${b}`, callback_data:`type_${b}`}]
                        );
                        betonBut.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene' }])
                        const s = await ctx.replyWithHTML(
                            `üìÖ <b>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> ${ctx.wizard.state.date}\n` +
                            `‚è∞ <b>–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:</b> ${ctx.wizard.state.timeInterval}\n\n` +
                            `üì¶ <b>–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:</b>`,
                            {
                                reply_markup: {
                                    inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene' }]]
                                }
                            }
                        );

                        ctx.wizard.state.messageId = s.message_id;
                        return ctx.wizard.next();
                    }
                }

                if (ctx.callbackQuery.data === 'time_back') {
                    const timeKeyboard = Markup.inlineKeyboard([
                        [
                            Markup.button.callback('üåÖ –£—Ç—Ä–æ (8:00-11:00)', 'interval_8_11'),
                            Markup.button.callback('üåá –î–µ–Ω—å (13:00-16:00)', 'interval_13_16')
                        ],
                        [Markup.button.callback('‚è± –í—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é', 'manual_time')],
                        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')]
                    ]);

                    await ctx.editMessageText(
                        `‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏:</b>`,
                        {parse_mode: 'HTML',
                            ...timeKeyboard}
                    );

                    delete ctx.wizard.state.timeSelectionStage;
                }
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }
            await ctx.deleteMessage(ctx.wizard.state.messageId)
            await ctx.deleteMessage();
            ctx.wizard.state.place = ctx.message.text;
            const s = await ctx.replyWithHTML(`üë§ <b>–£–∫–∞–∂–∏—Ç–µ —Ñ–∏–∑/—é—Ä –ª–∏—Ü–æ –∑–∞—è–≤–∫–∏</b>`, {reply_markup: {inline_keyboard: [[{text: '–§–∏–∑. –ª–∏—Ü–æ', callback_data: 'entity:0'}],[{text: '–Æ—Ä. –ª–∏—Ü–æ', callback_data: 'entity:1'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data.startsWith(`entity:`)){
                    await ctx.deleteMessage();
                    ctx.wizard.state.entity = {type: parseInt(ctx.callbackQuery.data.split(':')[1])};
                    const s = await ctx.replyWithHTML(`üë§ <b>–ï—Å–ª–∏ —Ñ–∏–∑ –ª–∏—Ü–æ, –≤–ø–∏—à–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞, –ø—Ä–∏ —é—Ä. –ª–∏—Ü–µ –≤–ø–∏—Å—ã–≤–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }
            await ctx.deleteMessage(ctx.wizard.state.messageId)
            await ctx.deleteMessage();
            ctx.wizard.state.entity.text = ctx.message.text
            const s = await ctx.replyWithHTML(`üìû <b>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏.</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }
            await ctx.deleteMessage(ctx.wizard.state.messageId)
            await ctx.deleteMessage();
            let phone = formatPhoneNumber(ctx.message.text)
            if(phone){
                ctx.wizard.state.phone = phone;
                const allBeton = await query(`SELECT * FROM nc WHERE zavod=? AND \`key\`=?`, [(await getUser(ctx.from.id)).zavod, `Beton`])
                const betonBut = allBeton.map(b =>
                    [{text: `${b.name} (${b.price_per_unit} —Ä—É–±/–º¬≥)`, callback_data:`type_${b.fid}`}]
                );
                betonBut.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene' }])
                const s = await ctx.replyWithHTML(`üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –º–∞—Ä–∫—É –±–µ—Ç–æ–Ω–∞:</b>`,
                    {
                        reply_markup: {
                            inline_keyboard: betonBut
                        }
                    }
                );
                ctx.wizard.state.messageId = s.message_id;
                return ctx.wizard.next();
            }
            else{
                const s = await ctx.replyWithHTML(`<b>–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.</b>`)
                ctx.wizard.state.messageId = s.message_id;
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data.startsWith(`type_`)){
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    ctx.wizard.state.betonType = parseInt(ctx.callbackQuery.data.split('_')[1]);
                    const s = await ctx.replyWithHTML(`‚öñÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ –æ–±—ä–µ–º/—Ü–µ–Ω—É –∑–∞ –∫—É–±–æ–º–µ—Ç—Ä —Å–æ —Å–∫–∏–¥–∫–æ–π 
‚ùóÔ∏è–ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø–æ –ø—Ä–∞–π—Å—É, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–º‚ùóÔ∏è
‚ùóÔ∏è–ï—Å–ª–∏ –Ω–µ—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, —Ç–æ –≤–≤–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É –∏–ª–∏ –∑–∞–ø—è—Ç—É—é‚ùóÔ∏è
–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–º–∏ –º–∞—Ä–∫–∞: ${await db.getBetonName(ctx.wizard.state.betonType)}

(–ü—Ä–∏–º–µ—Ä 10/7000)</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }
            await ctx.deleteMessage(ctx.wizard.state.messageId)
            await ctx.deleteMessage();
            const input = ctx.message.text.split('/');
            const price = await query(`SELECT * FROM nc WHERE fid=?`, [ctx.wizard.state.betonType]);
            if(input.length === 2 && input[0] && input[1]){
                ctx.wizard.state.amount = toFloat(input[0]);
                ctx.wizard.state.userPrice = toFloat(input[1]);
                ctx.wizard.state.price = price[0].price_per_unit;
            }
            else{
                if(price.length > 0){
                    ctx.wizard.state.amount = toFloat(ctx.message.text);
                    ctx.wizard.state.price = price[0].price_per_unit;
                    ctx.wizard.state.userPrice = price[0].price_per_unit;
                }
                else{
                    const s = await ctx.replyWithHTML(`‚ùå <b>–¶–µ–Ω–∞ –∑–∞ –∫—É–±–æ–º–µ—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é. –£–∫–∞–∂–∏—Ç–µ –æ–±—ä–µ–º/—Ü–µ–Ω—É –∑–∞ –∫—É–±–æ–º–µ—Ç—Ä (–ü—Ä–∏–º–µ—Ä: 10/7000)</b>`);
                    ctx.wizard.state.messageId = s.message_id;
                    return;
                }
            }
            const s = await ctx.replyWithHTML(`<b>–û–±—å–µ–º: ${ctx.wizard.state.amount} –º¬≥
–¶–µ–Ω–∞: ${ctx.wizard.state.userPrice} —Ä—É–±/–º¬≥
–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: ${Math.round(ctx.wizard.state.amount * ctx.wizard.state.userPrice)} —Ä—É–±
                
üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã</b>`, {reply_markup: {inline_keyboard: [[{text: '–ü–æ —Ñ–∞–∫—Ç—É –Ω–∞ –º–µ—Å—Ç–µ', callback_data: 'pay_form:0'}],[{text: '–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞', callback_data: 'pay_form:1'}],[{text: '–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ % –∏–ª–∏ —Ä—É–±.', callback_data: 'pay_form:2'}],[{text: '–ü–æ—Å—Ç–æ–ø–ª–∞—Ç–∞', callback_data: 'pay_form:3'}],[{text: '–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å', callback_data: 'pay_form:4'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data.startsWith(`pay_form:`)){
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    let form = parseInt(ctx.callbackQuery.data.split(':')[1]);
                    if(form !== 2){
                        ctx.wizard.state.payForm = form;
                        const s = await ctx.replyWithHTML(`<b>üì¶ –£–∫–∞–∂–∏—Ç–µ: –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ø—Ä–∞–π—Å—É –∫—É–±/–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ –∫—É–±/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–æ–≤ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É, –∏–ª–∏ –∂–µ: –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ø—Ä–∞–π—Å—É –∫—É–±/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–æ–≤ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É

–í–∞—à –æ–±—ä–µ–º: ${ctx.wizard.state.amount} –º¬≥
                            
–ü—Ä–∏–º–µ—Ä 
900/10 (–ø—Ä–æ–¥–∞–∂–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏)
900/800/10 (–ø—Ä–æ–¥–∞–∂–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π)</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                        ctx.wizard.state.messageId = s.message_id;
                        return ctx.wizard.next();
                    }
                    else{
                        ctx.wizard.state.payForm = form;
                        ctx.wizard.state.enterProc = true;
                        const s = await ctx.replyWithHTML(`üìé <b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–ª–∏ —Å—É–º–º—É –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                        ctx.wizard.state.messageId = s.message_id;
                    }
                }
            }
            else if(ctx.wizard.state.enterProc){
                ctx.deleteMessage();
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                delete ctx.wizard.state.enterProc;
                ctx.wizard.state.payFormProcent = parseInt(ctx.message.text);
                const s = await ctx.replyWithHTML(`<b>üì¶ –£–∫–∞–∂–∏—Ç–µ: –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ø—Ä–∞–π—Å—É –∫—É–±/–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ –∫—É–±/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–æ–≤ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É, –∏–ª–∏ –∂–µ: –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ø—Ä–∞–π—Å—É –∫—É–±/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–æ–≤ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É

–í–∞—à –æ–±—ä–µ–º: ${ctx.wizard.state.amount} –º¬≥
                            
–ü—Ä–∏–º–µ—Ä 
900/10 (–ø—Ä–æ–¥–∞–∂–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏)
900/800/10 (–ø—Ä–æ–¥–∞–∂–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π)</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                ctx.wizard.state.messageId = s.message_id;
                return ctx.wizard.next();
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }
            await ctx.deleteMessage(ctx.wizard.state.messageId)
            await ctx.deleteMessage();
            const input = ctx.message.text.split('/');
            if(input.length === 3){
                ctx.wizard.state.delivery = {
                    price: toFloat(input[0]),
                    price_with_add: toFloat(input[1]),
                    amount: toFloat(input[2])
                }
            }
            else if(input.length === 2){
                ctx.wizard.state.delivery = {
                    price: toFloat(input[0]),
                    amount: toFloat(input[1]),
                    price_with_add: null
                }
            }
            else{
                const s = await ctx.replyWithHTML(`‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ—Å—Ç–∞–≤–∫–∏. –£–∫–∞–∂–∏—Ç–µ: –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ø—Ä–∞–π—Å—É –∫—É–±/–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ –∫—É–±/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–æ–≤ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É, –∏–ª–∏ –∂–µ: –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ø—Ä–∞–π—Å—É –∫—É–±/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–æ–≤ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É</b>`);
                ctx.wizard.state.messageId = s.message_id;
                return;
            }
            const all_dops = await query(`SELECT * FROM nc WHERE zavod=? AND \`key\`=? AND rod_id=-1`, [(await getUser(ctx.from.id)).zavod, 'Equimpent']);
            let but = all_dops.map(s => [{text: `${s.name}`, callback_data: `dop:${s.fid}`}]);
            but.push([{text: '–î–∞–ª–µ–µ', callback_data: 'next'}]);
            but.push([{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]);
            const s = await ctx.replyWithHTML(`üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø. —É—Å–ª—É–≥–∏ –∫ –∑–∞—è–≤–∫–µ:</b>`, {reply_markup:  {inline_keyboard: but}});
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data.startsWith(`dop:`)){
                    const id = ctx.callbackQuery.data.split(':')[1];
                    const dop = (await query(`SELECT * FROM nc WHERE fid=?`, [id]))[0];
                    if(dop){
                        if(!ctx.wizard.state.dop){
                            ctx.wizard.state.dop = [];
                        }
                        const all_dops = await query(`SELECT * FROM nc WHERE zavod=? AND \`key\`=? AND rod_id=?`, [(await getUser(ctx.from.id)).zavod, 'Equimpent', dop.id]);
                        if(all_dops.length > 0){
                            const but = all_dops.map(s => [{text: `${s.name} (${s.price_per_unit} —Ä—É–±.)`, callback_data: `select_dop:${s.fid}`}]);
                            but.push([{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'back_dop'}]);
                            but.push([{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]);
                            await ctx.editMessageReplyMarkup({
                                inline_keyboard: but
                            });
                        }
                        else{
                            ctx.answerCbQuery();
                        }
                    }
                }
                else if(ctx.callbackQuery.data.startsWith(`select_dop:`)){
                    const id = ctx.callbackQuery.data.split(':')[1];
                    const dop = (await query(`SELECT * FROM nc WHERE fid=?`, [id]))[0];
                    if(dop){
                        if(!ctx.wizard.state.dop){
                            ctx.wizard.state.dop = [];
                        }
                        if(dop.multiplicity > 1){
                            ctx.wizard.state.pendingDop = dop;
                            await ctx.replyWithHTML(
                                `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è <b>${dop.name}</b> (–º–∞–∫—Å–∏–º—É–º: ${dop.multiplicity}):`,
                                {reply_markup: {inline_keyboard: [[{text: '–û—Ç–º–µ–Ω–∞', callback_data: 'back_dop'}]]}}
                            );
                        }
                        else{
                            ctx.deleteMessage();
                            const count = 1;
                            ctx.wizard.state.dop.push({...dop, count});
                            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–æ–ø. —É—Å–ª—É–≥–∞–º–∏
                            let selectedText = '';
                            if(ctx.wizard.state.dop && ctx.wizard.state.dop.length > 0){
                                selectedText = '<b>–í—ã –≤—ã–±—Ä–∞–ª–∏:</b>\n' + ctx.wizard.state.dop.map(d => `‚Ä¢ ${d.name} ‚Äî <b>${d.count}x</b> ${d.unit_of_measurement || ''} ${d.price_per_unit * d.count} (${d.price_per_unit} –∑–∞ –µ–¥.)`).join('\n') + '\n\n';
                            }
                            // –≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ–ø–æ–≤
                            const all_dops = await query(`SELECT * FROM nc WHERE zavod=? AND \`key\`=? AND rod_id=-1`, [(await getUser(ctx.from.id)).zavod, 'Equimpent']);
                            let but = all_dops.map(s => [{text: `${s.name}`, callback_data: `dop:${s.fid}`}]);
                            but.push([{text: '–î–∞–ª–µ–µ', callback_data: 'next'}]);
                            but.push([{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]);
                            await ctx.replyWithHTML(
                                `${selectedText}<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø. —É—Å–ª—É–≥–∏ –∫ –∑–∞—è–≤–∫–µ:</b>`,
                                {reply_markup: {inline_keyboard: but}}
                            );
                            return;
                        }
                    }
                }
                else if(ctx.callbackQuery.data === 'back_dop'){
                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–æ–ø. —É—Å–ª—É–≥–∞–º–∏
                    let selectedText = '';
                    if(ctx.wizard.state.dop && ctx.wizard.state.dop.length > 0){
                        selectedText = '<b>–í—ã –≤—ã–±—Ä–∞–ª–∏:</b>\n' + ctx.wizard.state.dop.map(d => `‚Ä¢ ${d.name} ‚Äî <b>${d.count}x</b> ${d.unit_of_measurement || ''} ${d.price_per_unit * d.count} (${d.price_per_unit} –∑–∞ –µ–¥.)`).join('\n') + '\n\n';
                    }
                    const all_dops = await query(`SELECT * FROM nc WHERE zavod=? AND \`key\`=? AND rod_id=-1`, [(await getUser(ctx.from.id)).zavod, 'Equimpent']);
                    let but = all_dops.map(s => [{text: `${s.name}`, callback_data: `dop:${s.fid}`}]);
                    but.push([{text: '–î–∞–ª–µ–µ', callback_data: 'next'}]);
                    but.push([{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]);
                    await ctx.editMessageText(
                        `${selectedText}<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø. —É—Å–ª—É–≥–∏ –∫ –∑–∞—è–≤–∫–µ:</b>`,
                        {parse_mode: 'HTML', reply_markup: {inline_keyboard: but}}
                    );
                }
                else if(ctx.callbackQuery.data === `next`){
                    ctx.deleteMessage(ctx.wizard.state.messageId)
                    const s = await ctx.replyWithHTML(`üì∑ <b>–î–ª—è –Ω–∞–∏–±–æ–ª–µ–µ –≥—Ä–∞–º–æ—Ç–Ω–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏ –±–µ—Ç–æ–Ω–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –ø–æ–¥—ä–µ–∑–¥–Ω—ã—Ö –ø—É—Ç–µ–π, —Ç–∞–∫ –ª–æ–≥–∏—Å—Ç—ã —Å–º–æ–≥—É—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞</b>`, {reply_markup: {inline_keyboard: [[{text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ', callback_data: 'noPhoto'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }
                else if(ctx.callbackQuery.data.startsWith('dop_count:')){
                    const [_, id, count] = ctx.callbackQuery.data.split(':');
                    const dop = (await query(`SELECT * FROM nc WHERE fid=?`, [id]))[0];
                    if(dop){
                        if(!ctx.wizard.state.dop){
                            ctx.wizard.state.dop = [];
                        }
                        ctx.wizard.state.dop.push({...dop, count: parseInt(count)});
                        await ctx.answerCbQuery(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${dop.name} (${count} ${dop.unit_of_measurement})`);
                        // –í–µ—Ä–Ω—É—Ç—å –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ–ø–æ–≤
                        const all_dops = await query(`SELECT * FROM nc WHERE zavod=? AND \`key\`=? AND rod_id=-1`, [(await getUser(ctx.from.id)).zavod, 'Equimpent']);
                        let but = all_dops.map(s => [{text: `${s.name}`, callback_data: `dop:${s.fid}`}]);
                        but.push([{text: '–î–∞–ª–µ–µ', callback_data: 'next'}]);
                        but.push([{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]);
                        await ctx.editMessageReplyMarkup({inline_keyboard: but});
                    }
                }
            }
            else if(ctx.wizard.state.pendingDop && ctx.message?.text){
                const dop = ctx.wizard.state.pendingDop;
                const count = parseInt(ctx.message.text);
                if(isNaN(count) || count < 1 || count > dop.multiplicity){
                    await ctx.replyWithHTML(`‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${dop.multiplicity}`);
                    return;
                }
                ctx.wizard.state.dop.push({...dop, count});
                delete ctx.wizard.state.pendingDop;
                // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–æ–ø. —É—Å–ª—É–≥–∞–º–∏
                let selectedText = '';
                if(ctx.wizard.state.dop && ctx.wizard.state.dop.length > 0){
                    selectedText = '<b>–í—ã –≤—ã–±—Ä–∞–ª–∏:</b>\n' + ctx.wizard.state.dop.map(d => `‚Ä¢ ${d.name} ‚Äî <b>${d.count}x</b> ${d.unit_of_measurement || ''} ${d.price_per_unit * d.count} (${d.price_per_unit} –∑–∞ –µ–¥.)`).join('\n') + '\n\n';
                }
                // –≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ–ø–æ–≤
                const all_dops = await query(`SELECT * FROM nc WHERE zavod=? AND \`key\`=? AND rod_id=-1`, [(await getUser(ctx.from.id)).zavod, 'Equimpent']);
                let but = all_dops.map(s => [{text: `${s.name}`, callback_data: `dop:${s.fid}`}]);
                but.push([{text: '–î–∞–ª–µ–µ', callback_data: 'next'}]);
                but.push([{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]);
                await ctx.replyWithHTML(
                    `${selectedText}<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø. —É—Å–ª—É–≥–∏ –∫ –∑–∞—è–≤–∫–µ:</b>`,
                    {reply_markup: {inline_keyboard: but}}
                );
                return;
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data === `noPhoto`){
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    ctx.wizard.state.photos = null;
                    ctx.wizard.state.video = null;
                    resultPrice(ctx)
                }
                else if(ctx.callbackQuery.data === `stop`){
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    resultPrice(ctx)
                }
            }
            else if(ctx.message.photo){
                if(!ctx.wizard.state.photo) ctx.wizard.state.photo = [];
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                await ctx.deleteMessage()
                ctx.wizard.state.photo.push(ctx.message.photo[ctx.message.photo.length - 1].file_id);
                const s = await ctx.replyWithHTML(`üì∑ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ!</b>`, {reply_markup: {inline_keyboard: [[{text: '–ó–∞–∫–æ–Ω—á–∏—Ç—å', callback_data: 'stop'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                ctx.wizard.state.messageId = s.message_id;
            }
            else if(ctx.message.video){
                if(!ctx.wizard.state.video) ctx.wizard.state.video = [];
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                await ctx.deleteMessage()
                ctx.wizard.state.video.push(ctx.message.video.file_id);
                const s = await ctx.replyWithHTML(`üì∑ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ!</b>`, {reply_markup: {inline_keyboard: [[{text: '–ó–∞–∫–æ–Ω—á–∏—Ç—å', callback_data: 'stop'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                ctx.wizard.state.messageId = s.message_id;
            }
            else{
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                await ctx.deleteMessage()
                const s = await ctx.replyWithHTML(`‚ùå <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ!</b>`, {reply_markup: {inline_keyboard: [[{text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ', callback_data: 'noPhoto'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                ctx.wizard.state.messageId = s.message_id;
                return
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data.startsWith(`enter:`)){
                
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    let price = parseInt(ctx.callbackQuery.data.split(':')[1]);
                    if(price !== -1){
                        ctx.wizard.state.enterPrice = price;
                        exitPrice(ctx)
                    }
                    else{
                        ctx.wizard.state.enterUserPrice = true;
                        const s = await ctx.replyWithHTML(`üíµ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                        ctx.wizard.state.messageId = s.message_id;
                    }
                }
        
            }
            else if(ctx.wizard.state.enterUserPrice){
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                await ctx.deleteMessage()
                let price = parseInt(ctx.message.text);
                if(price > 0){
                    ctx.wizard.state.enterPrice = price;
                    exitPrice(ctx)
                }
                else{
                    const s = await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏!</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                }
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data.startsWith(`exit:`)){
                
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    let price = parseInt(ctx.callbackQuery.data.split(':')[1]);
                    if(price !== -1){
                        ctx.wizard.state.exitPrice = price;
                        const s = await ctx.replyWithHTML(`‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ (–ü—Ä–∏–º–µ—Ä: —Ñ–æ—Ä–º–∞ –æ–¥–µ–∂–¥—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –º–∞—à–∏–Ω–∞–º–∏, –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ)</b>`, {reply_markup: {inline_keyboard: [[{text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', callback_data: 'nocom'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                        ctx.wizard.state.messageId = s.message_id;
                        return ctx.wizard.next();
                    }
                    else{
                        ctx.wizard.state.exitUserPrice = true;
                        const s = await ctx.replyWithHTML(`üíµ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                        ctx.wizard.state.messageId = s.message_id;
                    }
                }
            }
            else if(ctx.wizard.state.exitUserPrice){
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                await ctx.deleteMessage()
                let price = parseInt(ctx.message.text);
                if(price > 0){
                    ctx.wizard.state.exitPrice = price;
                    const s = await ctx.replyWithHTML(`‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ (–ü—Ä–∏–º–µ—Ä: —Ñ–æ—Ä–º–∞ –æ–¥–µ–∂–¥—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –º–∞—à–∏–Ω–∞–º–∏, –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ)</b>`, {reply_markup: {inline_keyboard: [[{text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', callback_data: 'nocom'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }
                else{
                    const s = await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏!</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                }
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data === `nocom`){
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    ctx.wizard.state.com = '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è';
                    const s = await last(ctx)
                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }
            }
            await ctx.deleteMessage(ctx.wizard.state.messageId)
            await ctx.deleteMessage()
            ctx.wizard.state.com = ctx.message.text;
            const s = await last(ctx)
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data === `create_anc`){
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    ctx.scene.leave();
                    const {id} = ctx.from
                    let user = await getUser(id);
                    const s = ctx.wizard.state;
                    let media = [];
                    let ph = [];
                    let vd = [];
                    if(ctx.wizard.state.photo !== undefined && ctx.wizard.state.photo?.length > 0){
                        ph = ctx.wizard.state.photo.map((fileId) => {
                        return {type: 'photo', fileId: fileId}});
                    }
                    if(ctx.wizard.state.video !== undefined && ctx.wizard.state.video?.length > 0){
                        vd = ctx.wizard.state.video.map((fileId) => {return {type: 'video', fileId: fileId}});
                    }
                    media = JSON.stringify(media.concat(ph,vd));
                    
                    let f;
                    if(s.payForm === 2){
                        f = `–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ ${s.payFormProcent}%`
                    }
                
                    let deliveryp = s.delivery.price;
                    if(s.delivery.price_with_add){
                        deliveryp = s.delivery.price_with_add
                    }
                
                    let dops = ``;
                    let price_dop = 0
                    for(const dop of s.dop){
                        dops += `\n‚Ä¢ ${dop.name} ‚Äî ${dop.price_per_unit * dop.count} —Ä—É–±. <b>${dop.count}x</b> ${dop.unit_of_measurement || ''}`
                        price_dop += dop.price_per_unit * dop.count;
                    }
                    const betont = (await query(`SELECT * FROM nc WHERE fid=?`,[s.betonType]))[0].name
                    const res = await createForm({
                        type: 1,
                        created_by: ctx.from.id,
                        date: `${s.date} | ${s.timeInterval}`,
                        place: s.place,
                        phone: s.phone,
                        betonType: betont,
                        betonAmount: toFloat(s.amount),
                        betonUserPrice: parseInt(s.userPrice),
                        betonPrice: parseInt(s.price),
                        payForm: f || payForms[s.payForm],
                        deliveryPriceWithAdd: toFloat(deliveryp),
                        deliveryPrice: toFloat(s.delivery.price),
                        deliveryAmount: toFloat(s.delivery.amount),
                        dopAll: dops,
                        dopPrice: price_dop,
                        enterPrice: s.enterPrice,
                        exitPrice: s.exitPrice,
                        com: s.com,
                        real_name: user.real_name,
                        zavod: user.zavod,
                        status: 1,
                        priv: -1,
                        media: media,
                        last_fid: -1,
                        entity: ctx.wizard.state.entity.type,
                        entity_text: ctx.wizard.state.entity.text
                    })
                    if(res){
                        ctx.replyWithHTML(`<b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º #${res}. –û–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤: "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏"</b>`)
                    
                        if(user.zavod > -1){
                            const zavod = await db.getZavod(user.zavod);
                            if(zavod && zavod?.group !== -1){
                                try{
                                    ctx.telegram.sendMessage(zavod.group, `<b>${status[user.status]} ${user.real_name || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è`} (TG: ${ctx.from.first_name} @${ctx.from.username})

                                        –î–µ–π—Å—Ç–≤–∏–µ:</b> —Å–æ–∑–¥–∞–ª –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫—É—é –∑–∞—è–≤–∫—É #${res}:
                                        
                                        <b>1) ${s.date} | ${s.timeInterval}
                                        2) ${s.place}
                                        3) ${s.phone}
                                        4) ${betont}
                                        5) –ë–µ—Ç–æ–Ω ${s.amount}–º¬≥ * ${s.userPrice} (–ø—Ä–∞–π—Å ${s.price})
                                        6) ${f || payForms[s.payForm]}
                                        7) –¥–æ—Å—Ç–∞–≤–∫–∞: ${deliveryp} –∑–∞ ${s.delivery.amount} (–ø—Ä–∞–π—Å ${s.delivery.price})
                                        8) –î–æ–ø—ã (${price_dop} —Ä—É–±.): ${dops}
                                        9) –í—Ö–æ–¥ ${s.enterPrice} —Ä—É–±.
                                        10) –í—ã—Ö–æ–¥ ${s.exitPrice} —Ä—É–±.
                                        11) ${s.com}
                                        12) ${(await getUser(ctx.from.id)).real_name}</b>`, {parse_mode:'HTML'})
                                }catch(e){
                                    console.log(e)
                                }
                            }
                        }
                    }
                }
            }
        },
    );

    

    const editmedia_form= new Scenes.WizardScene(
        'editmedia_form',
        async (ctx) => {
            const s = await ctx.replyWithHTML(`üì∑ <b>–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data === `stop`){
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    let media = JSON.parse((await query(`SELECT * FROM forms WHERE fid=?`, [ctx.wizard.state.anceta]))[0].media)
                    let ph = [];
                    let vd = [];
                    if(ctx.wizard.state.photo !== undefined && ctx.wizard.state.photo?.length > 0){
                        ph = ctx.wizard.state.photo.map((fileId) => {
                        return {type: 'photo', fileId: fileId}});
                    }
                    if(ctx.wizard.state.video !== undefined && ctx.wizard.state.video?.length > 0){
                        vd = ctx.wizard.state.video.map((fileId) => {return {type: 'video', fileId: fileId}});
                    }
                    media = JSON.stringify(media.concat(ph,vd));
                    await query(`UPDATE forms SET media=? WHERE fid=?`, [media, ctx.wizard.state.anceta])
                    ctx.replyWithHTML(`<b>–í–∞—à–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>`)
                    return await ctx.scene.leave()
                }
            }
            else if(ctx.message.photo){
                if(!ctx.wizard.state.photo) ctx.wizard.state.photo = [];
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                await ctx.deleteMessage()
                ctx.wizard.state.photo.push(ctx.message.photo[ctx.message.photo.length - 1].file_id);
                const s = await ctx.replyWithHTML(`üì∑ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ!</b>`, {reply_markup: {inline_keyboard: [[{text: '–ó–∞–∫–æ–Ω—á–∏—Ç—å', callback_data: 'stop'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                ctx.wizard.state.messageId = s.message_id;
            }
            else if(ctx.message.video){
                if(!ctx.wizard.state.video) ctx.wizard.state.video = [];
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                await ctx.deleteMessage()
                ctx.wizard.state.video.push(ctx.message.video.file_id);
                const s = await ctx.replyWithHTML(`üì∑ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ!</b>`, {reply_markup: {inline_keyboard: [[{text: '–ó–∞–∫–æ–Ω—á–∏—Ç—å', callback_data: 'stop'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                ctx.wizard.state.messageId = s.message_id;
            }
            else{
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                await ctx.deleteMessage()
                const s = await ctx.replyWithHTML(`‚ùå <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ!</b>`, {reply_markup: {inline_keyboard: [[{text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ', callback_data: 'noPhoto'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                ctx.wizard.state.messageId = s.message_id;
                return
            }
        },
    );
    const edit_form= new Scenes.WizardScene(
        'edit_form',
        async (ctx) => {
            if(ctx.wizard.state.type === 1 || ctx.wizard.state.type === 3){
                const s = await ctx.replyWithHTML(editTypes[ctx.wizard.state.type].text, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                ctx.wizard.state.messageId = s.message_id;
            }
            else if(ctx.wizard.state.type === 0){
                const calendarKeyboard = calendar.getCalendar(new Date())
                const cancelButton = Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene');
                const s = await ctx.replyWithHTML(`üìÜ <b>–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–µ—Ç–æ–Ω</b>`, { reply_markup: { inline_keyboard: [
                            ...calendarKeyboard.reply_markup.inline_keyboard,
                            [cancelButton]
                        ]
                    }});
                ctx.wizard.state.messageId = s.message_id;
                const now = new Date();
                ctx.wizard.state.calendarMessageId = s.message_id;
                ctx.wizard.state.currentMonth = now.getMonth();
                ctx.wizard.state.currentYear = now.getFullYear();
                return ctx.wizard.next();
            }
            else if (ctx.wizard.state.type === 2){
                const allBeton = await query(`SELECT * FROM nc WHERE zavod=? AND \`key\`=?`, [(await getUser(ctx.from.id)).zavod, `Beton`])
                const betonBut = allBeton.map(b =>
                    [{text: `${b.name}`, callback_data:`type_${b.fid}`}]
                );
                betonBut.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene' }])
                const s = await ctx.replyWithHTML(`üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –º–∞—Ä–∫—É –±–µ—Ç–æ–Ω–∞:</b>`,
                    {
                        reply_markup: {
                            inline_keyboard: betonBut
                        }
                    }
                );
                ctx.wizard.state.messageId = s.message_id;
            }
            else if(ctx.wizard.state.type === 4){
                const all_dops = await query(`SELECT * FROM nc WHERE zavod=? AND \`key\`=? AND rod_id=-1`, [(await getUser(ctx.from.id)).zavod, 'Equimpent']);
                let but = all_dops.map(s => [{text: `${s.name}`, callback_data: `dop:${s.fid}`}]);
                but.push([{text: '–î–∞–ª–µ–µ', callback_data: 'next'}]);
                but.push([{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]);
                const s = await ctx.replyWithHTML(`üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø. —É—Å–ª—É–≥–∏ –∫ –∑–∞—è–≤–∫–µ:</b>`, {reply_markup:  {inline_keyboard: but}});
                ctx.wizard.state.messageId = s.message_id;
            }
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.wizard.state.type === 0){
                    
                    if (ctx.callbackQuery.data.startsWith('calendar-telegram-prev')) {
                        const { currentMonth, currentYear } = ctx.wizard.state;
                        const prevMonth = currentMonth === 0 ? 11 : currentMonth - 1;
                        const prevYear = currentMonth === 0 ? currentYear - 1 : currentYear;

                        ctx.wizard.state.currentMonth = prevMonth;
                        ctx.wizard.state.currentYear = prevYear;

                        const newDate = new Date(prevYear, prevMonth, 1);
                        const newCalendar = calendar.getCalendar(newDate);

                        await ctx.editMessageReplyMarkup({
                            inline_keyboard: [
                                ...newCalendar.reply_markup.inline_keyboard,
                                [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')]
                            ]
                        });
                        return;
                    }
                    if (ctx.callbackQuery.data.startsWith('calendar-telegram-next')) {
                        const { currentMonth, currentYear } = ctx.wizard.state;
                        const nextMonth = currentMonth === 11 ? 0 : currentMonth + 1;
                        const nextYear = currentMonth === 11 ? currentYear + 1 : currentYear;

                        ctx.wizard.state.currentMonth = nextMonth;
                        ctx.wizard.state.currentYear = nextYear;

                        const newDate = new Date(nextYear, nextMonth, 1);
                        const newCalendar = calendar.getCalendar(newDate);

                        await ctx.editMessageReplyMarkup({
                            inline_keyboard: [
                                ...newCalendar.reply_markup.inline_keyboard,
                                [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')]
                            ]
                        });
                        return;
                    }
                    else if (ctx.callbackQuery.data.startsWith('calendar-telegram-ignore')) {
                        return ctx.answerCbQuery();
                    }
                    else if (ctx.callbackQuery.data.startsWith('calendar-telegram')) {
                        const dateStr = ctx.callbackQuery.data.replace('calendar-telegram-date-', '');
                        const [year, month, day] = dateStr.split('-').map(Number);
                        const date = new Date(year, month - 1, day);
                        await ctx.deleteMessage(ctx.wizard.state.messageId)
                        ctx.wizard.state.date = date.toLocaleDateString('ru-RU');


                        const timeKeyboard = Markup.inlineKeyboard([
                            [
                                Markup.button.callback('üåÖ –£—Ç—Ä–æ (8:00-11:00)', 'interval_8_11'),
                                Markup.button.callback('üåá –î–µ–Ω—å (13:00-16:00)', 'interval_13_16')
                            ],
                            [Markup.button.callback('‚è± –í—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é', 'manual_time')],
                            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')]
                        ]);


                        const s = await ctx.replyWithHTML(`‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏ (–æ—Ç 7:00 –¥–æ 18:00):</b>`,
                            timeKeyboard);
                        ctx.wizard.state.messageId = s.message_id;
                        ctx.wizard.state.timeSelectionStage = 'start';
                        return ctx.wizard.next();
                    }
                }
                else if(ctx.callbackQuery.data.startsWith(`type_`)){
                    ctx.deleteMessage(ctx.wizard.state.messageId)
                    const beton = await query(`SELECT * FROM nc WHERE fid=?`, [parseInt(ctx.callbackQuery.data.split('_')[1])])
                    
                    await query(`UPDATE forms SET betonType=?, betonPrice=? WHERE fid=${ctx.wizard.state.fid}`, [beton[0].name, beton[0].price_per_unit])
                    index.openAncet(ctx, ctx.wizard.state.fid, 1)
                    return ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data.startsWith(`dop:`)){
                    const id = ctx.callbackQuery.data.split(':')[1];
                    const dop = (await query(`SELECT * FROM nc WHERE fid=?`, [id]))[0];
                    if(dop){
                        if(!ctx.wizard.state.dop){
                            ctx.wizard.state.dop = [];
                        }
                        const all_dops = await query(`SELECT * FROM nc WHERE zavod=? AND \`key\`=? AND rod_id=?`, [(await getUser(ctx.from.id)).zavod, 'Equimpent', dop.id]);
                        if(all_dops.length > 0){
                            const but = all_dops.map(s => [{text: `${s.name} (${s.price_per_unit} —Ä—É–±.)`, callback_data: `select_dop:${s.fid}`}]);
                            but.push([{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'back_dop'}]);
                            but.push([{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]);
                            await ctx.editMessageReplyMarkup({
                                inline_keyboard: but
                            });
                        }
                        else{
                            ctx.answerCbQuery();
                        }
                    }
                }
                else if(ctx.callbackQuery.data.startsWith(`select_dop:`)){
                    const id = ctx.callbackQuery.data.split(':')[1];
                    const dop = (await query(`SELECT * FROM nc WHERE fid=?`, [id]))[0];
                    if(dop){
                        if(!ctx.wizard.state.dop){
                            ctx.wizard.state.dop = [];
                        }
                        ctx.wizard.state.dop.push(dop);
                        await ctx.answerCbQuery(`‚úÖ –î–æ–ø. —É—Å–ª—É–≥–∞ ${dop.name} –¥–æ–±–∞–≤–ª–µ–Ω–∞`);
                        const all_dops = await query(`SELECT * FROM nc WHERE zavod=? AND \`key\`=? AND rod_id=-1`, [(await getUser(ctx.from.id)).zavod, 'Equimpent']);
                        let but = all_dops.map(s => [{text: `${s.name}`, callback_data: `dop:${s.fid}`}]);
                        but.push([{text: '–î–∞–ª–µ–µ', callback_data: 'next'}]);
                        but.push([{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]);
                        await ctx.editMessageReplyMarkup({
                            inline_keyboard: but
                        });
                    }
                }
                else if(ctx.callbackQuery.data === 'back_dop'){
                    const all_dops = await query(`SELECT * FROM nc WHERE zavod=? AND \`key\`=? AND rod_id=-1`, [(await getUser(ctx.from.id)).zavod, 'Equimpent']);
                    let but = all_dops.map(s => [{text: `${s.name}`, callback_data: `dop:${s.fid}`}]);
                    but.push([{text: '–î–∞–ª–µ–µ', callback_data: 'next'}]);
                    but.push([{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]);
                    await ctx.editMessageReplyMarkup({
                        inline_keyboard: but
                    });
                }
                else if(ctx.callbackQuery.data === `next`){
                    ctx.deleteMessage(ctx.wizard.state.messageId)
                    let dops = ``;
                    let price_dop = 0
                    for(const dop of ctx.wizard.state.dop){
                        dops += `\n‚Ä¢ ${dop.name} - ${dop.price_per_unit} —Ä—É–±.`
                        price_dop += dop.price_per_unit;
                    }
                    await query(`UPDATE forms SET dopAll=?, dopPrice=? WHERE fid=${ctx.wizard.state.fid}`, [dops, price_dop])
                    index.openAncet(ctx, ctx.wizard.state.fid, 1)
                    return ctx.scene.leave();
                }
            }
            else{
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                await ctx.deleteMessage()
                if(ctx.wizard.state.type === 4){
                    const input = ctx.message.text.split('/');
                    if(input.length === 3){
                        ctx.wizard.state.delivery = {
                            price: toFloat(input[0]),
                            price_with_add: toFloat(input[1]),
                            amount: toFloat(input[2])
                        }
                    }
                    else if(input.length === 2){
                        ctx.wizard.state.delivery = {
                            price: toFloat(input[0]),
                            amount: toFloat(input[1]),
                            price_with_add: null
                        }
                    }
                    else{
                        return ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ –ø–æ —Ñ–æ—Ä–º–µ!</b>`)
                    }
                    await query(`UPDATE forms SET deliveryPriceWithAdd=?, deliveryPrice=?, deliveryAmount=? WHERE fid=${ctx.wizard.state.fid}`, [ctx.wizard.state.delivery.price_with_add === null ? toFloat(ctx.wizard.state.delivery.price) : toFloat(ctx.wizard.state.delivery.price_with_add), toFloat(ctx.wizard.state.delivery.price), toFloat(ctx.wizard.state.delivery.amount)])

                }
                else{
                    await query(`UPDATE forms SET ${editTypes[ctx.wizard.state.type].key}=? WHERE fid=${ctx.wizard.state.fid}`, [ctx.message.text])
                }

                if(ctx.wizard.state.type === 1){
                    const user = await db.getUser(ctx.from.id);
                    if(user.zavod > -1){
                        const zavod = await db.getZavod(user.zavod);
                        if(zavod && zavod.group !== -1){
                            ctx.telegram.sendMessage(zavod.group, `<b>${status[user.status]} ${user.real_name || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è`} (TG: ${ctx.from.first_name} @${ctx.from.username})

–î–µ–π—Å—Ç–≤–∏–µ:</b> –∏–∑–º–µ–Ω–∏–ª –∫—É–±–∞—Ç—É—Ä—É –Ω–∞ –∑–∞—è–≤–∫–µ #${ctx.wizard.state.fid}, –Ω–æ–≤–∞—è –∫—É–±–∞—Ç—É—Ä–∞: ${ctx.message.text} –º¬≥`, {parse_mode:'HTML'})
                        }
                    }
                }

                index.openAncet(ctx, ctx.wizard.state.fid, 1)
                return ctx.scene.leave();
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }

                if (ctx.callbackQuery.data.startsWith('interval_')) {
                    const [start, end] = ctx.callbackQuery.data.replace('interval_', '').split('_').map(Number);
                    ctx.wizard.state.timeInterval = `${start}:00 - ${end}:00`;
                    ctx.wizard.state.startHour = start;
                    ctx.wizard.state.endHour = end;

                    await ctx.deleteMessage(ctx.wizard.state.messageId);

                    await query(`UPDATE forms SET date=? WHERE fid=${ctx.wizard.state.fid}`, [`${ctx.wizard.state.date} | ${ctx.wizard.state.timeInterval}`])
                    index.openAncet(ctx, ctx.wizard.state.fid, 1)
                    const user = await db.getUser(ctx.from.id);
                    if(user.zavod > -1){
                        const zavod = await db.getZavod(user.zavod);
                        if(zavod && zavod.group !== -1){
                            ctx.telegram.sendMessage(zavod.group, `<b>${status[user.status]} ${user.real_name || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è`} (TG: ${ctx.from.first_name} @${ctx.from.username})

–î–µ–π—Å—Ç–≤–∏–µ:</b> –∏–∑–º–µ–Ω–∏–ª –¥–∞—Ç—É –Ω–∞ –∑–∞—è–≤–∫–µ #${ctx.wizard.state.fid}, –Ω–æ–≤–∞—è –¥–∞—Ç–∞: ${ctx.wizard.state.date} | ${ctx.wizard.state.timeInterval}`, {parse_mode:'HTML'})
                        }
                    }
                    return ctx.scene.leave();
                }

                if (ctx.callbackQuery.data === 'manual_time') {
                    const hours = Array.from({length: 12}, (_, i) => i + 7);
                    const timeButtons = hours.map(h =>
                        Markup.button.callback(`${h}:00`, `time_${h}`)
                    );

                    await ctx.editMessageText(
                        `‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (7:00-18:00):</b>`,
                        { parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: [
                                    ...chunkArray(timeButtons, 4),
                                    [
                                        Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'time_back'),
                                        Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')
                                    ]
                                ]
                            }
                        }
                    );

                    ctx.wizard.state.timeSelectionStage = 'start';
                    return;
                }

                if (ctx.callbackQuery.data.startsWith('time_')) {
                    const selectedHour = parseInt(ctx.callbackQuery.data.replace('time_', ''));

                    if (ctx.wizard.state.timeSelectionStage === 'start') {
                        ctx.wizard.state.startHour = selectedHour;
                        ctx.wizard.state.timeSelectionStage = 'end';

                        const minEnd = selectedHour + 1;
                        const maxEnd = Math.min(selectedHour + 3, 18);
                        const endHours = Array.from({length: maxEnd - minEnd + 1}, (_, i) => minEnd + i);

                        const endButtons = endHours.map(h =>
                            Markup.button.callback(`${h}:00`, `time_${h}`)
                        );

                        await ctx.editMessageText(
                            `‚è∞ –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—á–∞–ª–æ –≤ ${selectedHour}:00\n` +
                            `<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è (–¥–æ ${maxEnd}:00):</b>`,
                            { parse_mode: 'HTML',
                                reply_markup: {
                                    inline_keyboard: [
                                        ...chunkArray(endButtons, 3),
                                        [
                                            Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'time_back'),
                                            Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')
                                        ]
                                    ]
                                }
                            }
                        );
                    } else if (ctx.wizard.state.timeSelectionStage === 'end') {
                        const startHour = ctx.wizard.state.startHour;
                        const endHour = selectedHour;

                        if (endHour <= startHour || endHour > startHour + 3) {
                            await ctx.answerCbQuery('‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 3 —á–∞—Å–æ–≤');
                            return;
                        }

                        ctx.wizard.state.endHour = endHour;
                        ctx.wizard.state.timeInterval = `${startHour}:00 - ${endHour}:00`;

                        await ctx.deleteMessage(ctx.wizard.state.messageId);
                        await query(`UPDATE forms SET date=? WHERE fid=${ctx.wizard.state.fid}`, [`${ctx.wizard.state.date} | ${ctx.wizard.state.timeInterval}`])
                        index.openAncet(ctx, ctx.wizard.state.fid, 1)

                        const user = await db.getUser(ctx.from.id);
                        if(user.zavod > -1){
                            const zavod = await db.getZavod(user.zavod);
                            if(zavod && zavod.group !== -1){
                                ctx.telegram.sendMessage(zavod.group, `<b>${status[user.status]} ${user.real_name || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è`} (TG: ${ctx.from.first_name} @${ctx.from.username})

–î–µ–π—Å—Ç–≤–∏–µ:</b> –∏–∑–º–µ–Ω–∏–ª –¥–∞—Ç—É –Ω–∞ –∑–∞—è–≤–∫–µ #${ctx.wizard.state.fid}, –Ω–æ–≤–∞—è –¥–∞—Ç–∞: ${ctx.wizard.state.date} | ${ctx.wizard.state.timeInterval}`, {parse_mode:'HTML'})
                            }
                        }

                        return ctx.scene.leave();
                    }
                }

                if (ctx.callbackQuery.data === 'time_back') {
                    const timeKeyboard = Markup.inlineKeyboard([
                        [
                            Markup.button.callback('üåÖ –£—Ç—Ä–æ (8:00-11:00)', 'interval_8_11'),
                            Markup.button.callback('üåá –î–µ–Ω—å (13:00-16:00)', 'interval_13_16')
                        ],
                        [Markup.button.callback('‚è± –í—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é', 'manual_time')],
                        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')]
                    ]);

                    await ctx.editMessageText(
                        `‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏:</b>`,
                        {parse_mode: 'HTML',
                            ...timeKeyboard}
                    );

                    delete ctx.wizard.state.timeSelectionStage;
                }
            }
        },
    );

    const manager_shet = new Scenes.WizardScene(
        'manager_calculate',
        async (ctx) => {
            const allBeton = await query(`SELECT * FROM nc WHERE zavod=? AND \`key\`=?`, [(await getUser(ctx.from.id)).zavod, `Beton`])
            const betonBut = allBeton.map(b =>
                [{text: `${b.name} (${b.price_per_unit} —Ä—É–±/–º¬≥)`, callback_data:`type_${b.fid}`}]
            );
            betonBut.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene' }])
            const s = await ctx.replyWithHTML(`üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –º–∞—Ä–∫—É –±–µ—Ç–æ–Ω–∞:</b>`,
                {
                        reply_markup: {
                        inline_keyboard: betonBut
                    }
                }
            );
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data.startsWith(`type_`)){
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    ctx.wizard.state.betonType = parseInt(ctx.callbackQuery.data.split('_')[1]);
                    const s = await ctx.replyWithHTML(`‚öñÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ –æ–±—ä–µ–º/—Ü–µ–Ω—É –∑–∞ –∫—É–±–æ–º–µ—Ç—Ä —Å–æ —Å–∫–∏–¥–∫–æ–π 
‚ùóÔ∏è–ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø–æ –ø—Ä–∞–π—Å—É, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–º‚ùóÔ∏è
‚ùóÔ∏è–ï—Å–ª–∏ –Ω–µ—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, —Ç–æ –≤–≤–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É –∏–ª–∏ –∑–∞–ø—è—Ç—É—é‚ùóÔ∏è
–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–º–∏ –º–∞—Ä–∫–∞: ${await db.getBetonName(ctx.wizard.state.betonType)}

(–ü—Ä–∏–º–µ—Ä 10/7000)</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }
            await ctx.deleteMessage(ctx.wizard.state.messageId)
            await ctx.deleteMessage();
            const input = ctx.message.text.split('/');
            const price = await query(`SELECT * FROM nc WHERE fid=?`, [ctx.wizard.state.betonType]);
            if(input.length === 2 && !isNaN(input[0]) && !isNaN(input[1])){
                ctx.wizard.state.amount = toFloat(input[0]);
                ctx.wizard.state.userPrice = toFloat(input[1]);
                ctx.wizard.state.price = price[0].price_per_unit;
            }
            else{
                if(price.length > 0){
                    ctx.wizard.state.amount = toFloat(ctx.message.text);
                    ctx.wizard.state.price = price[0].price_per_unit;
                    ctx.wizard.state.userPrice = price[0].price_per_unit;
                }
                else{
                    const s = await ctx.replyWithHTML(`‚ùå <b>–¶–µ–Ω–∞ –∑–∞ –∫—É–±–æ–º–µ—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é. –£–∫–∞–∂–∏—Ç–µ –æ–±—ä–µ–º/—Ü–µ–Ω—É –∑–∞ –∫—É–±–æ–º–µ—Ç—Ä (–ü—Ä–∏–º–µ—Ä: 10/7000)</b>`);
                    ctx.wizard.state.messageId = s.message_id;
                    return;
                }
            }
            const s = await ctx.replyWithHTML(`<b>–û–±—å–µ–º: ${ctx.wizard.state.amount} –º¬≥
–¶–µ–Ω–∞: ${ctx.wizard.state.userPrice} —Ä—É–±/–º¬≥
–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: ${Math.round(ctx.wizard.state.amount * ctx.wizard.state.userPrice)} —Ä—É–±
                
üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã</b>`, {reply_markup: {inline_keyboard: [[{text: '–ü–æ —Ñ–∞–∫—Ç—É –Ω–∞ –º–µ—Å—Ç–µ', callback_data: 'pay_form:0'}],[{text: '–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞', callback_data: 'pay_form:1'}],[{text: '–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ % –∏–ª–∏ —Ä—É–±.', callback_data: 'pay_form:2'}],[{text: '–ü–æ—Å—Ç–æ–ø–ª–∞—Ç–∞', callback_data: 'pay_form:3'}],[{text: '–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å', callback_data: 'pay_form:4'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data.startsWith(`pay_form:`)){
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    let form = parseInt(ctx.callbackQuery.data.split(':')[1]);
                    if(form !== 2){
                        ctx.wizard.state.payForm = form;
                        const s = await ctx.replyWithHTML(`<b>üì¶ –£–∫–∞–∂–∏—Ç–µ: –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ø—Ä–∞–π—Å—É –∫—É–±/–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ –∫—É–±/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–æ–≤ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É, –∏–ª–∏ –∂–µ: –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ø—Ä–∞–π—Å—É –∫—É–±/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–æ–≤ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É

–í–∞—à –æ–±—ä–µ–º: ${ctx.wizard.state.amount} –º¬≥
                            
–ü—Ä–∏–º–µ—Ä 
900/10 (–ø—Ä–æ–¥–∞–∂–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏)
900/800/10 (–ø—Ä–æ–¥–∞–∂–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π)</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                        ctx.wizard.state.messageId = s.message_id;
                        return ctx.wizard.next();
                    }
                    else{
                        ctx.wizard.state.payForm = form;
                        ctx.wizard.state.enterProc = true;
                        const s = await ctx.replyWithHTML(`üìé <b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–ª–∏ —Å—É–º–º—É –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                        ctx.wizard.state.messageId = s.message_id;
                    }
                }
            }
            else if(ctx.wizard.state.enterProc){
                ctx.deleteMessage();
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                delete ctx.wizard.state.enterProc;
                ctx.wizard.state.payFormProcent = parseInt(ctx.message.text);
                const s = await ctx.replyWithHTML(`<b>üì¶ –£–∫–∞–∂–∏—Ç–µ: –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ø—Ä–∞–π—Å—É –∫—É–±/–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ –∫—É–±/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–æ–≤ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É, –∏–ª–∏ –∂–µ: –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ø—Ä–∞–π—Å—É –∫—É–±/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–æ–≤ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É

–í–∞—à –æ–±—ä–µ–º: ${ctx.wizard.state.amount} –º¬≥
                            
–ü—Ä–∏–º–µ—Ä 
900/10 (–ø—Ä–æ–¥–∞–∂–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏)
900/800/10 (–ø—Ä–æ–¥–∞–∂–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π)</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                ctx.wizard.state.messageId = s.message_id;
                return ctx.wizard.next();
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }
            await ctx.deleteMessage(ctx.wizard.state.messageId)
            await ctx.deleteMessage();
            const input = ctx.message.text.split('/');
            if(input.length === 3){
                ctx.wizard.state.delivery = {
                    price: toFloat(input[0]),
                    price_with_add: toFloat(input[1]),
                    amount: toFloat(input[2])
                }
            }
            else if(input.length === 2){
                ctx.wizard.state.delivery = {
                    price: toFloat(input[0]),
                    amount: toFloat(input[1]),
                    price_with_add: null
                }
            }
            else{
                const s = await ctx.replyWithHTML(`‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ—Å—Ç–∞–≤–∫–∏. –£–∫–∞–∂–∏—Ç–µ: –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ø—Ä–∞–π—Å—É –∫—É–±/–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ –∫—É–±/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–æ–≤ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É, –∏–ª–∏ –∂–µ: –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ø—Ä–∞–π—Å—É –∫—É–±/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–æ–≤ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É</b>`);
                ctx.wizard.state.messageId = s.message_id;
                return;
            }
            const all_dops = await query(`SELECT * FROM nc WHERE zavod=? AND \`key\`=? AND rod_id=-1`, [(await getUser(ctx.from.id)).zavod, 'Equimpent']);
            let but = all_dops.map(s => [{text: `${s.name}`, callback_data: `dop:${s.fid}`}]);
            but.push([{text: '–î–∞–ª–µ–µ', callback_data: 'next'}]);
            but.push([{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]);
            const s = await ctx.replyWithHTML(`üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø. —É—Å–ª—É–≥–∏ –∫ –∑–∞—è–≤–∫–µ:</b>`, {reply_markup:  {inline_keyboard: but}});
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data.startsWith(`dop:`)){
                    const id = ctx.callbackQuery.data.split(':')[1];
                    const dop = (await query(`SELECT * FROM nc WHERE fid=?`, [id]))[0];
                    if(dop){
                        if(!ctx.wizard.state.dop){
                            ctx.wizard.state.dop = [];
                        }
                        const all_dops = await query(`SELECT * FROM nc WHERE zavod=? AND \`key\`=? AND rod_id=?`, [(await getUser(ctx.from.id)).zavod, 'Equimpent', dop.id]);
                        if(all_dops.length > 0){
                            const but = all_dops.map(s => [{text: `${s.name} (${s.price_per_unit} —Ä—É–±.)`, callback_data: `select_dop:${s.fid}`}]);
                            but.push([{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'back_dop'}]);
                            but.push([{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]);
                            await ctx.editMessageReplyMarkup({
                                inline_keyboard: but
                            });
                        }
                        else{
                            ctx.answerCbQuery();
                        }
                    }
                }
                else if(ctx.callbackQuery.data.startsWith(`select_dop:`)){
                    const id = ctx.callbackQuery.data.split(':')[1];
                    const dop = (await query(`SELECT * FROM nc WHERE fid=?`, [id]))[0];
                    if(dop){
                        if(!ctx.wizard.state.dop){
                            ctx.wizard.state.dop = [];
                        }
                        if(dop.multiplicity > 1){
                            ctx.wizard.state.pendingDop = dop;
                            await ctx.replyWithHTML(
                                `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è <b>${dop.name}</b> (–º–∞–∫—Å–∏–º—É–º: ${dop.multiplicity}):`,
                                {reply_markup: {inline_keyboard: [[{text: '–û—Ç–º–µ–Ω–∞', callback_data: 'back_dop'}]]}}
                            );
                        }
                        else{
                            ctx.deleteMessage();
                            const count = 1;
                            ctx.wizard.state.dop.push({...dop, count});
                            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–æ–ø. —É—Å–ª—É–≥–∞–º–∏
                            let selectedText = '';
                            if(ctx.wizard.state.dop && ctx.wizard.state.dop.length > 0){
                                selectedText = '<b>–í—ã –≤—ã–±—Ä–∞–ª–∏:</b>\n' + ctx.wizard.state.dop.map(d => `‚Ä¢ ${d.name} ‚Äî <b>${d.count}x</b> ${d.unit_of_measurement || ''} ${d.price_per_unit * d.count} (${d.price_per_unit} –∑–∞ –µ–¥.)`).join('\n') + '\n\n';
                            }
                            // –≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ–ø–æ–≤
                            const all_dops = await query(`SELECT * FROM nc WHERE zavod=? AND \`key\`=? AND rod_id=-1`, [(await getUser(ctx.from.id)).zavod, 'Equimpent']);
                            let but = all_dops.map(s => [{text: `${s.name}`, callback_data: `dop:${s.fid}`}]);
                            but.push([{text: '–î–∞–ª–µ–µ', callback_data: 'next'}]);
                            but.push([{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]);
                            await ctx.replyWithHTML(
                                `${selectedText}<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø. —É—Å–ª—É–≥–∏ –∫ –∑–∞—è–≤–∫–µ:</b>`,
                                {reply_markup: {inline_keyboard: but}}
                            );
                            return;
                        }
                    }
                }
                else if(ctx.callbackQuery.data === 'back_dop'){
                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–æ–ø. —É—Å–ª—É–≥–∞–º–∏
                    let selectedText = '';
                    if(ctx.wizard.state.dop && ctx.wizard.state.dop.length > 0){
                        selectedText = '<b>–í—ã –≤—ã–±—Ä–∞–ª–∏:</b>\n' + ctx.wizard.state.dop.map(d => `‚Ä¢ ${d.name} ‚Äî <b>${d.count}x</b> ${d.unit_of_measurement || ''} ${d.price_per_unit * d.count} (${d.price_per_unit} –∑–∞ –µ–¥.)`).join('\n') + '\n\n';
                    }
                    const all_dops = await query(`SELECT * FROM nc WHERE zavod=? AND \`key\`=? AND rod_id=-1`, [(await getUser(ctx.from.id)).zavod, 'Equimpent']);
                    let but = all_dops.map(s => [{text: `${s.name}`, callback_data: `dop:${s.fid}`}]);
                    but.push([{text: '–î–∞–ª–µ–µ', callback_data: 'next'}]);
                    but.push([{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]);
                    await ctx.editMessageText(
                        `${selectedText}<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø. —É—Å–ª—É–≥–∏ –∫ –∑–∞—è–≤–∫–µ:</b>`,
                        {parse_mode: 'HTML', reply_markup: {inline_keyboard: but}}
                    );
                }
                else if(ctx.callbackQuery.data === `next`){
                    ctx.deleteMessage(ctx.wizard.state.messageId)
                    const s = await ctx.replyWithHTML(`üì∑ <b>–î–ª—è –Ω–∞–∏–±–æ–ª–µ–µ –≥—Ä–∞–º–æ—Ç–Ω–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏ –±–µ—Ç–æ–Ω–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –ø–æ–¥—ä–µ–∑–¥–Ω—ã—Ö –ø—É—Ç–µ–π, —Ç–∞–∫ –ª–æ–≥–∏—Å—Ç—ã —Å–º–æ–≥—É—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞</b>`, {reply_markup: {inline_keyboard: [[{text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ', callback_data: 'noPhoto'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }
                else if(ctx.callbackQuery.data.startsWith('dop_count:')){
                    const [_, id, count] = ctx.callbackQuery.data.split(':');
                    const dop = (await query(`SELECT * FROM nc WHERE fid=?`, [id]))[0];
                    if(dop){
                        if(!ctx.wizard.state.dop){
                            ctx.wizard.state.dop = [];
                        }
                        ctx.wizard.state.dop.push({...dop, count: parseInt(count)});
                        await ctx.answerCbQuery(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${dop.name} (${count} ${dop.unit_of_measurement})`);
                        // –í–µ—Ä–Ω—É—Ç—å –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ–ø–æ–≤
                        const all_dops = await query(`SELECT * FROM nc WHERE zavod=? AND \`key\`=? AND rod_id=-1`, [(await getUser(ctx.from.id)).zavod, 'Equimpent']);
                        let but = all_dops.map(s => [{text: `${s.name}`, callback_data: `dop:${s.fid}`}]);
                        but.push([{text: '–î–∞–ª–µ–µ', callback_data: 'next'}]);
                        but.push([{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]);
                        await ctx.editMessageReplyMarkup({inline_keyboard: but});
                    }
                }
            }
            else if(ctx.wizard.state.pendingDop && ctx.message?.text){
                const dop = ctx.wizard.state.pendingDop;
                const count = parseInt(ctx.message.text);
                if(isNaN(count) || count < 1 || count > dop.multiplicity){
                    await ctx.replyWithHTML(`‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${dop.multiplicity}`);
                    return;
                }
                ctx.wizard.state.dop.push({...dop, count});
                delete ctx.wizard.state.pendingDop;
                // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–æ–ø. —É—Å–ª—É–≥–∞–º–∏
                let selectedText = '';
                if(ctx.wizard.state.dop && ctx.wizard.state.dop.length > 0){
                    selectedText = '<b>–í—ã –≤—ã–±—Ä–∞–ª–∏:</b>\n' + ctx.wizard.state.dop.map(d => `‚Ä¢ ${d.name} ‚Äî <b>${d.count}x</b> ${d.unit_of_measurement || ''} ${d.price_per_unit * d.count} (${d.price_per_unit} –∑–∞ –µ–¥.)`).join('\n') + '\n\n';
                }
                // –≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ–ø–æ–≤
                const all_dops = await query(`SELECT * FROM nc WHERE zavod=? AND \`key\`=? AND rod_id=-1`, [(await getUser(ctx.from.id)).zavod, 'Equimpent']);
                let but = all_dops.map(s => [{text: `${s.name}`, callback_data: `dop:${s.fid}`}]);
                but.push([{text: '–î–∞–ª–µ–µ', callback_data: 'next'}]);
                but.push([{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]);
                await ctx.replyWithHTML(
                    `${selectedText}<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø. —É—Å–ª—É–≥–∏ –∫ –∑–∞—è–≤–∫–µ:</b>`,
                    {reply_markup: {inline_keyboard: but}}
                );
                return;
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data === `noPhoto`){
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    ctx.wizard.state.photos = null;
                    ctx.wizard.state.video = null;
                    resultPrice(ctx)
                }
                else if(ctx.callbackQuery.data === `stop`){
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    resultPrice(ctx)
                }
            }
            else if(ctx.message.photo){
                if(!ctx.wizard.state.photo) ctx.wizard.state.photo = [];
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                await ctx.deleteMessage()
                ctx.wizard.state.photo.push(ctx.message.photo[ctx.message.photo.length - 1].file_id);
                const s = await ctx.replyWithHTML(`üì∑ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ!</b>`, {reply_markup: {inline_keyboard: [[{text: '–ó–∞–∫–æ–Ω—á–∏—Ç—å', callback_data: 'stop'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                ctx.wizard.state.messageId = s.message_id;
            }
            else if(ctx.message.video){
                if(!ctx.wizard.state.video) ctx.wizard.state.video = [];
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                await ctx.deleteMessage()
                ctx.wizard.state.video.push(ctx.message.video.file_id);
                const s = await ctx.replyWithHTML(`üì∑ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ!</b>`, {reply_markup: {inline_keyboard: [[{text: '–ó–∞–∫–æ–Ω—á–∏—Ç—å', callback_data: 'stop'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                ctx.wizard.state.messageId = s.message_id;
            }
            else{
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                await ctx.deleteMessage()
                const s = await ctx.replyWithHTML(`‚ùå <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ!</b>`, {reply_markup: {inline_keyboard: [[{text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ', callback_data: 'noPhoto'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                ctx.wizard.state.messageId = s.message_id;
                return
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data.startsWith(`enter:`)){
                
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    let price = parseInt(ctx.callbackQuery.data.split(':')[1]);
                    if(price !== -1){
                        ctx.wizard.state.enterPrice = price;
                        exitPrice(ctx)
                    }
                    else{
                        ctx.wizard.state.enterUserPrice = true;
                        const s = await ctx.replyWithHTML(`üíµ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                        ctx.wizard.state.messageId = s.message_id;
                    }
                }
        
            }
            else if(ctx.wizard.state.enterUserPrice){
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                await ctx.deleteMessage()
                let price = parseInt(ctx.message.text);
                if(price > 0){
                    ctx.wizard.state.enterPrice = price;
                    exitPrice(ctx)
                }
                else{
                    const s = await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏!</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                }
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data.startsWith(`exit:`)){
                
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    let price = parseInt(ctx.callbackQuery.data.split(':')[1]);
                    if(price !== -1){
                        ctx.wizard.state.exitPrice = price;
                        const s = await ctx.replyWithHTML(`‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ (–ü—Ä–∏–º–µ—Ä: —Ñ–æ—Ä–º–∞ –æ–¥–µ–∂–¥—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –º–∞—à–∏–Ω–∞–º–∏, –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ)</b>`, {reply_markup: {inline_keyboard: [[{text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', callback_data: 'nocom'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                        ctx.wizard.state.messageId = s.message_id;
                        return ctx.wizard.next();
                    }
                    else{
                        ctx.wizard.state.exitUserPrice = true;
                        const s = await ctx.replyWithHTML(`üíµ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                        ctx.wizard.state.messageId = s.message_id;
                    }
                }
            }
            else if(ctx.wizard.state.exitUserPrice){
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                await ctx.deleteMessage()
                let price = parseInt(ctx.message.text);
                if(price > 0){
                    ctx.wizard.state.exitPrice = price;
                    const s = await ctx.replyWithHTML(`‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ (–ü—Ä–∏–º–µ—Ä: —Ñ–æ—Ä–º–∞ –æ–¥–µ–∂–¥—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –º–∞—à–∏–Ω–∞–º–∏, –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ)</b>`, {reply_markup: {inline_keyboard: [[{text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', callback_data: 'nocom'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }
                else{
                    const s = await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏!</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                }
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data === `nocom`){
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    ctx.wizard.state.com = '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è';
                    const s = await last(ctx)
                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }
            }
            await ctx.deleteMessage(ctx.wizard.state.messageId)
            await ctx.deleteMessage()
            ctx.wizard.state.com = ctx.message.text;
            const s = await last(ctx)
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data === `create_anc`){
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    ctx.scene.leave();
                    const {id} = ctx.from
                    let user = await getUser(id);
                    const s = ctx.wizard.state;
                    let media = [];
                    let ph = [];
                    let vd = [];
                    if(ctx.wizard.state.photo !== undefined && ctx.wizard.state.photo?.length > 0){
                        ph = ctx.wizard.state.photo.map((fileId) => {
                        return {type: 'photo', fileId: fileId}});
                    }
                    if(ctx.wizard.state.video !== undefined && ctx.wizard.state.video?.length > 0){
                        vd = ctx.wizard.state.video.map((fileId) => {return {type: 'video', fileId: fileId}});
                    }
                    media = JSON.stringify(media.concat(ph,vd));
                    
                    let f;
                    if(s.payForm === 2){
                        f = `–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ ${s.payFormProcent}%`
                    }
                
                    let deliveryp = s.delivery.price;
                    if(s.delivery.price_with_add){
                        deliveryp = s.delivery.price_with_add
                    }
                
                    let dops = ``;
                    let price_dop = 0
                    for(const dop of s.dop){
                        dops += `\n‚Ä¢ ${dop.name} ‚Äî ${dop.price_per_unit * dop.count} —Ä—É–±. <b>${dop.count}x</b> ${dop.unit_of_measurement || ''}`
                        price_dop += dop.price_per_unit * dop.count;
                    }
                    const betont = (await query(`SELECT * FROM nc WHERE fid=?`,[s.betonType]))[0].name
                    const res = await createForm({
                        type: 1,
                        created_by: ctx.from.id,
                        date: `${s.date} | ${s.timeInterval}`,
                        place: s.place,
                        phone: s.phone,
                        betonType: betont,
                        betonAmount: toFloat(s.amount),
                        betonUserPrice: parseInt(s.userPrice),
                        betonPrice: parseInt(s.price),
                        payForm: f || payForms[s.payForm],
                        deliveryPriceWithAdd: toFloat(deliveryp),
                        deliveryPrice: toFloat(s.delivery.price),
                        deliveryAmount: toFloat(s.delivery.amount),
                        dopAll: dops,
                        dopPrice: price_dop,
                        enterPrice: s.enterPrice,
                        exitPrice: s.exitPrice,
                        com: s.com,
                        real_name: user.real_name,
                        zavod: user.zavod,
                        status: 1,
                        priv: -1,
                        media: media,
                        last_fid: -1,
                        entity: ctx.wizard.state.entity.type,
                        entity_text: ctx.wizard.state.entity.text
                    })
                    if(res){
                        ctx.replyWithHTML(`<b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º #${res}. –û–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤: "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏"</b>`)
                    
                        if(user.zavod > -1){
                            const zavod = await db.getZavod(user.zavod);
                            if(zavod && zavod.group !== -1){
                                ctx.telegram.sendMessage(zavod.group, `<b>${status[user.status]} ${user.real_name || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è`} (TG: ${ctx.from.first_name} @${ctx.from.username})

–î–µ–π—Å—Ç–≤–∏–µ:</b> —Å–æ–∑–¥–∞–ª –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫—É—é –∑–∞—è–≤–∫—É #${res}:

<b>1) ${s.date} | ${s.timeInterval}
2) ${s.place}
3) ${s.phone}
4) ${betont}
5) –ë–µ—Ç–æ–Ω ${s.amount}–º¬≥ * ${s.userPrice} (–ø—Ä–∞–π—Å ${s.price})
6) ${f || payForms[s.payForm]}
7) –¥–æ—Å—Ç–∞–≤–∫–∞: ${deliveryp} –∑–∞ ${s.delivery.amount} (–ø—Ä–∞–π—Å ${s.delivery.price})
8) –î–æ–ø—ã (${price_dop} —Ä—É–±.): ${dops}
9) –í—Ö–æ–¥ ${s.enterPrice} —Ä—É–±.
10) –í—ã—Ö–æ–¥ ${s.exitPrice} —Ä—É–±.
11) ${s.com}
12) ${(await getUser(ctx.from.id)).real_name}</b>`, {parse_mode:'HTML'})
                            }
                        }
                    }
                }
            }
        },
    );

    const search_ancet = new Scenes.WizardScene(
        `search_ancet`, 
        async (ctx) => {
        const s = await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –∑–∞—è–≤–∫–µ</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
        ctx.wizard.state.messageId = s.message_id;
        return ctx.wizard.next();
        },
        async (ctx) => {
        if(ctx.callbackQuery){
            if(ctx.callbackQuery.data === `stopscene`){
                ctx.deleteMessage();
                return await ctx.scene.leave();
            }
        }
        else{
            const id = parseInt(ctx.message.text);
            if(id > 0){
                const anc = (await query(`SELECT * FROM forms WHERE type=2 AND fid=? AND zavod=?`, [id, (await getUser(ctx.from.id)).zavod]))[0]
                if(anc){
                    ctx.replyWithHTML(`<b>–ó–∞—è–≤–∫–∞ #${anc.fid} –Ω–∞–π–¥–µ–Ω–∞</b>`, {reply_markup: {inline_keyboard: [[{text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É', callback_data: `incoming_kp_go:${id}`}]]}});
                }
                else{
                    const form = formatPhoneNumber(ctx.message.text)
                    const anc = (await query(`SELECT * FROM forms WHERE type=2 AND phone=? AND zavod=?`, [form, (await getUser(ctx.from.id)).zavod]))[0]
                    if(anc){
                        ctx.replyWithHTML(`<b>–ó–∞—è–≤–∫–∞ #${anc.fid} –Ω–∞–π–¥–µ–Ω–∞</b>`, {reply_markup: {inline_keyboard: [[{text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É', callback_data: `incoming_kp_go:${anc.fid}`}]]}});
                    }
                    else{
                        ctx.replyWithHTML(`‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ!</b>`)
                    }
                }
            }
            else{
                const form = formatPhoneNumber(ctx.message.text)
                const anc = (await query(`SELECT * FROM forms WHERE type=2 AND phone=? AND zavod=?`, [form, (await getUser(ctx.from.id)).zavod]))[0]
                if(anc){
                    ctx.replyWithHTML(`<b>–ó–∞—è–≤–∫–∞ #${anc.fid} –Ω–∞–π–¥–µ–Ω–∞</b>`, {reply_markup: {inline_keyboard: [[{text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É', callback_data: `incoming_kp_go:${anc.fid}`}]]}});
                }
                else{
                    ctx.replyWithHTML(`‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ!</b>`)
                }
            }
            return await ctx.scene.leave();
        }
        }
    );

    const booking_own_car = new Scenes.WizardScene(
        `booking_own_car`, 
        async (ctx) => {
            const but = (await query(`SELECT * FROM cars WHERE zavod=?`, [(await getUser(ctx.from.id)).zavod])).map(s => [{text: `${s.name}`, callback_data: `car:${s.fid}`}]);
            but.push([{text: '–í—ã–±—Ä–∞–ª', callback_data: 'next'}]);
            but.push([{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]);
            ctx.wizard.state.selectedCars = {};
            const s = await ctx.replyWithHTML(`<b>–í—ã–±–µ—Ä–µ—Ç–µ –º–∞—à–∏–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞</b>
<i>–ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤ –±–æ–ª—å—à–µ 1, —Ç–æ —É–∫–∞–∂–∏—Ç–µ –∏–¥ –º–∞—à–∏–Ω—ã/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤ (–ø—Ä–∏–º–µ—Ä: 3/2)</i>`, {reply_markup: {inline_keyboard: but}});
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                if (ctx.callbackQuery.data.startsWith(`car:`)) {
                    const id = ctx.callbackQuery.data.split(':')[1];
                    ctx.wizard.state.selectedCars = ctx.wizard.state.selectedCars || {};
                    ctx.wizard.state.selectedCars[id] = {count: (ctx.wizard.state.selectedCars[id]?.count || 0) + 1, name: (await query(`SELECT * FROM cars WHERE fid=?`, [id]))[0].name, id: id, driver: (await query(`SELECT * FROM cars WHERE fid=?`, [id]))[0].driver};
                    await ctx.answerCbQuery(`‚úÖ –ú–∞—à–∏–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞, ${ctx.wizard.state.selectedCars[id]} —Ä–µ–π—Å(–æ–≤)`);
                    const all_cars = await query(`SELECT * FROM cars WHERE zavod=?`, [(await getUser(ctx.from.id)).zavod]);
                    const selected = ctx.wizard.state.selectedCars;
                    const but = all_cars.map(s => {
                      const count = selected[s.fid]?.count || 0;
                      let text = `${s.name}`;
                      let but;
                      if (count > 0) {
                        text = `${s.name}`;
                        but = [{ text, callback_data: `car:${s.fid}`}, {text: `(${count} —Ä–µ–π—Å${count > 1 ? '–æ–≤' : ''})`, callback_data: `ignore`},{text: '‚úï', callback_data: `remove_car:${s.fid}`}];
                      }
                      else{
                        but = [{ text, callback_data: `car:${s.fid}`}];
                      }
                      return but;
                    });
                    but.push([{ text: '–í—ã–±—Ä–∞–ª', callback_data: 'next' }]);
                    but.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene' }]);
                    await ctx.editMessageReplyMarkup({ inline_keyboard: but });
                }
                else if(ctx.callbackQuery.data.startsWith(`remove_car:`)){
                    const id = ctx.callbackQuery.data.split(':')[1];
                    ctx.wizard.state.selectedCars = ctx.wizard.state.selectedCars || {};
                    delete ctx.wizard.state.selectedCars[id];
                    await ctx.answerCbQuery(`‚úÖ –ú–∞—à–∏–Ω–∞ —Å–±—Ä–æ—à–µ–Ω–∞`);
                    const all_cars = await query(`SELECT * FROM cars WHERE zavod=?`, [(await getUser(ctx.from.id)).zavod]);
                    const selected = ctx.wizard.state.selectedCars;
                    const but = all_cars.map(s => {
                      const count = selected[s.fid]?.count || 0;
                      let text = `${s.name}`;
                      let but;
                      if (count > 0) {
                        text = `${s.name}`;
                        but = [{ text, callback_data: `car:${s.fid}`}, {text: `(${count} —Ä–µ–π—Å${count > 1 ? '–æ–≤' : ''})`, callback_data: `ignore`}, {text: '‚úï', callback_data: `remove_car:${s.fid}`}];
                      }
                      else{
                        but = [{ text, callback_data: `car:${s.fid}`}];
                      }
                      return but;
                    });
                    but.push([{ text: '–í—ã–±—Ä–∞–ª', callback_data: 'next' }]);
                    but.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene' }]);
                    await ctx.editMessageReplyMarkup({ inline_keyboard: but });
                }
                else if(ctx.callbackQuery.data === 'next'){
            
                    for(const car of Object.values(ctx.wizard.state.selectedCars)){
                        try{
                            await db.addCarToForm(ctx.wizard.state.fid, car.id, car.name, car.count, 0)
                            await ctx.telegram.sendMessage(car.driver, `<i>–£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</i>
    
    ‚ùóÔ∏è<b>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ—Å–ª–µ –æ—Ç–ª–∏–≤–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ –ó–ê–Ø–í–ö–ò –í –†–ê–ë–û–¢–ï</b>`, {parse_mode: 'HTML'})
                            index.openAncet(ctx, ctx.wizard.state.fid, 1, car.driver)
                        }
                        catch(e){

                        }
                    }
                    await db.updateForm(ctx.wizard.state.fid, 'status', 2)
                    ctx.deleteMessage(ctx.wizard.state.messageId)
                    ctx.replyWithHTML(`<b>–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!</b>`);
                    ctx.scene.leave();
                }
                else{
                    ctx.answerCbQuery();
                }
            }
        }
    );

    const booking_own_car_carrier = new Scenes.WizardScene(
        `booking_own_car_carrier`, 
        async (ctx) => {
            const but = (await query(`SELECT * FROM cars WHERE zavod=?`, [(await getUser(ctx.from.id)).zavod])).map(s => [{text: `${s.name}`, callback_data: `car:${s.fid}`}]);
            but.push([{text: '–í—ã–±—Ä–∞–ª', callback_data: 'next'}]);
            but.push([{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]);
            ctx.wizard.state.selectedCars = {};
            const s = await ctx.replyWithHTML(`<b>–í—ã–±–µ—Ä–µ—Ç–µ –º–∞—à–∏–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞</b>
<i>–ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤ –±–æ–ª—å—à–µ 1, —Ç–æ —É–∫–∞–∂–∏—Ç–µ –∏–¥ –º–∞—à–∏–Ω—ã/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤ (–ø—Ä–∏–º–µ—Ä: 3/2)</i>`, {reply_markup: {inline_keyboard: but}});
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                if (ctx.callbackQuery.data.startsWith(`car:`)) {
                    const id = ctx.callbackQuery.data.split(':')[1];
                    ctx.wizard.state.selectedCars = ctx.wizard.state.selectedCars || {};
                    ctx.wizard.state.selectedCars[id] = {count: (ctx.wizard.state.selectedCars[id]?.count || 0) + 1, name: (await query(`SELECT * FROM cars WHERE fid=?`, [id]))[0].name, id: id, driver: (await query(`SELECT * FROM cars WHERE fid=?`, [id]))[0].driver};
                    await ctx.answerCbQuery(`‚úÖ –ú–∞—à–∏–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞, ${ctx.wizard.state.selectedCars[id]} —Ä–µ–π—Å(–æ–≤)`);
                    const all_cars = await query(`SELECT * FROM cars WHERE zavod=?`, [(await getUser(ctx.from.id)).zavod]);
                    const selected = ctx.wizard.state.selectedCars;
                    const but = all_cars.map(s => {
                      const count = selected[s.fid]?.count || 0;
                      let text = `${s.name}`;
                      let but;
                      if (count > 0) {
                        text = `${s.name}`;
                        but = [{ text, callback_data: `car:${s.fid}`}, {text: `(${count} —Ä–µ–π—Å${count > 1 ? '–æ–≤' : ''})`, callback_data: `ignore`},{text: '‚úï', callback_data: `remove_car:${s.fid}`}];
                      }
                      else{
                        but = [{ text, callback_data: `car:${s.fid}`}];
                      }
                      return but;
                    });
                    but.push([{ text: '–í—ã–±—Ä–∞–ª', callback_data: 'next' }]);
                    but.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene' }]);
                    await ctx.editMessageReplyMarkup({ inline_keyboard: but });
                }
                else if(ctx.callbackQuery.data.startsWith(`remove_car:`)){
                    const id = ctx.callbackQuery.data.split(':')[1];
                    ctx.wizard.state.selectedCars = ctx.wizard.state.selectedCars || {};
                    delete ctx.wizard.state.selectedCars[id];
                    await ctx.answerCbQuery(`‚úÖ –ú–∞—à–∏–Ω–∞ —Å–±—Ä–æ—à–µ–Ω–∞`);
                    const all_cars = await query(`SELECT * FROM cars WHERE zavod=?`, [(await getUser(ctx.from.id)).zavod]);
                    const selected = ctx.wizard.state.selectedCars;
                    const but = all_cars.map(s => {
                      const count = selected[s.fid]?.count || 0;
                      let text = `${s.name}`;
                      let but;
                      if (count > 0) {
                        text = `${s.name}`;
                        but = [{ text, callback_data: `car:${s.fid}`}, {text: `(${count} —Ä–µ–π—Å${count > 1 ? '–æ–≤' : ''})`, callback_data: `ignore`}, {text: '‚úï', callback_data: `remove_car:${s.fid}`}];
                      }
                      else{
                        but = [{ text, callback_data: `car:${s.fid}`}];
                      }
                      return but;
                    });
                    but.push([{ text: '–í—ã–±—Ä–∞–ª', callback_data: 'next' }]);
                    but.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene' }]);
                    await ctx.editMessageReplyMarkup({ inline_keyboard: but });
                }
                else if(ctx.callbackQuery.data === 'next'){
                    for(const car of Object.values(ctx.wizard.state.selectedCars)){
                        await db.addCarToForm(ctx.wizard.state.fid, car.id,car.name, car.count, 1)
                        try{
                            await ctx.telegram.sendMessage(car.driver, `<i>–£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</i>

‚ùóÔ∏è<b>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ—Å–ª–µ –æ—Ç–ª–∏–≤–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ –ó–ê–Ø–í–ö–ò –í –†–ê–ë–û–¢–ï</b>`, {parse_mode: 'HTML'})
                        }
                        catch(e){
                            
                        }
                    }
                    await db.updateForm(ctx.wizard.state.fid, 'to_carrier', (await getUser(ctx.from.id)).zavod)
                    await db.updateForm(ctx.wizard.state.fid, 'status', 2)
                    ctx.deleteMessage(ctx.wizard.state.messageId)
                    ctx.replyWithHTML(`<b>–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!</b>`);
                    ctx.scene.leave();
                }
                else{
                    ctx.answerCbQuery();
                }
            }
        }
    );

    const offer_conditions = new Scenes.WizardScene(
        `offer_conditions`, 
        async (ctx) => {
            const s = await ctx.replyWithHTML(`<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —É—Å–ª–æ–≤–∏–π –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∑–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –º–∞—à–∏–Ω—É –Ω–∞ –∑–∞—è–≤–∫—É, –ª–æ–≥–∏—Å—Ç –µ–≥–æ —É–≤–∏–¥–µ—Ç –∏ —Å–º–æ–∂–µ—Ç –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É</b>`, {reply_markup: {inline_keyboard: [[{text: '–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ –∫—É–±', callback_data: 'condition:carrier_price'}],[{text: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data: 'condition:com'}],[{text: '–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏', callback_data: 'condition:date'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === 'stopscene'){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data.startsWith('condition:')){
                    ctx.deleteMessage();
                    let text = '<b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫—É–± (–ü–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)</b>'
                    if(ctx.callbackQuery.data === 'condition:com'){
                        text = '<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>'
                    }
                    else if(ctx.callbackQuery.data === 'condition:date'){
                        text = '<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º-—á—á:–º–º (–ü—Ä–∏–º–µ—Ä: 15.06.2025 10:00-12:00)</b>'
                    }
                    const s = await ctx.replyWithHTML(text, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                    ctx.wizard.state.do = ctx.callbackQuery.data.split(':')[1];
                    return ctx.wizard.next();
                }
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === 'stopscene'){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }
            else if(ctx.message?.text){
                if(hasDangerousChars(ctx.message.text)) return;

                let edit = '';
                switch(ctx.wizard.state.do){
                    case 'carrier_price':
                        edit = '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞ –∫—É–±';
                        if(parseInt(ctx.message.text) < 1){
                            return ctx.replyWithHTML(`‚ùå <b>–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 —Ä—É–±–ª—è!</b>`)
                        }
                        break;
                    case 'com':
                        edit = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π';
                        break;
                    case 'date':
                        edit = '–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏';
                        break;
                }
                const insertId = await db.createOfferConditions(ctx.wizard.state.fid, ctx.wizard.state.do, ctx.message.text, ctx.from.id)
                const form = await db.getForm(ctx.wizard.state.fid)
                ctx.telegram.sendMessage(form.logist_id, `<b>–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ #${form.fid} ${form.betonAmount}–º¬≥ ${form.betonType}</b>
<b>–£—Å–ª–æ–≤–∏–µ: ${edit}</b>
<b>–ó–Ω–∞—á–µ–Ω–∏–µ: ${ctx.message.text}</b>`, {parse_mode: 'HTML', reply_markup: {inline_keyboard: [[{text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `accept_condition:${insertId}`},{text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_condition:${insertId}`}]]}});
                ctx.deleteMessage();
                ctx.deleteMessage(ctx.wizard.state.messageId);
                ctx.replyWithHTML(`<b>–£—Å–ª–æ–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>`)
                ctx.scene.leave();
            }
        }
    );

    const finish_form = new Scenes.WizardScene(
        `finish_form`,
        async (ctx) => {
            const s = await ctx.replyWithHTML(`<b>–£ –≤–∞—Å –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ä–µ–π—Å?</b>`, {reply_markup: {inline_keyboard: [[{text: '–ù–µ—Ç', callback_data: 'trip:1'},{text: '–î–∞', callback_data: 'trip:0'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === 'stopscene'){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data.startsWith('trip:')){
                    ctx.deleteMessage();
                    ctx.wizard.state.isLastTrip = parseInt(ctx.callbackQuery.data.split(':')[1]) === 0;
                    const s = await ctx.replyWithHTML(`<b>–ö–∞–∫–æ–π –æ–±—å–µ–º –≤—ã–≥—Ä—É–∑–∏–ª–∏? (–ü–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤ –º¬≥)</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === 'stopscene'){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }
            else if(ctx.message?.text){
                if(hasDangerousChars(ctx.message.text)) return;
                if(parseInt(ctx.message.text) < 1){
                    return ctx.replyWithHTML(`‚ùå <b>–û–±—å–µ–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 –º¬≥!</b>`)
                }
                ctx.wizard.state.betonAmount = parseInt(ctx.message.text);
                ctx.deleteMessage();
                ctx.deleteMessage(ctx.wizard.state.messageId);
                ctx.replyWithHTML(`<b>–ö–∞–∫ –≤—ã –∑–∞–±—Ä–∞–ª–∏ –¥–µ–Ω—å–≥–∏ —É –∫–ª–∏–µ–Ω—Ç–∞? –ï—Å–ª–∏ –≤—ã –±—Ä–∞–ª–∏ –Ω–∞–ª–∏—á–∫–æ–π —Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–ü–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –≤ —Ä—É–±–ª—è—Ö, –ø—Ä–∏–º–µ—Ä: 50000)</b>`, {reply_markup: {inline_keyboard: [                    
                    [{text: '–Æ—Ä. –ª–∏—Ü–æ', callback_data: 'payment:–Æ—Ä. –ª–∏—Ü–æ'}],
                    [{text: '–ü–µ—Ä–µ–≤–æ–¥', callback_data: 'payment:–ü–µ—Ä–µ–≤–æ–¥'}],
                    [{text: '–ù–µ –±—Ä–∞–ª', callback_data: 'payment:–ù–µ –±—Ä–∞–ª'}],
                    [{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                return ctx.wizard.next();

            }
        },
        async (ctx) => {

            let but;

            if((await db.findCarByDriver(ctx.from.id))?.name?.slice(0, -2).endsWith('–ê–ë–ù')){
                but = [
                    [{text: `–ë–µ—Ç–æ–Ω–æ–≥–∞—Å–∏—Ç–µ–ª—å`, callback_data: 'select:–ë–µ—Ç–æ–Ω–æ–≥–∞—Å–∏—Ç–µ–ª—å'}],
                    [{text: `–ü—Ä–æ—Å—Ç–æ–π`, callback_data: 'select:–ü—Ä–æ—Å—Ç–æ–π'}],
                    [{text: `–®–ª–∞–Ω–≥`, callback_data: 'select:–®–ª–∞–Ω–≥'}],
                    [{text: `–¢—Ä—É–±—ã`, callback_data: 'select:–¢—Ä—É–±—ã'}],
                    [{text: `–ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞`, callback_data: 'select:–ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞'}],
                    [{text: `–ó–∞–º—ã–≤–∫–∞ –≤–Ω–µ –æ–±—ä–µ–∫—Ç–∞`, callback_data: 'select:–ó–∞–º—ã–≤–∫–∞ –≤–Ω–µ –æ–±—ä–µ–∫—Ç–∞'}],
                    [{text: `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å`, callback_data: 'next'}],
                    [{text: `‚ùå –û—Ç–º–µ–Ω–∞`, callback_data: 'stopscene'}]
                ]
            }
            else{
                but = [
                    [{text: `–ü—Ä–æ—Å—Ç–æ–π`, callback_data: 'select:–ü—Ä–æ—Å—Ç–æ–π'}],
                    [{text: `–¢—Ä—É–±–∞ 6–º`, callback_data: 'select:–®–ª–∞–Ω–≥'}],
                    [{text: `–ó–∞–º—ã–≤–∫–∞ –≤–Ω–µ –æ–±—ä–µ–∫—Ç–∞`, callback_data: 'select:–ó–∞–º—ã–≤–∫–∞ –≤–Ω–µ –æ–±—ä–µ–∫—Ç–∞'}],
                    [{text: `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å`, callback_data: 'next'}],
                    [{text: `‚ùå –û—Ç–º–µ–Ω–∞`, callback_data: 'stopscene'}]
                ]
            }
            
            if(ctx.callbackQuery){  
                if(ctx.callbackQuery.data === 'stopscene'){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data.startsWith('payment:')){
                    ctx.deleteMessage();
                    ctx.wizard.state.money = {type: ctx.callbackQuery.data.split(':')[1], sum: 0};
                    const s = await ctx.replyWithHTML(`<b>–ö–∞–∫–∏–µ –¥–æ–ø. —É—Å–ª—É–≥–∏ –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã?</b>`, {reply_markup: {inline_keyboard: but}});
                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }
            }
            else if(ctx.message?.text){
                if(hasDangerousChars(ctx.message.text)) return;
                if(parseInt(ctx.message.text) < 0){
                    return ctx.replyWithHTML(`‚ùå <b>–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0 —Ä—É–±–ª–µ–π!</b>`)
                }
                ctx.wizard.state.money = {type: '–ù–∞–ª–∏—á–Ω—ã–µ', sum: parseInt(ctx.message.text)};
                ctx.deleteMessage();
                ctx.deleteMessage(ctx.wizard.state.messageId);
                const s = await ctx.replyWithHTML(`<b>–ö–∞–∫–∏–µ –¥–æ–ø. —É—Å–ª—É–≥–∏ –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã?</b>`, {reply_markup: {inline_keyboard: but}});
                ctx.wizard.state.messageId = s.message_id;
                return ctx.wizard.next();
            }
        },
        async (ctx) => {
            let but_for_keyboard;

            if((await db.findCarByDriver(ctx.from.id))?.name?.slice(0, -2).endsWith('–ê–ë–ù')){
                but_for_keyboard = [
                    `–ë–µ—Ç–æ–Ω–æ–≥–∞—Å–∏—Ç–µ–ª—å`,
                    `–ü—Ä–æ—Å—Ç–æ–π`,
                    `–®–ª–∞–Ω–≥`,
                    `–¢—Ä—É–±—ã`,
                    `–ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞`,
                    `–ó–∞–º—ã–≤–∫–∞ –≤–Ω–µ –æ–±—ä–µ–∫—Ç–∞`
                ]
            }
            else{
                but_for_keyboard = [
                    `–ü—Ä–æ—Å—Ç–æ–π`,
                    `–¢—Ä—É–±–∞ 6–º`,
                    `–ó–∞–º—ã–≤–∫–∞ –≤–Ω–µ –æ–±—ä–µ–∫—Ç–∞`,
                ]
            }
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–ø–æ–≤
            function getSelectedText(dops) {
                if (dops && dops.length > 0) {
                    return '–í—ã –≤—ã–±—Ä–∞–ª–∏:\n' + dops.map(d => `‚úÖ ${d.name} (${d.count} —à—Ç.)`).join('\n') + '\n\n';
                }
                return '';
            }
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            function getDopKeyboard(dops) {
                let but = [];
                for (const b of but_for_keyboard) {
                    if (dops && dops.find(d => d.name === b))
                        but.push([{text: '‚úÖ ' + b, callback_data: `select:${b}`}]);
                    else
                        but.push([{text: b, callback_data: `select:${b}`}]);
                }
                // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–æ–ø–æ–≤
                if (dops) {
                    for (const d of dops) {
                        if (!but_for_keyboard.includes(d.name)) {
                            but.push([{text: `‚úÖ ${d.name} (${d.count} —à—Ç.)`, callback_data: `remove_custom:${d.name}`}]);
                        }
                    }
                }
                but.push([{text: '–î—Ä—É–≥–∞—è —É—Å–ª—É–≥–∞ (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é)', callback_data: 'other_dop'}]);
                if (dops && dops.length > 0) {
                    but.push([{text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: 'next'}]);
                }
                but.push([{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]);
                return but;
            }
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === 'stopscene'){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data.startsWith('select:')){
                    ctx.deleteMessage();
                    if(!ctx.wizard.state.dop) ctx.wizard.state.dop = [];
                    const data = ctx.callbackQuery.data.split(':')[1];
                    // –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ ‚Äî —É–±–∏—Ä–∞–µ–º
                    let idx = ctx.wizard.state.dop.findIndex(d => d.name === data);
                    if(idx !== -1){
                        ctx.wizard.state.dop.splice(idx, 1);
                        const selectedText = getSelectedText(ctx.wizard.state.dop);
                        const but = getDopKeyboard(ctx.wizard.state.dop);
                        await ctx.replyWithHTML(selectedText + '<b>–ö–∞–∫–∏–µ –¥–æ–ø. —É—Å–ª—É–≥–∏ –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã? –ï—Å–ª–∏ –≤–∞—à–∏—Ö —É—Å–ª—É–≥ –Ω–µ—Ç, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º</b>', {reply_markup: {inline_keyboard: but}});
                        return;
                    }
                    ctx.wizard.state.pendingDopName = data;
                    await ctx.replyWithHTML(`–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è <b>${data}</b> (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):`, {reply_markup: {inline_keyboard: [[{text: '–û—Ç–º–µ–Ω–∞', callback_data: 'back_dop'}]]}});
                    return;
                }
                else if(ctx.callbackQuery.data.startsWith('remove_custom:')){
                    ctx.deleteMessage();
                    const name = ctx.callbackQuery.data.split(':')[1];
                    if(ctx.wizard.state.dop) ctx.wizard.state.dop = ctx.wizard.state.dop.filter(d => d.name !== name);
                    const selectedText = getSelectedText(ctx.wizard.state.dop);
                    const but = getDopKeyboard(ctx.wizard.state.dop);
                    await ctx.replyWithHTML(selectedText + '<b>–ö–∞–∫–∏–µ –¥–æ–ø. —É—Å–ª—É–≥–∏ –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã? –ï—Å–ª–∏ –≤–∞—à–∏—Ö —É—Å–ª—É–≥ –Ω–µ—Ç, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º</b>', {reply_markup: {inline_keyboard: but}});
                    return;
                }
                else if(ctx.callbackQuery.data === 'other_dop'){
                    ctx.deleteMessage();
                    ctx.wizard.state.pendingCustomDop = true;
                    await ctx.replyWithHTML('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —É—Å–ª—É–≥–∏:', {reply_markup: {inline_keyboard: [[{text: '–û—Ç–º–µ–Ω–∞', callback_data: 'back_dop'}]]}});
                    return;
                }
                else if(ctx.callbackQuery.data === 'back_dop'){
                    // –í–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–æ–ø–æ–≤
                    const selectedText = getSelectedText(ctx.wizard.state.dop);
                    const but = getDopKeyboard(ctx.wizard.state.dop);
                    await ctx.replyWithHTML(selectedText + '<b>–ö–∞–∫–∏–µ –¥–æ–ø. —É—Å–ª—É–≥–∏ –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã? –ï—Å–ª–∏ –≤–∞—à–∏—Ö —É—Å–ª—É–≥ –Ω–µ—Ç, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º</b>', {reply_markup: {inline_keyboard: but}});
                    return;
                }
                else if(ctx.callbackQuery.data === `next`){
                    ctx.deleteMessage();
                    const but = [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]];
                    but.push([{text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –¢–¢–ù', callback_data: 'nottn'}])
                    const s = await ctx.replyWithHTML(`<b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫ –∑–∞—è–≤–∫–µ —Ñ–æ—Ç–æ –¢–¢–ù</b>`, {reply_markup: {inline_keyboard: but}});
                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next()
                }
            }
            else if(ctx.wizard.state.pendingDopName && ctx.message?.text){
                // –û–∂–∏–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏
                const name = ctx.wizard.state.pendingDopName;
                const count = parseInt(ctx.message.text);
                if(isNaN(count) || count < 1 || count > 100){
                    await ctx.replyWithHTML(`‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100`);
                    return;
                }
                if(!ctx.wizard.state.dop) ctx.wizard.state.dop = [];
                let existing = ctx.wizard.state.dop.find(d => d.name === name);
                if(existing){
                    existing.count += count;
                } else {
                    ctx.wizard.state.dop.push({name, count});
                }
                delete ctx.wizard.state.pendingDopName;
                const selectedText = getSelectedText(ctx.wizard.state.dop);
                const but = getDopKeyboard(ctx.wizard.state.dop);
                await ctx.replyWithHTML(selectedText + '<b>–ö–∞–∫–∏–µ –¥–æ–ø. —É—Å–ª—É–≥–∏ –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã? –ï—Å–ª–∏ –≤–∞—à–∏—Ö —É—Å–ª—É–≥ –Ω–µ—Ç, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º</b>', {reply_markup: {inline_keyboard: but}});
                return;
            }
            else if(ctx.wizard.state.pendingCustomDop && ctx.message?.text){
                // –û–∂–∏–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
                ctx.wizard.state.customDopName = ctx.message.text;
                delete ctx.wizard.state.pendingCustomDop;
                await ctx.replyWithHTML(`–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è <b>${ctx.wizard.state.customDopName}</b> (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):`, {reply_markup: {inline_keyboard: [[{text: '–û—Ç–º–µ–Ω–∞', callback_data: 'back_dop'}]]}});
                return;
            }
            else if(ctx.wizard.state.customDopName && ctx.message?.text){
                // –û–∂–∏–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–≤–æ–µ–π —É—Å–ª—É–≥–∏
                const name = ctx.wizard.state.customDopName;
                const count = parseInt(ctx.message.text);
                if(isNaN(count) || count < 1 || count > 500){
                    await ctx.replyWithHTML(`‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100`);
                    return;
                }
                if(!ctx.wizard.state.dop) ctx.wizard.state.dop = [];
                let existing = ctx.wizard.state.dop.find(d => d.name === name);
                if(existing){
                    existing.count += count;
                } else {
                    ctx.wizard.state.dop.push({name, count});
                }
                delete ctx.wizard.state.customDopName;
                const selectedText = getSelectedText(ctx.wizard.state.dop);
                const but = getDopKeyboard(ctx.wizard.state.dop);
                await ctx.replyWithHTML(selectedText + '<b>–ö–∞–∫–∏–µ –¥–æ–ø. —É—Å–ª—É–≥–∏ –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã? –ï—Å–ª–∏ –≤–∞—à–∏—Ö —É—Å–ª—É–≥ –Ω–µ—Ç, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º</b>', {reply_markup: {inline_keyboard: but}});
                return;
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data === `nottn`){
                    ctx.deleteMessage();
                    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É all_dops –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    let all_dops = '';
                    if(ctx.wizard.state.dop && ctx.wizard.state.dop.length > 0){
                        all_dops = ctx.wizard.state.dop.map(d => `${d.name} x${d.count}`).join('\n');
                    }
                    for(const dop in ctx.wizard.state.dop_edit){
                        all_dops += dop + '\n'
                    }
                    await db.addDriverFinishForm({
                        form_id: ctx.wizard.state.form_id,
                        created_by: ctx.from.id,
                        amount: ctx.wizard.state.betonAmount,
                        money_get: ctx.wizard.state.money.sum,
                        money_type: ctx.wizard.state.money.type,
                        dops: all_dops,
                        ttn: '-',
                        carname: (await db.getCarByDriver(ctx.from.id)).name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–∞—à–∏–Ω–∞'
                    })

                    if(ctx.wizard.state.isLastTrip) {
                        await db.updateForm(ctx.wizard.state.form_id, `status`, 3)
                        const user = await db.getUser(ctx.from.id);
                        if(user.zavod > -1){
                            const zavod = await db.getZavod(user.zavod);
                            if(zavod && zavod.group !== -1 && zavod.group !== null){
                                ctx.telegram.sendMessage(zavod.group, `<b>${status[user.status]} ${user.real_name || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è`} (TG: ${ctx.from.first_name} @${ctx.from.username})

–î–µ–π—Å—Ç–≤–∏–µ:</b> –°–¥–µ–ª–∞–ª –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ä–µ–π—Å –Ω–∞ –∑–∞—è–≤–∫—É #${ctx.wizard.state.form_id} –Ω–∞ –º–∞—à–∏–Ω–∞ ${(await db.getCarByDriver(ctx.from.id)).name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–∞—à–∏–Ω–∞'}`, {parse_mode:'HTML'})
                            }
                        }
                    }
                    ctx.replyWithHTML(`–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞—è–≤–∫–µ! –û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏—Ö –∏–ª–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–º–æ–∏ –∑–∞—è–≤–∫–∏" ‚Äì> "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ"`)
                    return ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data === `stop`){
                    ctx.deleteMessage();

                    let media = [];
                    let ph = [];
                    let vd = [];
                    if(ctx.wizard.state.photo !== undefined && ctx.wizard.state.photo?.length > 0){
                        ph = ctx.wizard.state.photo.map((fileId) => {
                        return {type: 'photo', fileId: fileId}});
                    }
                    if(ctx.wizard.state.video !== undefined && ctx.wizard.state.video?.length > 0){
                        vd = ctx.wizard.state.video.map((fileId) => {return {type: 'video', fileId: fileId}});
                    }
                    media = JSON.stringify(media.concat(ph,vd));

                    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É all_dops –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    let all_dops = '';
                    if(ctx.wizard.state.dop && ctx.wizard.state.dop.length > 0){
                        all_dops = ctx.wizard.state.dop.map(d => `${d.name} x${d.count}`).join('\n');
                    }
                    for(const dop in ctx.wizard.state.dop_edit){
                        all_dops += dop + '\n'
                    }
                    await db.addDriverFinishForm({
                        form_id: ctx.wizard.state.form_id,
                        created_by: ctx.from.id,
                        amount: ctx.wizard.state.betonAmount,
                        money_get: ctx.wizard.state.money.sum,
                        money_type: ctx.wizard.state.money.type,
                        dops: all_dops,
                        ttn: media,
                        carname: (await db.getCarByDriver(ctx.from.id)).name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–∞—à–∏–Ω–∞'
                    })

                    if(ctx.wizard.state.isLastTrip) {
                        await db.updateForm(ctx.wizard.state.form_id, `status`, 3)
                        const user = await db.getUser(ctx.from.id);
                        if(user.zavod > -1){
                            const zavod = await db.getZavod(user.zavod);
                            if(zavod && zavod.group !== -1 && zavod.group !== null){
                                ctx.telegram.sendMessage(zavod.group, `<b>${status[user.status]} ${user.real_name || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è`} (TG: ${ctx.from.first_name} @${ctx.from.username})

–î–µ–π—Å—Ç–≤–∏–µ:</b> –°–¥–µ–ª–∞–ª –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ä–µ–π—Å –Ω–∞ –∑–∞—è–≤–∫—É #${ctx.wizard.state.form_id} –Ω–∞ –º–∞—à–∏–Ω–∞ ${(await db.getCarByDriver(ctx.from.id)).name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–∞—à–∏–Ω–∞'}`, {parse_mode:'HTML'})
                            }
                        }
                    }
                    ctx.replyWithHTML(`–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞—è–≤–∫–µ! 
–û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏—Ö  –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ "–º–æ–∏ –∑–∞—è–≤–∫–∏ " ‚Äî "–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ"  –∏–ª–∏ –ø—Ä–∏–≤—è–∂–∏—Ç–µ—Å—å –∫ –Ω–µ–π
–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–º–æ–∏ –∑–∞—è–≤–∫–∏" ‚Äì> "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ"`)
                    return ctx.scene.leave();
                }
            }
            else if(ctx.message?.photo){
                if(!ctx.wizard.state.photo) ctx.wizard.state.photo = [];
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                await ctx.deleteMessage()
                ctx.wizard.state.photo.push(ctx.message.photo[ctx.message.photo.length - 1].file_id);
                const s = await ctx.replyWithHTML(`üì∑ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ!</b>`, {reply_markup: {inline_keyboard: [[{text: '–ó–∞–∫–æ–Ω—á–∏—Ç—å', callback_data: 'stop'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                ctx.wizard.state.messageId = s.message_id;
            }
            else if(ctx.message?.video){
                if(!ctx.wizard.state.video) ctx.wizard.state.video = [];
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                await ctx.deleteMessage()
                ctx.wizard.state.video.push(ctx.message.video.file_id);
                const s = await ctx.replyWithHTML(`üì∑ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ!</b>`, {reply_markup: {inline_keyboard: [[{text: '–ó–∞–∫–æ–Ω—á–∏—Ç—å', callback_data: 'stop'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                ctx.wizard.state.messageId = s.message_id;
            }
            else{
                await ctx.deleteMessage(ctx.wizard.state.messageId)
                await ctx.deleteMessage()
                const s = await ctx.replyWithHTML(`‚ùå <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ!</b>`, {reply_markup: {inline_keyboard: [[{text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ç—Ç–Ω', callback_data: 'nottn'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                ctx.wizard.state.messageId = s.message_id;
                return
            }
        }
    );

    const create_group = new Scenes.WizardScene(
        'create_group',
        async (ctx) => {
            const s = await ctx.reply('üìå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:\n1. –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É –≤ Telegram (–ò–ª–∏ –≤–æ–∑—å–º–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é)\n2. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –Ω–µ—ë –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —á–∞—Ç ID —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.');
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            console.log(ctx.message)
            let chatId = Number(ctx.message?.text);
            if(isNaN(chatId)){return await ctx.reply('‚ùå –≠—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–∞/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞. –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É —Å–Ω–∞—á–∞–ª–∞.');}

            const botMember = await ctx.telegram.getChatMember(chatId, ctx.botInfo.id);
            if (!['administrator', 'creator'].includes(botMember.status)) {
                await ctx.reply('‚ùå –Ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ!');
                return ctx.scene.leave();
            }

            await db.updateZavod((await db.getUser(ctx.from.id)).zavod, 'group', chatId)
            await ctx.replyWithHTML(`<b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≥—Ä—É–ø–ø–∞\n–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–æ–≥–∏ –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É.</b>`);
            return ctx.scene.leave();
        }
      );



    const attachToForm = createErrorHandledScene(
        `attachToForm`,
        async (ctx) => {
            const s = await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∫ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å—Å—è</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === 'stopscene'){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }
            else if(ctx.message?.text){
                try{
                    const form = await db.getForm(Number(ctx.message.text) > 0 ? Number(ctx.message.text) : -1);
                    if(form){
                        const car = await db.getCarByDriver(ctx.from.id);
                        if(car){
                            ctx.scene.leave()
                            await db.addCarToForm(form.fid, car.fid, car.name, 1, 0);
                            ctx.replyWithHTML(`<b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∑–∞—è–≤–∫–µ!</b>`)
                            index.openAncet(ctx, form.fid, 1)
                            const user = await db.getUser(ctx.from.id)

                            if(form.status === 1){
                                db.updateForm(form.fid, '`status`', 2)
                            }

                            if(form.logist_id !== -1){
                                ctx.telegram.sendMessage(form.logist_id, `<b>${status[user?.status || 3]} ${user?.real_name || `–∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ`} –º–∞—à–∏–Ω—ã ${car?.name || `–º–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`} –ø—Ä–∏–≤—è–∑–∞–ª—Å—è –∫ –∑–∞—è–≤–∫–µ #${form.fid}
–ó–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "—Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"</b>`, {parse_mode: 'HTML'})
                            }
                        }
                        else{
                            await ctx.replyWithHTML(`<b>–í–∞—à–∞ –º–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –û—à–∏–±–∫–∞.</b>`);
                            return ctx.scene.leave()
                        }
                    }
                    else{
                        const s = await ctx.replyWithHTML(`<b>–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                        ctx.wizard.state.messageId = s.message_id;
                    }
                }
                catch(er){
                    console.log(er)
                    const s = await ctx.replyWithHTML(`<b>–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                }
            }
        },
    )

    const create_pickup_form = new Scenes.WizardScene(
        `create_pickup_form`,
        async (ctx) => {
            const calendarKeyboard = calendar.getCalendar(new Date())
            const cancelButton = Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene');
            const s = await ctx.replyWithHTML(`üìÜ <b>–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–µ—Ç–æ–Ω</b>`, { reply_markup: { inline_keyboard: [
                        ...calendarKeyboard.reply_markup.inline_keyboard,
                        [cancelButton]
                    ]
                }});
            ctx.wizard.state.messageId = s.message_id;
            const now = new Date();
            ctx.wizard.state.calendarMessageId = s.message_id;
            ctx.wizard.state.currentMonth = now.getMonth();
            ctx.wizard.state.currentYear = now.getFullYear();
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }

                if (ctx.callbackQuery.data.startsWith('calendar-telegram-prev')) {
                    const { currentMonth, currentYear } = ctx.wizard.state;
                    const prevMonth = currentMonth === 0 ? 11 : currentMonth - 1;
                    const prevYear = currentMonth === 0 ? currentYear - 1 : currentYear;

                    ctx.wizard.state.currentMonth = prevMonth;
                    ctx.wizard.state.currentYear = prevYear;

                    const newDate = new Date(prevYear, prevMonth, 1);
                    const newCalendar = calendar.getCalendar(newDate);

                    await ctx.editMessageReplyMarkup({
                        inline_keyboard: [
                            ...newCalendar.reply_markup.inline_keyboard,
                            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')]
                        ]
                    });
                    return;
                }

                if (ctx.callbackQuery.data.startsWith('calendar-telegram-next')) {
                    const { currentMonth, currentYear } = ctx.wizard.state;
                    const nextMonth = currentMonth === 11 ? 0 : currentMonth + 1;
                    const nextYear = currentMonth === 11 ? currentYear + 1 : currentYear;

                    ctx.wizard.state.currentMonth = nextMonth;
                    ctx.wizard.state.currentYear = nextYear;

                    const newDate = new Date(nextYear, nextMonth, 1);
                    const newCalendar = calendar.getCalendar(newDate);

                    await ctx.editMessageReplyMarkup({
                        inline_keyboard: [
                            ...newCalendar.reply_markup.inline_keyboard,
                            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')]
                        ]
                    });
                    return;
                }

                else if (ctx.callbackQuery.data.startsWith('calendar-telegram-ignore')) {
                    return ctx.answerCbQuery();
                }
                else if (ctx.callbackQuery.data.startsWith('calendar-telegram')) {
                    const dateStr = ctx.callbackQuery.data.replace('calendar-telegram-date-', '');
                    const [year, month, day] = dateStr.split('-').map(Number);
                    const date = new Date(year, month - 1, day);
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    ctx.wizard.state.date = date.toLocaleDateString('ru-RU');


                    const timeKeyboard = Markup.inlineKeyboard([
                        [
                            Markup.button.callback('üåÖ –£—Ç—Ä–æ (8:00-11:00)', 'interval_8_11'),
                            Markup.button.callback('üåá –î–µ–Ω—å (13:00-16:00)', 'interval_13_16')
                        ],
                        [Markup.button.callback('‚è± –í—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é', 'manual_time')],
                        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')]
                    ]);


                    const s = await ctx.replyWithHTML(`‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏ (–æ—Ç 7:00 –¥–æ 18:00):</b>`,
                        timeKeyboard);
                    ctx.wizard.state.messageId = s.message_id;
                    ctx.wizard.state.timeSelectionStage = 'start';
                    return ctx.wizard.next();
                }
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }

                if (ctx.callbackQuery.data.startsWith('interval_')) {
                    const [start, end] = ctx.callbackQuery.data.replace('interval_', '').split('_').map(Number);
                    ctx.wizard.state.timeInterval = `${start}:00 - ${end}:00`;
                    ctx.wizard.state.startHour = start;
                    ctx.wizard.state.endHour = end;

                    await ctx.deleteMessage(ctx.wizard.state.messageId);
                    const allBeton = await query(`SELECT * FROM nc WHERE zavod=? AND \`key\`=?`, [(await getUser(ctx.from.id)).zavod, `Beton`])
                    const betonBut = allBeton.map(b =>
                        [{text: `${b.name} (${b.price_per_unit} —Ä—É–±/–º¬≥)`, callback_data:`type_${b.fid}`}]
                    );
                    betonBut.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene' }])
                    const s = await ctx.replyWithHTML(`üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –º–∞—Ä–∫—É –±–µ—Ç–æ–Ω–∞:</b>`,
                        {
                            reply_markup: {
                                inline_keyboard: betonBut
                            }
                        }
                    );

                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }

                if (ctx.callbackQuery.data === 'manual_time') {
                    const hours = Array.from({length: 12}, (_, i) => i + 7);
                    const timeButtons = hours.map(h =>
                        Markup.button.callback(`${h}:00`, `time_${h}`)
                    );

                    await ctx.editMessageText(
                        `‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (7:00-18:00):</b>`,
                        { parse_mode: 'HTML',
                            reply_markup: {
                                inline_keyboard: [
                                    ...chunkArray(timeButtons, 4),
                                    [
                                        Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'time_back'),
                                        Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')
                                    ]
                                ]
                            }
                        }
                    );

                    ctx.wizard.state.timeSelectionStage = 'start';
                    return;
                }

                if (ctx.callbackQuery.data.startsWith('time_')) {
                    const selectedHour = parseInt(ctx.callbackQuery.data.replace('time_', ''));

                    if (ctx.wizard.state.timeSelectionStage === 'start') {
                        ctx.wizard.state.startHour = selectedHour;
                        ctx.wizard.state.timeSelectionStage = 'end';

                        const minEnd = selectedHour + 1;
                        const maxEnd = Math.min(selectedHour + 3, 18);
                        const endHours = Array.from({length: maxEnd - minEnd + 1}, (_, i) => minEnd + i);

                        const endButtons = endHours.map(h =>
                            Markup.button.callback(`${h}:00`, `time_${h}`)
                        );

                        await ctx.editMessageText(
                            `‚è∞ –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—á–∞–ª–æ –≤ ${selectedHour}:00\n` +
                            `<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è (–¥–æ ${maxEnd}:00):</b>`,
                            { parse_mode: 'HTML',
                                reply_markup: {
                                    inline_keyboard: [
                                        ...chunkArray(endButtons, 3),
                                        [
                                            Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'time_back'),
                                            Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')
                                        ]
                                    ]
                                }
                            }
                        );
                    } else if (ctx.wizard.state.timeSelectionStage === 'end') {
                        const startHour = ctx.wizard.state.startHour;
                        const endHour = selectedHour;

                        if (endHour <= startHour || endHour > startHour + 3) {
                            await ctx.answerCbQuery('‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 3 —á–∞—Å–æ–≤');
                            return;
                        }

                        ctx.wizard.state.endHour = endHour;
                        ctx.wizard.state.timeInterval = `${startHour}:00 - ${endHour}:00`;

                        await ctx.deleteMessage(ctx.wizard.state.messageId);
                        const allBeton = await query(`SELECT * FROM nc WHERE zavod=? AND \`key\`=?`, [(await getUser(ctx.from.id)).zavod, `Beton`])
                        const betonBut = allBeton.map(b =>
                            [{text: `${b.name} (${b.price_per_unit} —Ä—É–±/–º¬≥)`, callback_data:`type_${b.fid}`}]
                        );
                        betonBut.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene' }])
                        const s = await ctx.replyWithHTML(`üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –º–∞—Ä–∫—É –±–µ—Ç–æ–Ω–∞:</b>`,
                            {
                                reply_markup: {
                                    inline_keyboard: betonBut
                                }
                            }
                        );

                        ctx.wizard.state.messageId = s.message_id;
                        return ctx.wizard.next();
                    }
                }

                if (ctx.callbackQuery.data === 'time_back') {
                    const timeKeyboard = Markup.inlineKeyboard([
                        [
                            Markup.button.callback('üåÖ –£—Ç—Ä–æ (8:00-11:00)', 'interval_8_11'),
                            Markup.button.callback('üåá –î–µ–Ω—å (13:00-16:00)', 'interval_13_16')
                        ],
                        [Markup.button.callback('‚è± –í—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é', 'manual_time')],
                        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'stopscene')]
                    ]);

                    await ctx.editMessageText(
                        `‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏:</b>`,
                        {parse_mode: 'HTML',
                            ...timeKeyboard}
                    );

                    delete ctx.wizard.state.timeSelectionStage;
                }
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data.startsWith(`type_`)){
                    await ctx.deleteMessage(ctx.wizard.state.messageId)
                    ctx.wizard.state.betonType = parseInt(ctx.callbackQuery.data.split('_')[1]);
                    const s = await ctx.replyWithHTML(`‚öñÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ –æ–±—ä–µ–º/—Ü–µ–Ω—É –∑–∞ –∫—É–±–æ–º–µ—Ç—Ä —Å–æ —Å–∫–∏–¥–∫–æ–π 
‚ùóÔ∏è–ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø–æ –ø—Ä–∞–π—Å—É, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–º‚ùóÔ∏è
–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–º–∏ –º–∞—Ä–∫–∞: ${await db.getBetonName(ctx.wizard.state.betonType)}

(–ü—Ä–∏–º–µ—Ä 10/7000)</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }
            await ctx.deleteMessage(ctx.wizard.state.messageId)
            await ctx.deleteMessage();
            const input = ctx.message.text.split('/');
            const price = await query(`SELECT * FROM nc WHERE fid=?`, [ctx.wizard.state.betonType]);
            if(input.length === 2 && !isNaN(input[0]) && !isNaN(input[1])){
                ctx.wizard.state.amount = input[0];
                ctx.wizard.state.userPrice = input[1];
                ctx.wizard.state.price = price[0].price_per_unit;
            }
            else{
                
                if(price.length > 0){
                    ctx.wizard.state.amount = ctx.message.text;
                    ctx.wizard.state.price = price[0].price_per_unit;
                    ctx.wizard.state.userPrice = price[0].price_per_unit;
                }
                else{
                    const s = await ctx.replyWithHTML(`‚ùå <b>–¶–µ–Ω–∞ –∑–∞ –∫—É–±–æ–º–µ—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é. –£–∫–∞–∂–∏—Ç–µ –æ–±—ä–µ–º/—Ü–µ–Ω—É –∑–∞ –∫—É–±–æ–º–µ—Ç—Ä (–ü—Ä–∏–º–µ—Ä: 10/7000)</b>`);
                    ctx.wizard.state.messageId = s.message_id;
                    return;
                }
            }
            const s = await ctx.replyWithHTML(`üë§ <b>–£–∫–∞–∂–∏—Ç–µ —Ñ–∏–∑/—é—Ä –ª–∏—Ü–æ –∑–∞—è–≤–∫–∏</b>`, {reply_markup: {inline_keyboard: [[{text: '–§–∏–∑. –ª–∏—Ü–æ', callback_data: 'entity:0'}],[{text: '–Æ—Ä. –ª–∏—Ü–æ', callback_data: 'entity:1'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data.startsWith(`entity:`)){
                    await ctx.deleteMessage();
                    ctx.wizard.state.entity = {type: parseInt(ctx.callbackQuery.data.split(':')[1])};
                    const s = await ctx.replyWithHTML(`üë§ <b>–ï—Å–ª–∏ —Ñ–∏–∑ –ª–∏—Ü–æ, –≤–ø–∏—à–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞, –ø—Ä–∏ —é—Ä. –ª–∏—Ü–µ –≤–ø–∏—Å—ã–≤–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                    return ctx.wizard.next();
                }
            }
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }
            await ctx.deleteMessage(ctx.wizard.state.messageId)
            await ctx.deleteMessage();
            ctx.wizard.state.entity.text = ctx.message.text
            const s = await ctx.replyWithHTML(`<b>–î–∞—Ç–∞: ${ctx.wizard.state.date} | ${ctx.wizard.state.timeInterval}
–û–±—å–µ–º: ${ctx.wizard.state.amount} –º¬≥
–ú–∞—Ä–∫–∞: ${(await query(`SELECT * FROM nc WHERE fid=?`,[ctx.wizard.state.betonType]))[0].name}
–¶–µ–Ω–∞: ${ctx.wizard.state.userPrice} —Ä—É–±/–º¬≥
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${ctx.wizard.state.amount * ctx.wizard.state.userPrice} —Ä—É–±</b>
${entity[ctx.wizard.state.entity.type]}: ${ctx.message.text}`, {reply_markup: {inline_keyboard: [[{text: '–°–æ–∑–¥–∞—Ç—å', callback_data: 'create'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === `stopscene`){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
                else if(ctx.callbackQuery.data === `create`){
                    await ctx.deleteMessage()
                    ctx.scene.leave();
                    const s = ctx.wizard.state
                    const user = await db.getUser(ctx.from.id)
                    const betont = (await query(`SELECT * FROM nc WHERE fid=?`,[s.betonType]))[0].name
                    const res = await createForm({
                        type: 3,
                        created_by: ctx.from.id,
                        date: `${s.date} | ${s.timeInterval}`,
                        betonType: betont,
                        betonAmount: parseInt(s.amount),
                        betonUserPrice: parseInt(s.userPrice),
                        betonPrice: parseInt(s.price),
                        zavod: -2,
                        status: 5,
                        entity: s.entity.type,
                        entity_text: s.entity.text,
                        pickup: user.zavod,
                        isPickup: 1
                    })
                    if(res){
                        ctx.replyWithHTML(`<b>–°–∞–º–æ–≤—ã–≤–æ–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º #${res}. –û–Ω –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤: "üöõ –°–∞–º–æ–≤—ã–≤–æ–∑"</b>`)
                    
                        const user = await db.getUser(ctx.from.id);
                        if(user.zavod > -1){
                            const zavod = await db.getZavod(user.zavod);
                            if(zavod && zavod.group !== -1){
                                ctx.telegram.sendMessage(zavod.group, `<b>${status[user.status]} ${user.real_name || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è`} (TG: ${ctx.from.first_name} @${ctx.from.username})
    
–î–µ–π—Å—Ç–≤–∏–µ:</b> –°–æ–∑–¥–∞–ª —Å–∞–º–æ–≤—ã–≤–æ–∑ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º #${ctx.wizard.state.fid}, –¥–∞—Ç–∞: ${s.date} | ${s.timeInterval}, –æ–±—å–µ–º: ${s.amount} –º¬≥ ${betont}`, {parse_mode:'HTML'})
                            }
                        }
                    }
                }
            }
        }
    )

    const get_ttn_by_form = new Scenes.WizardScene(
        `get_ttn_by_form`,
        async (ctx) => {
            const s = await ctx.replyWithHTML(`<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∫ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å—Å—è</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
            ctx.wizard.state.messageId = s.message_id;
            return ctx.wizard.next();
        },
        async (ctx) => {
            if(ctx.callbackQuery){
                if(ctx.callbackQuery.data === 'stopscene'){
                    ctx.deleteMessage();
                    return await ctx.scene.leave();
                }
            }
            else if(ctx.message?.text){
                try{
                    const form = await db.getForm(parseInt(ctx.message.text));
                    if(form){
                        ctx.deleteMessage();
                        ctx.deleteMessage(ctx.wizard.state.messageId);
                        ctx.scene.leave();
                        const driver_forms = await db.getDriverFormsByFormId(form.fid);
                        let mediaArray = []
                        for(const driver_form of driver_forms){
                            mediaArray = [...mediaArray, ...(driver_form.ttn !== '-' ? JSON.parse(driver_form.ttn) : [])]
                        }

                        try {
                            if (mediaArray.length === 0) {
                                return ctx.reply('‚ùå –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.', {show_alert: true});
                            }
                            const mediaGroup = mediaArray.map(item => ({
                                type: item.type,
                                media: item.fileId
                            }));
                
                            await ctx.replyWithMediaGroup(mediaGroup);
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤:', error);
                            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤.');
                        }
                    }
                    else{
                        const s = await ctx.replyWithHTML(`<b>–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                        ctx.wizard.state.messageId = s.message_id;
                    }
                }
                catch(er){
                    console.log(er)
                    const s = await ctx.replyWithHTML(`<b>–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.</b>`, {reply_markup: {inline_keyboard: [[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
                    ctx.wizard.state.messageId = s.message_id;
                }
            }
        },
    )

    return [create_group,enter_name,enter_company, create_zavod, create_pickup_form,create_ancet, search_by_id, search_by_phone, load_nc, driver_registration,worker_registration, add_car, manager_create, editmedia_form, edit_form, manager_shet,  search_ancet, booking_own_car, add_car_carrier, booking_own_car_carrier, offer_conditions, finish_form, attachToForm, get_ttn_by_form];
};

async function resultPrice(ctx) {
    let betonPrice = ctx.wizard.state.amount * ctx.wizard.state.price;
    const {price, amount, price_with_add} = ctx.wizard.state.delivery
    let deliveryPrice = 0;
    deliveryPrice = price * amount;

    let dops = ``;
    let price_dop = 0
    if(ctx.wizard.state.dop && ctx.wizard.state.dop.length > 0){
        if(!ctx.wizard.state.dop) {ctx.wizard.state.dop = []}
    for(const dop of ctx.wizard.state.dop){
        dops += `\n‚Ä¢ ${dop.name} ‚Äî <b>${dop.count}</b> ${dop.unit_of_measurement || ''}`
        price_dop += dop.price_per_unit * dop.count;
    }
    }

    let enterPrice = betonPrice + deliveryPrice + price_dop;

    const s = await ctx.replyWithHTML(`<b>–û–±—â–∞—è —Ü–µ–Ω–∞ –∑–∞ –±–µ—Ç–æ–Ω: ${betonPrice} —Ä—É–±.
–û–±—â–∞—è —Ü–µ–Ω–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É: ${deliveryPrice} —Ä—É–±.
–î–æ–ø—ã: ${dops}

–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ø–æ–≤: ${price_dop} —Ä—É–±.
        
üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞: ${enterPrice} —Ä—É–±.</b>`, {reply_markup: {inline_keyboard: [[{text: '–í–µ—Ä–Ω–æ', callback_data: `enter:${enterPrice}`}],[{text: '–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é', callback_data: `enter:-1`}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
    ctx.wizard.state.messageId = s.message_id;
    return ctx.wizard.next();
}
async function exitPrice(ctx) {
       let betonPrice = ctx.wizard.state.amount * ctx.wizard.state.userPrice;
    const {price, amount, price_with_add} = ctx.wizard.state.delivery
    let deliveryPrice = 0;
    if(price_with_add !== null){
        deliveryPrice = price_with_add*amount
    }
    else{
    deliveryPrice = price * amount;
    }

    let dops = ``;
    let price_dop = 0
    if(!ctx.wizard.state.dop) {ctx.wizard.state.dop = []}
    for(const dop of ctx.wizard.state.dop){
        dops += `\n‚Ä¢ ${dop.name} ‚Äî <b>${dop.count}</b> ${dop.unit_of_measurement || ''}`
        price_dop += dop.price_per_unit * dop.count;
    }

    let enterPrice = betonPrice + deliveryPrice + price_dop;

    const s = await ctx.replyWithHTML(`<b>–û–±—â–∞—è —Ü–µ–Ω–∞ –∑–∞ –±–µ—Ç–æ–Ω: ${betonPrice} —Ä—É–±.
–û–±—â–∞—è —Ü–µ–Ω–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É: ${deliveryPrice} —Ä—É–±.
–î–æ–ø—ã: ${dops}

–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ø–æ–≤: ${price_dop} —Ä—É–±.
      
üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞: ${ctx.wizard.state.enterPrice} —Ä—É–±.
üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∞: ${enterPrice} —Ä—É–±.</b>`, {reply_markup: {inline_keyboard: [[{text: '–í–µ—Ä–Ω–æ', callback_data: `exit:${enterPrice}`}],[{text: '–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é', callback_data: `exit:-1`}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
    ctx.wizard.state.messageId = s.message_id;
    return ctx.wizard.next();
}
async function last(ctx) {
    const st = ctx.wizard.state
    let deliveryp = st.delivery.price;
    if(st.delivery.price_with_add){
        deliveryp = st.delivery.price_with_add
    }

    let dops = ``;
    let price_dop = 0
    for(const dop of st.dop){
        dops += `\n‚Ä¢ ${dop.name} ‚Äî <b>${dop.count}</b> ${dop.unit_of_measurement || ''}`
        price_dop += dop.price_per_unit * dop.count;
    }
    let f;
    if(st.payForm === 2){
        f = `–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ ${st.payFormProcent}%`
    }

    const beton = (await query(`SELECT * FROM nc WHERE fid=?`,[st.betonType]))[0].name
    const s = await ctx.replyWithHTML(`üìã <b>–ó–∞—è–≤–∫–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞!

1) ${st.date} | ${st.timeInterval}
2) ${st.place}
3) ${st.phone}
4) ${beton}
5) –ë–µ—Ç–æ–Ω ${st.amount}–º¬≥ * ${st.userPrice} (–ø—Ä–∞–π—Å ${st.price})
6) ${f || payForms[st.payForm]}
7) –¥–æ—Å—Ç–∞–≤–∫–∞: ${deliveryp} –∑–∞ ${st.delivery.amount} (–ø—Ä–∞–π—Å ${st.delivery.price})
8) –î–æ–ø—ã (${price_dop} —Ä—É–±.): ${dops}
9) –í—Ö–æ–¥ ${st.enterPrice} —Ä—É–±.
10) –í—ã—Ö–æ–¥ ${st.exitPrice} —Ä—É–±.
11) ${st.com}
12) ${(await getUser(ctx.from.id)).real_name}</b>`, {reply_markup: {inline_keyboard: [[{text: '‚úÖ –°–æ–∑–¥–∞—Ç—å', callback_data: 'create_anc'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
    return s;
}
async function last_calc(ctx) {
    const st = ctx.wizard.state
    const an = ctx.wizard.state.an
    let deliveryp = st.delivery.price;
    if(st.delivery.price_with_add){
        deliveryp = st.delivery.price_with_add
    }

    let dops = ``;
    let price_dop = 0
    for(const dop of st.dop){
        dops += `\n‚Ä¢ ${dop.name} - ${dop.price_per_unit} —Ä—É–±.`
        price_dop += dop.price_per_unit;
    }
    let f;
    if(st.payForm === 2){
        f = `–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ ${st.payFormProcent}%`
    }

    const beton = (await query(`SELECT * FROM nc WHERE fid=?`,[st.betonType]))[0].name
    const s = await ctx.replyWithHTML(`üìã <b>–ó–∞—è–≤–∫–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞!

1) ${an.date}
2) ${an.place}
3) ${an.phone}
4) ${beton}
5) –ë–µ—Ç–æ–Ω ${st.amount}–º¬≥ * ${st.userPrice} (–ø—Ä–∞–π—Å ${st.price})
6) ${f || payForms[st.payForm]}
7) –¥–æ—Å—Ç–∞–≤–∫–∞: ${deliveryp} –∑–∞ ${st.delivery.amount} (–ø—Ä–∞–π—Å ${st.delivery.price})
8) –î–æ–ø—ã (${price_dop} —Ä—É–±.): ${dops}
9) –í—Ö–æ–¥ ${st.enterPrice} —Ä—É–±.
10) –í—ã—Ö–æ–¥ ${st.exitPrice} —Ä—É–±.
11) ${an.com}
12) ${(await getUser(ctx.from.id)).real_name}</b>`, {reply_markup: {inline_keyboard: [[{text: '‚úÖ –°–æ–∑–¥–∞—Ç—å', callback_data: 'create_anc'}],[{text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'stopscene'}]]}});
    return s;
}