const models = require('./models');
const index = require('../index');
const db = require('../database');
const {status} = require(`../data`)

module.exports = (bot) => {
    bot.hears(`üìã –ù–µ–æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ (–°–æ–∑–¥–∞–Ω–Ω—ã–µ)`, async (ctx)=>{
        if(ctx.res.status === 2) {
            const {text, keyboard} = await models.getAcceptedForms(ctx.res.zavod);
            return ctx.replyWithHTML(text, {reply_markup: {inline_keyboard: keyboard}})
        }
    })

    bot.hears(`üìÖ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é`, async (ctx)=>{
        if(ctx.res.status === 2) {
            const {text, keyboard} = await models.getAllForms(ctx.res.zavod);
            return ctx.replyWithHTML(text, {reply_markup: {inline_keyboard: keyboard}})
        }
    })

    bot.hears(`üìÖ –ó–∞—è–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è`, async (ctx)=>{
        if(ctx.res.status === 2) {
            const {text, keyboard} = await models.getAllFormsForToday(ctx.res.zavod);
            return ctx.replyWithHTML(text, {reply_markup: {inline_keyboard: keyboard}})
        }
    })

    bot.hears(`üìÖ –ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞`, async (ctx)=>{
        if(ctx.res.status === 2) {
            const {text, keyboard} = await models.getAllFormsForNextDay(ctx.res.zavod);
            return ctx.replyWithHTML(text, {reply_markup: {inline_keyboard: keyboard}})
        }
    })

    bot.hears(`üöö –ú–æ–∏ –º–∞—à–∏–Ω—ã`, async (ctx)=>{
        if(ctx.res.status === 2) {
            return ctx.replyWithHTML(`üöö –ú–æ–∏ –º–∞—à–∏–Ω—ã`, {reply_markup: {inline_keyboard: [[{text: '–ü–æ–∏—Å–∫ –¢–¢–ù –ø–æ –∑–∞—è–≤–∫–µ', callback_data: 'get_ttn_by_form'}],[{text: '–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–µ–º–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è', callback_data: 'add_livery_driver'}]]}})
        }
    })

    bot.action(`get_ttn_by_form`, async (ctx)=>{
        ctx.answerCbQuery();
        ctx.scene.enter(`get_ttn_by_form`)
    })

    bot.hears(`üöõ –°–∞–º–æ–≤—ã–≤–æ–∑`, async (ctx)=>{
        if(ctx.res.status === 2) {
            return ctx.replyWithHTML(`üöõ –°–∞–º–æ–≤—ã–≤–æ–∑`, {reply_markup: {inline_keyboard: [[{text: '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–∞–º–æ–≤—ã–≤–æ–∑', callback_data: 'create_pickup_form'}], [{text: '–í—Ö–æ–¥—è—â–∏–π —Å–∞–º–æ–≤—ã–≤–æ–∑', callback_data: 'incoming_pickups'}], [{text: '–°–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö', callback_data: 'confirmed_pickups'}]]}})
        }
    })

    bot.action(`incoming_pickups`, async (ctx)=>{
        if(ctx.res.status === 2) {
            let {text, keyboard} = await models.getIncomingPickups(ctx.res.zavod);
            keyboard.push([{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'main_pickups'}])
            return ctx.editMessageText(text, {parse_mode: 'HTML',reply_markup: {inline_keyboard: keyboard}})
        }
    })

    bot.action(`confirmed_pickups`, async (ctx)=>{
        if(ctx.res.status === 2) {
            let {text, keyboard} = await models.getConfirmedPickups(ctx.res.zavod);
            keyboard.push([{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'main_pickups'}])
            return ctx.editMessageText(text, {parse_mode: 'HTML',reply_markup: {inline_keyboard: keyboard}})
        }
    })

    bot.action(/finish_pickup_by_logist:(\d+)/, async (ctx)=>{
        await models.finishPickup(parseInt(ctx.match[1]), ctx.res.zavod);

        ctx.editMessageText(`<b>–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>`, {parse_mode: 'HTML'});
        const form = await db.getForm(parseInt(ctx.match[1]))
        ctx.telegram.sendMessage(form.logist_id,`–ó–∞–≤–æ–¥ ${await db.getZavodName(ctx.res.zavod)} –∑–∞–≤–µ—Ä—à–∏–ª —Å–∞–º–æ–≤—ã–≤–æ–∑ –∫ –∑–∞—è–≤–∫–µ #${form.fid}.`)

        const user = await db.getUser(ctx.from.id);
        if(user.zavod > -1){
            const zavod = await db.getZavod(user.zavod);
            if(zavod && zavod.group !== -1 && zavod.group !== null){
                ctx.telegram.sendMessage(zavod.group, `<b>${status[user.status]} ${user.real_name || `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–º—è`} (TG: ${ctx.from.first_name} @${ctx.from.username})

–î–µ–π—Å—Ç–≤–∏–µ:</b> –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–∞–º–æ–≤—ã–≤–æ–∑ #${form.fid} ${form.date}  ${form.betonAmount} –º¬≥ ${form.betonType} ${await db.getZavodName(form.logist_id)}`, {parse_mode:'HTML'})
            }
        }
    })

    bot.action(`main_pickups`, async (ctx)=>{
        if(ctx.res.status === 2) {
            return ctx.editMessageText(`üöõ –°–∞–º–æ–≤—ã–≤–æ–∑`, {reply_markup: {inline_keyboard: [[{text: '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–∞–º–æ–≤—ã–≤–æ–∑', callback_data: 'create_pickup_form'}], [{text: '–í—Ö–æ–¥—è—â–∏–π —Å–∞–º–æ–≤—ã–≤–æ–∑', callback_data: 'incoming_pickups'}], [{text: '–°–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö', callback_data: 'confirmed_pickups'}]]}})
        }
    })

    bot.action(`create_pickup_form`, async (ctx)=>{
        if(ctx.res.status === 2) {
            ctx.deleteMessage();
            ctx.scene.enter(`create_pickup_form`)
        }
    })

    bot.action(/acceptpickupform:(\d+)/, async (ctx)=>{
        if(ctx.res.status === 2) {
            const accept = await models.acceptPickupForm(ctx.res.zavod, parseInt(ctx.match[1]))
            if(accept){
                const form = await db.getForm(parseInt(ctx.match[1]))
                ctx.editMessageText(`<b>–ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>`, {parse_mode: 'HTML'});
                ctx.telegram.sendMessage(form.logist_id,`–ó–∞–≤–æ–¥ ${await db.getZavodName(ctx.res.zavod)} –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–∞–º–æ–≤—ã–≤–æ–∑–µ –∫ –∑–∞—è–≤–∫–µ #${form.fid}.`)
            }
            else{
                ctx.editMessageText(`<b>–ó–∞—è–≤–∫–∞ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞!</b>`, {parse_mode: 'HTML'});
            }
        }
    })

    bot.action(/cancelpickupform:(\d+)/, async (ctx)=>{
        if(ctx.res.status === 2) {
            const cancel = await models.cancelPickupForm(parseInt(ctx.match[1]))
            if(cancel){
                const form = await db.getForm(parseInt(ctx.match[1]))
                ctx.editMessageText(`<b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–∞–∑–∞–Ω–∞!</b>`, {parse_mode: 'HTML'});
                ctx.telegram.sendMessage(form.logist_id,`–ó–∞–≤–æ–¥ ${await db.getZavodName(ctx.res.zavod)} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–∞–º–æ–≤—ã–≤–æ–∑–µ –∫ –∑–∞—è–≤–∫–µ #${form.fid}.`)
            }
        }
    })

    bot.action(/form_shipment:(\d+)/, async (ctx)=>{
        if(ctx.res.status === 2) {
            ctx.editMessageText(`<b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–æ–¥ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏</b>`, {parse_mode: 'HTML', reply_markup: {inline_keyboard: [[{text: '–í—Å–µ –∑–∞–≤–æ–¥—ã', callback_data: `all_zavods_pickup:${ctx.match[1]}`}], [{text: '–í—ã–±—Ä–∞—Ç—å –∑–∞–≤–æ–¥', callback_data: `select_zavod_pickup:${ctx.match[1]}`}], [{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: `logist_form:${ctx.match[1]}`}]]}})
        }
    })

    bot.action(/all_zavods_pickup:(\d+)/, async (ctx)=>{
        if(ctx.res.status === 2) {
            await db.updateForm(ctx.match[1], 'Pickup', -1)
            ctx.editMessageText(`<b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ –≤—Å–µ –∑–∞–≤–æ–¥—ã, –æ–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>`, {parse_mode: 'HTML'})
        }
    })

    bot.action(/select_zavod_pickup:(\d+)/, async (ctx)=>{
        if(ctx.res.status === 2) {
            let {text, keyboard} = await models.getAllZavods(parseInt(ctx.match[1]));
            keyboard.push([{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: `form_shipment:${ctx.match[1]}`}])
            ctx.editMessageText(text, {parse_mode: 'HTML', reply_markup: {inline_keyboard: keyboard}})
        }
    })

    bot.action(/select_zavod_pickups:(\d+):(\d+)/, async (ctx)=>{
        if(ctx.res.status === 2) {
            await db.updateForm(ctx.match[1], 'Pickup', ctx.match[2])
            ctx.editMessageText(`<b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ –∑–∞–≤–æ–¥ ${await db.getZavod(ctx.match[2]).name}, –æ–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>`, {parse_mode: 'HTML'})
        }
    })

    bot.action(`add_livery_driver`, async (ctx)=>{
        const hash = await models.createLiveryDriverLink(ctx.from.id);

        ctx.replyWithHTML(`<b>–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –Ω–∞–µ–º–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è

–°—Å—ã–ª–∫–∞:</b> <a href="t.me/${ctx.botInfo.username}?start=${hash}">*–°–ö–û–ü–ò–†–£–ô–¢–ï*</a>

<i>–°–°–´–õ–ö–ê –û–î–ù–û–†–ê–ó–û–í–ê–Ø</i>`)
    })

    bot.action(/logist_form:(\d+)/, async (ctx)=>{
        if(ctx.res.status === 2) {
            index.openAncet(ctx,ctx.match[1], 0)
        }
    })

    bot.action(/send_to_carriers:(\d+)/, async (ctx)=>{
        if(ctx.res.status === 2) {
            const form = await db.getForm(ctx.match[1])
            if(form.to_carrier === -2){
                await db.updateForm(ctx.match[1], 'to_carrier', -1)
                ctx.editMessageText(`<b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞–º</b>`, {parse_mode: 'HTML'})
            }
            else{
                return ctx.editMessageText(`<b>–ó–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞–º</b>`, {parse_mode: 'HTML'})
            }
        }
    })

    bot.action(/booking_own_car:(\d+)/, async (ctx)=>{
        if(ctx.res.status === 2) {
            ctx.deleteMessage();
            db.bindLogist(parseInt(ctx.match[1]), ctx.from.id);
            ctx.scene.enter('booking_own_car', {fid: parseInt(ctx.match[1])})
        }
    })
    bot.action(/accept_condition:(\d+)/, async (ctx)=>{
        if(ctx.res.status === 2) {
            const condition = await db.getCondition(ctx.match[1])
            const form = await db.getForm(condition.form_id)
            const carrier_user = await db.getUser(condition.created_by)
            if(form.to_carrier === -1){
                await db.updateForm(condition.form_id, 'to_carrier', carrier_user.zavod)
                await db.updateForm(condition.form_id, condition.edit, condition.newvalue)
            }
            else if(form.to_carrier === carrier_user.zavod){
                await db.updateForm(condition.form_id, condition.edit, condition.newvalue)
            }
            else{
                return ctx.editMessageText(`<b>–£—Å–ª–æ–≤–∏–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ, —Ç–∞–∫ –∫–∞–∫ –∑–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –¥—Ä—É–≥–æ–º—É –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫—É</b>`, {parse_mode: 'HTML'})
            }

            ctx.editMessageText(`<b>–£—Å–ª–æ–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ!</b>`, {parse_mode: 'HTML'})
            ctx.telegram.sendMessage(condition.created_by, `<b>–í–∞—à–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ #${condition.form_id} –ø—Ä–∏–Ω—è—Ç–æ</b>`, {parse_mode: 'HTML'})
        }
    })
    bot.action(/reject_condition:(\d+)/, async (ctx)=>{
        if(ctx.res.status === 2) {
            const condition = await db.getCondition(ctx.match[1])
            ctx.editMessageText(`<b>–£—Å–ª–æ–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!</b>`, {parse_mode: 'HTML'})
            ctx.telegram.sendMessage(condition.created_by, `<b>–í–∞—à–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ #${condition.form_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>`, {parse_mode: 'HTML'})
        }
    })
};