const { Telegraf, Scenes, session } = require('telegraf');
const { setupScenes } = require('./scenes');
const { getUser, query,insertUser, getUsernameByID } = require('./database');
const Calendar = require('telegraf-calendar-telegram');
require('dotenv').config();
const db = require('./database');

const bot = new Telegraf(process.env.BOT_TOKEN);

const { status, entity, mainMenu, ancetaStatus } = require('./data');

function removePriceFromDops(dopsString) {
  return dopsString.split('-')[0].trim();
}


async function clientRegistration(ctx, ref=-1){
    let user = await getUser(ctx.from.id);
    if(user){
        mainMenu(ctx, user.status);
    }
    else{
        ctx.replyWithHTML(`<b>–ö—Ç–æ –≤—ã?</b>`, {reply_markup: {inline_keyboard:[
                    [{text: '–§–∏–∑. –ª–∏—Ü–æ', callback_data: `select_entity:0:${ref}`}],
                    [{text: '–Æ—Ä. –ª–∏—Ü–æ', callback_data: `select_entity:1:${ref}`}]
                ]}})
    }
}
async function workerRegistration(ctx,st, from, zavod){
    let user = await getUser(ctx.from.id);
    if(user){
        mainMenu(ctx, user.status);
    }
    else{
        await insertUser(ctx, ctx.from, '-', st,0,zavod);
        return ctx.scene.enter(`worker_registration`, {from: from})
    }
}
async function driverRegistration(ctx, from){
    let user = await getUser(ctx.from.id);
    if(user){
        mainMenu(ctx, user.status);
    }
    else{
        await insertUser(ctx, ctx.from, '-', 7,0, -1);
        return ctx.scene.enter(`driver_registration`, {from: from})
    }
}
module.exports.userAncets = async (ctx, reply=1) => {
    let but = [];
    let all = await query(`SELECT * FROM forms WHERE (created_by=? OR priv=?)`, [ctx.from.id,ctx.from.id])
    all.forEach((item) => {
        but.push([{text: `#${item.fid} | ${ancetaStatus[item.status]}`, callback_data: `getanc:${item.fid}`}]);
    })
    if(but.length === 0){
        return ctx.replyWithHTML(`üìã <b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é.</b>

<i>–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ?</i>`, {reply_markup: {inline_keyboard: [[{text: '–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏', callback_data: 'search_anc:0'}],[{text: '–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞', callback_data: 'search_anc:1'}], [{text: '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'search_anc:2'}], [{text: '–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ', callback_data: 'delmsg'}]]}})
    }
    but.push([{text: '–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏', callback_data: 'search_anc:0'}],[{text: '–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞', callback_data: 'search_anc:1'}], [{text: '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'search_anc:2'}], [{text: '–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ', callback_data: 'delmsg'}])
    if(reply === 1){
        ctx.replyWithHTML(`üìã <b>–í—Å–µ –≤–∞—à–∏ –∑–∞—è–≤–∫–∏:</b>`, {reply_markup: {inline_keyboard: but}})
    }
    else{
        ctx.editMessageText(`üìã <b>–í—Å–µ –≤–∞—à–∏ –∑–∞—è–≤–∫–∏:</b>`, {parse_mode: 'HTML',reply_markup: {inline_keyboard: but}})
    }
}
module.exports.managerAncets = async (ctx, reply=1) => {
    let but = [];
    let all = await query(`SELECT * FROM forms WHERE type=1 AND created_by=? AND (status!=3 OR status!=4) AND zavod=?`, [ctx.from.id, ctx.res.zavod])
    for(const item of all){
        const beton = (await query(`SELECT * FROM nc WHERE name=? AND zavod=?`,[item.betonType, ctx.res.zavod]))[0].name
        but.push([{text: `#${item.fid} | ${ancetaStatus[item.status]} | ${item.betonAmount} –º¬≥ | ${beton}`, callback_data: `m_getanc:${item.fid}`}]);
    }
    if(but.length === 0){
        return ctx.replyWithHTML(`üìã <b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫</b>`)
    }
    but.push([{text: '–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ', callback_data: 'delmsg'}]);
    if(reply === 1){
        ctx.replyWithHTML(`üìã <b>–í—Å–µ –≤–∞—à–∏ –∑–∞—è–≤–∫–∏:</b>`, {reply_markup: {inline_keyboard: but}})
    }
    else{
        ctx.editMessageText(`üìã <b>–í—Å–µ –≤–∞—à–∏ –∑–∞—è–≤–∫–∏:</b>`, {parse_mode: 'HTML',reply_markup: {inline_keyboard: but}})
    }
}
async function getWorker(ctx, id,reply=1){
    let user = await getUser(id);
    if(user){
        let text = `<b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ <a href="tg://user?id=${user.id}">${user.real_name}</a> (@${user.username || '–ë–µ–∑ —Ç–µ–≥–∞'})</b>

<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> <i>${status[user.status]}</i>
<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <i>${user.phone}</i>`

        if(reply === 1){
            ctx.replyWithHTML(text, {reply_markup: {inline_keyboard: [[{text:'–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', callback_data: `delworker:${user.id}`}],[{text:'–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'workers'}]]}})
        }
        else if(reply === 0){
            ctx.editMessageText(text, {parse_mode: 'HTML',reply_markup: {inline_keyboard: [[{text:'–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', callback_data: `delworker:${user.id}`}],[{text:'–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'workers'}]]}})
        }
    }
    else{
        ctx.answerCbQuery();
    }
}
module.exports.allWorkers = async (ctx, reply=1) => {
    let but = [];
    let all = await query(`SELECT * FROM users WHERE status!=0 AND status!=5 AND zavod=?`, [ctx.res.zavod]);
    all.forEach((item) => {
        but.push([{text: `${item.real_name || '–ù–µ –≤–≤–µ–ª –∏–º—è'} | ${status[item.status]}`, callback_data: `getworker:${item.id}`}]);
    })
    but.push([{text: '–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', callback_data: 'add_worker'}]);
    but.push([{text: '–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ', callback_data: 'delmsg'}]);
    if(reply === 1){
        ctx.replyWithHTML(`üëî <b>–í—Å–µ –≤–∞—à–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç</b>`, {reply_markup: {inline_keyboard: but}})
    }
    else{
        ctx.editMessageText(`üëî <b>–í—Å–µ –≤–∞—à–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç</b>`, {parse_mode: 'HTML',reply_markup: {inline_keyboard: but}})
    }
}
module.exports.generateRandomString = (length = 16) => {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';

    for (let i = 0; i < length; i++) {
        const randomIndex = Math.floor(Math.random() * chars.length);
        result += chars[randomIndex];
    }

    return result;
}
module.exports.allCars = async (ctx, reply=1)=>{
    let but = [];
    let all = await query(`SELECT * FROM cars WHERE zavod=?`, [ctx.res.zavod]);
    all.forEach((item) => {
        but.push([{text: `${item.name}`, callback_data: `ignore`},{text: `–£–¥–∞–ª–∏—Ç—å`, callback_data: `deletecar:${item.fid}`}]);
    })
    but.push([{text: '–î–æ–±–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É', callback_data: 'add_car'}]);
    but.push([{text: '–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ', callback_data: 'delmsg'}]);
    if(reply === 1){
        ctx.replyWithHTML(`üöö <b>–í—Å–µ –≤–∞—à–∏ –º–∞—à–∏–Ω—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç</b>`, {reply_markup: {inline_keyboard: but}})
    }
    else{
        ctx.editMessageText(`üöö <b>–í—Å–µ –≤–∞—à–∏ –º–∞—à–∏–Ω—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç</b>`, {parse_mode: 'HTML',reply_markup: {inline_keyboard: but}})
    }
}

const {userAncets, allWorkers, allCars, generateRandomString} = require(`./index`);

const stage = new Scenes.Stage(setupScenes());
bot.use(session());
bot.use(stage.middleware());

bot.use(async (ctx,next)=>{
    if (ctx.from && ctx.from.id === ctx.botInfo.id) {
        return;
    }
    if(!ctx.from.username){
        return ctx.replyWithHTML(`‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç Username –≤ –ø—Ä–æ—Ñ–∏–ª–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>`)
    }
    if(ctx.message?.text?.startsWith(`/start`)){
        let res = await getUser(ctx.from.id);
        if(res){
            mainMenu(ctx, res.status);
            await query(`UPDATE users SET username=?, name=? WHERE id=?`, [ctx.from.username, ctx.from.first_name, ctx.from.id])
        }
        else{
            let ref = ctx.message.text.split(' ')[1];
            if(ref){
                let link = await query(`SELECT * FROM links WHERE hash=?`, [ref]);
                if(link.length > 0){
                    link = link[0];
                    if(link.do.startsWith(`add:`)){
                        let add_status = parseInt(link.do.split(':')[1])
                        await workerRegistration(ctx,add_status, link.from, link.zavod);
                        await query(`DELETE FROM links WHERE fid=?`, [link.fid]);
                    }
                    else if(link.do === `ref`){
                        await clientRegistration(ctx,link.zavod);
                        await query(`DELETE FROM links WHERE fid=?`, [link.fid]);
                    }
                    else if(link.do === `addliverydriver`){
                        await driverRegistration(ctx,link.from);
                        await query(`DELETE FROM links WHERE fid=?`, [link.fid]);
                    }
                }
                else{
                    clientRegistration(ctx)
                }
            }
            else{
                clientRegistration(ctx)
            }
        }
    }
    else{
        let res = await getUser(ctx.from.id);
        if(res){
            ctx.res = res;
        }
        await next();
        await query(`UPDATE users SET username=?, name=? WHERE id=?`, [ctx.from.username, ctx.from.first_name, ctx.from.id])
    }
})



module.exports.openAncet = async (ctx,id, reply=1)=>{
    const anc = (await query(`SELECT * FROM forms WHERE fid=?`, [id]))[0]

    if(!anc){
        return ctx.replyWithHTML(`‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</b>`)
    }

    let text;
    let but = [];

    const user = await getUser(ctx.from.id);
    if(user){
        if(user.status === 0){
            let namesOnly = '';
            if(anc.type === 0){
                namesOnly = anc.dopAll;
            }
            else{
                namesOnly = anc.dopAll.split('\n').map(line => removePriceFromDops(line)).join('\n');
            }
            text = `<b>üìã –ó–∞—è–≤–∫–∞ #${anc.fid}
1. –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:</b> ${ancetaStatus[anc.status]}
<b>2. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> ${anc.date}
<b>3. –ê–¥—Ä–µ—Å:</b> ${anc.place}
<b>4. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> ${anc.phone}
<b>5. –ë–µ—Ç–æ–Ω:</b> ${anc.betonType} - ${anc.betonAmount} –º¬≥
<b>6. –§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã:</b> ${anc.payForm}
<b>7. –î–æ–ø—ã:</b> ${namesOnly}
<b>8. –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã—Ö–æ–¥:</b> ${anc.exitPrice === -1 ? '–ù–µ —Ä–∞—Å—á–∏—Ç–∞–Ω–∞' : anc.exitPrice + ' —Ä—É–±.'}
<b>9. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${anc.com}
<b>10. –ú–µ–Ω–µ–¥–∂–µ—Ä:</b> ${anc.real_name}`
            but.push([{text: '–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ', callback_data: `get_form_media:${anc.fid}`}])
        }
        else if(user.status === 1){
            text = `<b>üìã –ó–∞—è–≤–∫–∞ #${anc.fid}
1. –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:</b> ${ancetaStatus[anc.status]}
<b>2. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> ${anc.date}
<b>3. –ê–¥—Ä–µ—Å:</b> ${anc.place}
<b>4. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> ${anc.phone}
<b>5. –ë–µ—Ç–æ–Ω:</b> ${anc.betonType} - ${anc.betonAmount} –º¬≥ * ${anc.betonUserPrice} (–ü—Ä–∞–π—Å: ${anc.betonPrice})
<b>6. –§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã:</b> ${anc.payForm}
<b>7. –î–æ—Å—Ç–∞–≤–∫–∞:</b> ${anc.deliveryPriceWithAdd}‚ÇΩ –∑–∞ ${anc.deliveryAmount} (–ü—Ä–∞–π—Å: ${anc.deliveryPrice}‚ÇΩ)
<b>8. –î–æ–ø—ã (${anc.dopPrice}):</b> ${anc.dopAll}
<b>9. –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥:</b> ${anc.enterPrice} —Ä—É–±.
<b>10. –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã—Ö–æ–¥:</b> ${anc.exitPrice} —Ä—É–±.
<b>11. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${anc.com}
<b>12. –ú–µ–Ω–µ–¥–∂–µ—Ä:</b> ${anc.real_name}`
            but.push([{text: '–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ', callback_data: `get_form_media:${anc.fid}`}])
            if((anc.type === 1 || anc.type === 2) && anc.status !== 3 && anc.status !== 4){
                if(user.zavod === anc.zavod){
                    but.push([{text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É', callback_data: `form_edit:${anc.fid}`}],
                    [{text: '–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ', callback_data: `form_add_media:${anc.fid}`}],
                    [{text: '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: `cancel_form:${anc.fid}`}])
                }
            }

        }
        else if(user.status === 2){
            let car_types = await db.getCarTypesByForm(anc.fid);
            let car_types_text;
            if(car_types.length > 0){
                car_types_text = car_types.map(item => `<b>${item.car_name}</b> - ${item.trips} —Ä–µ–π—Å(–æ–≤)`).join('\n');
            }
            else{
                car_types_text = '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            }
            but.push([{text: '–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ', callback_data: `get_form_media:${anc.fid}`}])
            if((anc.type === 1 || anc.type === 2 || anc.type === 3) && anc.status !== 3 && anc.status !== 4){
                if(user.zavod === anc.zavod){
                    text = `<b>üìã –ó–∞—è–≤–∫–∞ #${anc.fid}
1. –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:</b> ${ancetaStatus[anc.status]}
<b>2. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> ${anc.date}
<b>3. –ê–¥—Ä–µ—Å:</b> ${anc.place}
<b>4. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> ${anc.phone}
<b>5. –ë–µ—Ç–æ–Ω:</b> ${anc.betonType} - ${anc.betonAmount} –º¬≥ * ${anc.betonUserPrice} (–ü—Ä–∞–π—Å: ${anc.betonPrice})
<b>6. –§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã:</b> ${anc.payForm}
<b>7. –î–æ—Å—Ç–∞–≤–∫–∞:</b> ${anc.deliveryPriceWithAdd}‚ÇΩ –∑–∞ ${anc.deliveryAmount} (–ü—Ä–∞–π—Å: ${anc.deliveryPrice}‚ÇΩ)
<b>8. –î–æ–ø—ã (${anc.dopPrice}):</b> ${anc.dopAll}
<b>9. –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥:</b> ${anc.enterPrice} —Ä—É–±.
<b>10. –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã—Ö–æ–¥:</b> ${anc.exitPrice} —Ä—É–±.
<b>11. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${anc.com}
<b>12. –¢–∏–ø –∞–≤—Ç–æ:</b> 
${car_types_text}
<b>13. –ö–æ–ª-–≤–æ –º–∞—à–∏–Ω:</b> ${anc.car_count === 0 ? '–ù–µ —É–∫–∞–∑–∞–Ω–æ' : anc.car_count}
<b>14. –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞:</b> ${anc.carrier_price === 0 ? '–ù–µ —É–∫–∞–∑–∞–Ω–æ' : anc.carrier_price + ' —Ä—É–±.'}`
                    if(anc.status === 2){
                        if(anc.pickup === -2){
                            but.push([{text: '–ì—Ä—É–∑–∏—Ç—å —Å –¥—Ä—É–≥–æ–≥–æ –∑–∞–≤–æ–¥–∞', callback_data: `form_shipment:${anc.fid}`}])
                        }
                        but.push([{text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ', callback_data: `edit_car:${anc.fid}`}])
                    }
                    but.push([{text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞–º', callback_data: `send_to_carriers:${anc.fid}`}],
                            [{text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫—É', callback_data: `get_all_carriers:${anc.fid}`}],
                            [{text: '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º', callback_data: `booking_own_car:${anc.fid}`}],
                            [{text: '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞—è–≤–∫—É', callback_data: `form_edit:${anc.fid}:0`},{text: '–ò–∑–º–µ–Ω–∏—Ç—å –æ–±—ä–µ–º', callback_data: `form_edit:${anc.fid}:1`}],
                            [{text: '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏', callback_data: `form_edit:${anc.fid}:3`}],
                            [{text: '–£—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É', url: `t.me/${await getUsernameByID(anc.created_by)}`}])
                    }
                else if(anc.pickup === -1 || anc.pickup === user.zavod){
                    text = `<b>üìã –ó–∞—è–≤–∫–∞ #${anc.fid}
1. –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:</b> –°–∞–º–æ–≤—ã–≤–æ–∑
<b>2. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> ${anc.date}
<b>3. –ê–¥—Ä–µ—Å:</b> ${anc.place}
<b>5. –ë–µ—Ç–æ–Ω:</b> ${anc.betonType} - ${anc.betonAmount} –º¬≥ * ${anc.betonUserPrice} (–ü—Ä–∞–π—Å: ${anc.betonPrice})
<b>6. –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${anc.betonAmount*anc.betonUserPrice}
<b>7. –¢–∏–ø –∞–≤—Ç–æ:</b> 
${car_types_text}
<b>8. –ö–æ–ª-–≤–æ –º–∞—à–∏–Ω:</b> ${anc.car_count === 0 ? '–ù–µ —É–∫–∞–∑–∞–Ω–æ' : anc.car_count}
<b>9. –ó–∞–≤–æ–¥:</b> ${anc.zavod !== -2 ? await db.getZavodName(anc.zavod) : await db.getZavodName(anc.pickup)}`
                    if(anc.isPickup === 0){
                        let but2 = [{text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `acceptpickupform:${anc.fid}`}]
                        if(anc.pickup !== -1){
                            but2.push({text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `cancelpickupform:${anc.fid}`})
                        }
                        but.push(but2)
                    }
                    else if(anc.isPickup === 1 && anc.pickup === user.zavod){
                        but.push([{text: '–ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data: `finish_pickup_by_logist:${anc.fid}`},{text: '–û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancelpickupform:${anc.fid}`}])
                    }
                }
            }
        }
        else if(user.status === 3){
            let car_types = await db.getCarTypesByForm(anc.fid);
            let car_types_text;
            if(car_types.length > 0){
                car_types_text = car_types.map(item => `<b>${item.car_name}</b> - ${item.trips} —Ä–µ–π—Å(–æ–≤)`).join('\n');
            }
            else{
                car_types_text = '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            }
            let namesOnly = '';
            if(anc.type === 0){
                namesOnly = anc.dopAll;
            }
            else{
                namesOnly = anc.dopAll.split('\n').map(line => removePriceFromDops(line)).join('\n');
            }
            text = `<b>üìã –ó–∞—è–≤–∫–∞ #${anc.fid}
1. –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:</b> ${ancetaStatus[anc.status]}
<b>2. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> ${anc.date}
<b>3. –ê–¥—Ä–µ—Å:</b> ${anc.place}
<b>6. –î–æ—Å—Ç–∞–≤–∫–∞:</b> ${anc.deliveryPriceWithAdd}‚ÇΩ
<b>7. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${anc.com}
<b>8. –î–æ–ø—ã:</b> ${namesOnly}
<b>9. –¢–∏–ø –∞–≤—Ç–æ:</b> 
${car_types_text}
<b>10. –ö–æ–ª-–≤–æ –º–∞—à–∏–Ω:</b> ${car_types.length === 0 ? '–ù–µ —É–∫–∞–∑–∞–Ω–æ' : anc.car_count}
<b>11. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ª–æ–≥–∏—Å—Ç–∞:</b> ${anc.logist_com || '–ù–µ —É–∫–∞–∑–∞–Ω'}
<b>12. –ó–∞–≤–æ–¥:</b> ${await db.getZavodName(anc.zavod) || '–ù–µ —É–∫–∞–∑–∞–Ω'}`

            if(anc.carrier_price > 0){
                text += `\n<b>13. –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞:</b> ${anc.carrier_price} —Ä—É–±.`
            }
            but.push([{text: '–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ', callback_data: `get_form_media:${anc.fid}`}])

            if((anc.type === 1 || anc.type === 2) && anc.status !== 3 && anc.status !== 4){
                but.push([{text: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: `finish_form:${anc.fid}`}],
                    [{text: 'üÜò SOS', callback_data: `sos:${anc.fid}`}]
                )
            }
        }
        else if(user.status === 4){
            text = `<b>üìã –ó–∞—è–≤–∫–∞ #${anc.fid}
1. –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:</b> ${ancetaStatus[anc.status]}
<b>2. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> ${anc.date}
<b>3. –ê–¥—Ä–µ—Å:</b> ${anc.place}
<b>4. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> ${anc.phone}
<b>5. –ë–µ—Ç–æ–Ω:</b> ${anc.betonType} - ${anc.betonAmount} –º¬≥ * ${anc.betonUserPrice} (–ü—Ä–∞–π—Å: ${anc.betonPrice})
<b>6. –§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã:</b> ${anc.payForm}
<b>7. –î–æ—Å—Ç–∞–≤–∫–∞:</b> ${anc.deliveryPriceWithAdd}‚ÇΩ –∑–∞ ${anc.deliveryAmount} (–ü—Ä–∞–π—Å: ${anc.deliveryPrice}‚ÇΩ)
<b>8. –î–æ–ø—ã (${anc.dopPrice}):</b> ${anc.dopAll}
<b>9. –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥:</b> ${anc.enterPrice} —Ä—É–±.
<b>10. –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã—Ö–æ–¥:</b> ${anc.exitPrice} —Ä—É–±.
<b>11. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${anc.com}
<b>12. –ú–µ–Ω–µ–¥–∂–µ—Ä:</b> ${anc.real_name}`
            but.push([{text: '–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ', callback_data: `get_form_media:${anc.fid}`}])
            if((anc.type === 1 || anc.type === 2) && anc.status === 3 && anc.UPD !== 1 && anc.status !== 4){
                if(user.zavod === anc.zavod){
                    but.push([{text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å –£–ü–î', callback_data: `editUPD:${anc.fid}`}])
                }
            }

        }
        else if(user.status === 6){
            let car_types = await db.getCarTypesByForm(anc.fid);
            let car_types_text;
            if(car_types.length > 0){
                car_types_text = car_types.map(item => `<b>${item.car_name}</b> - ${item.trips} —Ä–µ–π—Å(–æ–≤)`).join('\n');
            }
            else{
                car_types_text = '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
            }

            text = `<b>üìã –ó–∞—è–≤–∫–∞ #${anc.fid}
1. –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:</b> ${ancetaStatus[anc.status]}
<b>2. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> ${anc.date}
<b>3. –ê–¥—Ä–µ—Å:</b> ${anc.place}
<b>6. –î–æ—Å—Ç–∞–≤–∫–∞:</b> ${anc.deliveryPriceWithAdd}‚ÇΩ
<b>7. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${anc.com}
<b>8. –¢–∏–ø –∞–≤—Ç–æ:</b> 
${car_types_text}
<b>9. –ö–æ–ª-–≤–æ –º–∞—à–∏–Ω:</b> ${car_types.length === 0 ? '–ù–µ —É–∫–∞–∑–∞–Ω–æ' : anc.car_count}
<b>10. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ª–æ–≥–∏—Å—Ç–∞:</b> ${anc.logist_com || '–ù–µ —É–∫–∞–∑–∞–Ω'}
<b>11. –ó–∞–≤–æ–¥:</b> ${await db.getZavodName(anc.zavod) || '–ù–µ —É–∫–∞–∑–∞–Ω'}`

            if(anc.carrier_price > 0){
                text += `\n<b>12. –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞:</b> ${anc.carrier_price} —Ä—É–±.`
            }
            but.push([{text: '–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ', callback_data: `get_form_media:${anc.fid}`}])
            if((anc.type === 1 || anc.type === 2) && anc.status !== 3 && anc.status !== 4){
                if(await db.formIsBookedByCarrier(anc.fid)){
                    but.push([{text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ', callback_data: `edit_car:${anc.fid}`}],
                        [{text: '–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: `reject_booking:${anc.fid}`}])
                }
                else if(user.zavod === anc.to_carrier){
                    but.push([{text: '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', callback_data: `booking_carrier:${anc.fid}`}],
                            [{text: '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—Å–ª–æ–≤–∏—è', callback_data: `offer_conditions:${anc.fid}`}],
                            [{text: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data: `reject_booking:${anc.fid}`}])
                }
                else if(anc.to_carrier === -1){
                    but.push([{text: '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', callback_data: `booking_carrier:${anc.fid}`}],
                            [{text: '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—Å–ª–æ–≤–∏—è', callback_data: `offer_conditions:${anc.fid}`}])
                }
            }
        }

        if(reply === 1){
            ctx.replyWithHTML(text, {reply_markup: {inline_keyboard: but}})
        }
        else{
            ctx.editMessageText(text, {parse_mode: 'HTML',reply_markup: {inline_keyboard: but}})
        }
    }
    else{
        return ctx.replyWithHTML(`‚ùå <b>–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!</b>`)
    }
}

module.exports.incomingAncets = async (ctx, reply=1) => {
    if(reply === 1){
        await ctx.replyWithHTML(`<b>üì© –í—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏</b>`, {reply_markup: {inline_keyboard: [[{text: '–ù–µ–æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ', callback_data: 'incoming_neotr'}], [{text: '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ö–ü', callback_data: 'incoming_kp'}]]}})
    }
    else if(reply === 0){
        await ctx.editMessageText(`<b>üì© –í—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏</b>`, {parse_mode: 'HTML',reply_markup: {inline_keyboard: [[{text: '–ù–µ–æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ', callback_data: 'incoming_neotr'}], [{text: '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ö–ü', callback_data: 'incoming_kp'}]]}})
    }
}

require('./logist/handlers')(bot);
require('./carrier/handlers')(bot);
require('./driver/handlers')(bot);
require('./livery_driver/handlers')(bot);
require('./accountant/handlers')(bot);

bot.on('text', async (ctx) => {
    const user = ctx.from;
    const text = ctx.message.text;
    if(text === `üìã –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å–µ –∑–∞–≤–æ–¥—ã`){
        return ctx.scene.enter(`create_ancet`)
    }
    else if(text === `‚ÑπÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–µ–¥–∞—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏`){
        return ctx.replyWithMarkdown(`*# –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏*

_–ù–∞—Å—Ç–æ—è—â–∞—è –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Å–±–æ—Ä–∞, —Ö—Ä–∞–Ω–µ–Ω–∏—è, –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–∞–π—Ç–µ [@BHGbeton] (–¥–∞–ª–µ–µ ‚Äî ¬´–°–∞–π—Ç¬ª), —è–≤–ª—è—é—â–µ–≥–æ—Å—è –æ–Ω–ª–∞–π–Ω-–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–º —É—Å–ª—É–≥ –±–µ—Ç–æ–Ω–Ω—ã—Ö –∑–∞–≤–æ–¥–æ–≤._

*## 1. –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è*

1.1. –ù–∞—Å—Ç–æ—è—â–∞—è –ü–æ–ª–∏—Ç–∏–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º –∑–∞–∫–æ–Ω–æ–º –æ—Ç 27.07.2006 ‚Ññ 152-–§–ó ¬´–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö¬ª (–≤ —Ä–µ–¥–∞–∫—Ü–∏–∏, –¥–µ–π—Å—Ç–≤—É—é—â–µ–π –Ω–∞ –º–æ–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –°–∞–π—Ç–∞) –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç—ã –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –°–∞–π—Ç–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.

1.2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –°–∞–π—Ç–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –±–µ–∑–æ–≥–æ–≤–æ—Ä–æ—á–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –Ω–∞—Å—Ç–æ—è—â–µ–π –ü–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.

*## 2. –¶–µ–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö*

2.1. –°–∞–π—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ü–µ–ª—å—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å—É –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É –±–µ—Ç–æ–Ω–∞ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–º—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é –º–µ–∂–¥—É –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –±–µ—Ç–æ–Ω–Ω—ã–º–∏ –∑–∞–≤–æ–¥–∞–º–∏.

2.2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Ü–µ–ª—è—Ö:
- –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –±–µ—Ç–æ–Ω–Ω—ã–º –∑–∞–≤–æ–¥–∞–º;
- –î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –±–µ—Ç–æ–Ω–Ω—ã–º –∑–∞–≤–æ–¥–æ–º;
- –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –ø–æ –æ–∫–∞–∑–∞–Ω–∏—é —É—Å–ª—É–≥ –°–∞–π—Ç–∞.

*## 3. –ü–µ—Ä–µ—á–µ–Ω—å —Å–æ–±–∏—Ä–∞–µ–º—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö*

3.1. –ü—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É –±–µ—Ç–æ–Ω–∞ –°–∞–π—Ç —Å–æ–±–∏—Ä–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
- –§–ò–û (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏);
- –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –±–µ—Ç–æ–Ω–∞;
- –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞;
- –î–∞–Ω–Ω—ã–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º –æ–±—ä–µ–º–µ, –º–∞—Ä–∫–µ –±–µ—Ç–æ–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö.

*3.2. –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –°–∞–π—Ç–µ, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–≥—É—Ç —Å–æ–±–∏—Ä–∞—Ç—å—Å—è:*
- –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞;
- –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å (—à–∏—Ñ—Ä—É—é—Ç—Å—è).

*## 4. –ü–æ—Ä—è–¥–æ–∫ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö*

4.1. –í—Å–µ –¥–∞–Ω–Ω—ã–µ, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Ñ–æ—Ä–º–µ –∑–∞—è–≤–∫–∏, —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º –±–µ—Ç–æ–Ω–Ω—ã–º –∑–∞–≤–æ–¥–∞–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –°–∞–π—Ç–µ, –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏.

4.2. –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –±–µ—Ç–æ–Ω–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Å–µ–º –±–µ—Ç–æ–Ω–Ω—ã–º –∑–∞–≤–æ–¥–∞–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏.

4.3. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–µ—Ç–æ–Ω–Ω–æ–º—É –∑–∞–≤–æ–¥—É –≤ –º–æ–º–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–æ–¥–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

4.4. –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞—è–≤–∫–∏, –Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Å–ª—É—á–∞–µ–≤, –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –†–§.

*## 5. –•—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞—â–∏—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö*

5.1. –°–∞–π—Ç –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Ä—ã –¥–ª—è –∏—Ö –∑–∞—â–∏—Ç—ã –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞, –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∏–ª–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è.

5.2. –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –≤–∏–¥–µ —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§ –≤ —Å—Ñ–µ—Ä–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

*## 6. –ü—Ä–∞–≤–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*

6.1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ:
- –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–∏–µ –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è;
- –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏;
- –û—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∞–≤–∏–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–∏—Å—å–º–æ –Ω–∞ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã [—É–∫–∞–∑–∞—Ç—å].

6.2. –£–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.

*## 7. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏*

7.1. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –°–∞–π—Ç–∞ –≤–ø—Ä–∞–≤–µ –≤–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç–æ—è—â—É—é –ü–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–æ–≤–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è –ü–æ–ª–∏—Ç–∏–∫–∏ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É —Å –º–æ–º–µ–Ω—Ç–∞ –µ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ –°–∞–π—Ç–µ.

*## 8. –ö–æ–Ω—Ç–∞–∫—Ç—ã*

8.1. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:  
BHGbeton@gmail.com –∏–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∞–∫–∫–∞—É–Ω—Ç @betonbotnomer1`)
    }
    else if(text === `‚ùóÔ∏è –£ –ú–ï–ù–Ø –£–ñ–ï –ï–°–¢–¨ –ó–ê–Ø–í–ö–ê`){
        return userAncets(ctx)
    }
    else if(ctx.res?.status === 5){
        if(text === `üóÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É`){
            return ctx.scene.enter(`load_nc`)
        }
        else if(text === `üëî –ú–æ–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏`){
            return await allWorkers(ctx)
        }
        else if(text === `üöö –ú–æ–∏ –º–∞—à–∏–Ω—ã –∏ –≤–æ–¥–∏—Ç–µ–ª–∏`){
            return await allCars(ctx)
        }
    }
    else if(ctx.res?.status === 1 || ctx.res?.status === 5){
        if(text === `‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É`){
            return ctx.scene.enter(`manager_create`)
        }
        else if(text === `üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏`){
            return this.managerAncets(ctx);
        }
        else if(text === `üì© –í—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏`){
            return this.incomingAncets(ctx)
        }
        else if(text === `üîé –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏`){
            return ctx.scene.enter(`search_ancet`)
        }
        else if(text === `üîó –†–µ—Ñ. –ø—Ä–æ–≥—Ä–∞–º–º–∞`){
            ctx.replyWithHTML(`<b>üîó –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞</b>`, {reply_markup: {inline_keyboard: [[{text: '–°–æ–∑–¥–∞—Ç—å', callback_data: 'create_link_manager'}]]}})
        }
    }
});
bot.on(`callback_query`, async (ctx)=>{
    const user = ctx.from;
    const cb = ctx.callbackQuery;
    let data = cb.data;
    if(data.startsWith(`select_entity`)){
        await ctx.deleteMessage()
        let e = parseInt(data.split(':')[1]);
        let ref = parseInt(data.split(':')[2]);
        if(e === 0){
            await insertUser(ctx, user, '-', 0, e)
            return ctx.scene.enter(`enter_name`, {ref: ref});
        }
        else if(e === 1){
            await insertUser(ctx, user, '-', 0, e)
            return ctx.scene.enter(`enter_company`, {ref: ref});
        }
    }
    else if(data.startsWith(`getanc:`)){
        return this.openAncet(ctx, parseInt(data.split(':')[1]), 0)
    }
    else if(data.startsWith(`getanc_m:`)){
        return this.openAncet(ctx, parseInt(data.split(':')[1]), 0)
    }
    else if(data.startsWith(`m_getanc:`)){
        return this.openAncet(ctx, parseInt(data.split(':')[1]), 0)
    }
    else if(data.startsWith(`get_form_media:`)){
        let anc = (await query(`SELECT * FROM forms WHERE fid=${data.split(':')[1]}`))[0]
          try {
            const mediaArray = JSON.parse(anc.media);
            if (mediaArray.length === 0) {
                return ctx.answerCbQuery('‚ùå –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.', {show_alert: true});
            }
            else{
                ctx.answerCbQuery();
            }
            const mediaGroup = mediaArray.map(item => ({
                type: item.type,
                media: item.fileId
            }));

            await ctx.replyWithMediaGroup(mediaGroup);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤:', error);
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤.');
        }
    }
    else if(data.startsWith(`form_add_media:`)){
        let id = parseInt(data.split(':')[1])
        ctx.scene.enter(`editmedia_form`, {anceta: id})
    }
    else if(data.startsWith(`form_edit:`)){
        let c = data.split(':');
        if(c.length === 3){
            ctx.deleteMessage();
            ctx.scene.enter(`edit_form`, {type: parseInt(c[2]), fid: parseInt(c[1])})
        }
        else{
            let anc = (await query(`SELECT * FROM forms WHERE fid=${data.split(':')[1]}`))[0]
            let but = [
                [{text: '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', callback_data: `form_edit:${anc.fid}:0`},{text: '–ò–∑–º–µ–Ω–∏—Ç—å –æ–±—ä–µ–º', callback_data: `form_edit:${anc.fid}:1`}],
                [{text: '–ò–∑–º–µ–Ω–∏—Ç—å –º–∞—Ä–∫—É', callback_data: `form_edit:${anc.fid}:2`},{text: '–ò–∑–º–µ–Ω–∏—Ç—å –≤—ã—Ö–æ–¥', callback_data: `form_edit:${anc.fid}:3`}],
                [{text: '–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ø—ã', callback_data: `form_edit:${anc.fid}:4`},],
                [{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: `form_edit:${anc.fid}`},],
            ]
            ctx.editMessageReplyMarkup({inline_keyboard: but})   
        }
    }
    else if(data.startsWith(`cancel_form:`)){
        await query(`UPDATE forms SET status=4 WHERE fid=?`, [parseInt(data.split(':')[1])])
        this.managerAncets(ctx,0)
    }
    else if(data === `incoming_kp`){
        const all = await query(`SELECT * FROM forms WHERE type=2 AND zavod=? AND created_by=?`, [ctx.res.zavod, ctx.from.id])
        let but = all.map(s=>[{text: `#${s.fid} | ${s.betonType} ${s.betonAmount} –º¬≥`, callback_data: `incoming_kp_go:${s.fid}`}])
        but.push([{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'incoming'}])
        ctx.editMessageText(`<b>üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ö–ü</b>`,{parse_mode:'HTML',reply_markup: {inline_keyboard: but}})
    }
    else if(data.startsWith(`incoming_kp_go:`)){
        return this.openAncet(ctx, parseInt(data.split(':')[1]), 0)
    }
    else if(data === `incoming_neotr`){
        const all = await query(`SELECT * FROM forms WHERE type=0 AND (zavod=-1 OR zavod=?) AND calculated=0`, [ctx.res.zavod]);
        let but = all.map(s=>[{text: `#${s.fid} | ${s.betonType} ${s.betonAmount} –º¬≥`, callback_data: `incoming_neotr_go:${s.fid}`}])
        but.push([{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'incoming'}])
        ctx.editMessageText(`<b>üì© –í—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏</b>`,{parse_mode:'HTML',reply_markup: {inline_keyboard: but}})
    }
    else if(data.startsWith(`incoming_neotr_go:`)){
        let anc = (await query(`SELECT * FROM forms WHERE fid=${data.split(':')[1]}`))[0]
        await ctx.editMessageText(`<b>üìã –ó–∞—è–≤–∫–∞ #${anc.fid}
1. –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:</b> ${ancetaStatus[anc.status]}
<b>2. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> ${anc.date}
<b>3. –ú–∞—Ä–∫–∞ –∏ –æ–±—å–µ–º:</b> ${anc.betonType} | ${anc.betonAmount} –º¬≥
<b>4. –ê–¥—Ä–µ—Å:</b> ${anc.place}
<b>5. –î–æ–ø—ã:</b> ${anc.dopAll}
<b>6. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${anc.com}
<b>7. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> ${anc.phone}`, {parse_mode: 'HTML',reply_markup: {inline_keyboard: [[{text: '–û–±—Å—á–∏—Ç–∞—Ç—å', callback_data: `startManage:${anc.fid}`}],[{text: '–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ', callback_data: `get_form_media:${anc.fid}`}],[{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'incoming_neotr'}]]}});
    }
    else if(data === `incoming`){
        return this.incomingAncets(ctx, 0);
    }
    else if(data.startsWith(`startManage:`)){
        let anc = (await query(`SELECT * FROM forms WHERE fid=${data.split(':')[1]}`))[0]
        return ctx.scene.enter(`manager_calculate`, {an: anc});
    }
    else if(data === `manager_anc`){
        return this.managerAncets(ctx,0)
    }
    else if(data === `useranc`){
        return userAncets(ctx,0)
    }
    else if(data.startsWith(`search_anc`)){
        let id = parseInt(data.split(':')[1]);
        if(id === 2){
            await ctx.deleteMessage();
            return ctx.scene.enter(`create_ancet`)
        }
        else if(id === 1){
            await ctx.deleteMessage();
            return ctx.scene.enter(`search_by_phone`)
        }
        else if(id === 0){
            await ctx.deleteMessage();
            return ctx.scene.enter(`search_by_id`)
        }
    }
    else if(data === `add_worker`){
        if(ctx.res.status === 5){
            ctx.editMessageText(`<b>–ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?</b>`, {parse_mode: 'HTML', reply_markup: {inline_keyboard: [
                        [{text: '–ú–µ–Ω–µ–¥–∂–µ—Ä–∞', callback_data: 'add_work:1'}],
                        [{text: '–õ–æ–≥–∏—Å—Ç–∞', callback_data: 'add_work:2'}],
                        [{text: '–í–æ–¥–∏—Ç–µ–ª—è', callback_data: 'add_work:3'}],
                        [{text: '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∞', callback_data: 'add_work:4'}],
                        [{text: '–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞', callback_data: 'add_work:6'}],
                        [{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'workers'}]
                    ]}})
        }
    }
    else if(data === `workers`){
        if(ctx.res.status === 5){
            allWorkers(ctx,0)
        }
    }
    else if(data === `create_link_manager`){
        ctx.deleteMessage();
        let hash = generateRandomString(18)

        let res = await query(`INSERT INTO links (zavod, hash, do, \`from\`) VALUES (?,?,?,?)`, [ctx.res.zavod,hash, `ref`,ctx.from.id])

        const s = await ctx.replyWithHTML(`<b>–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞</b>

<b>–°—Å—ã–ª–∫–∞:</b> <a href="t.me/${(await bot.telegram.getMe()).username}?start=${hash}">*–°–ö–û–ü–ò–†–£–ô–¢–ï*</a>

<i>–°–°–´–õ–ö–ê –û–î–ù–û–†–ê–ó–û–í–ê–Ø</i>`, {reply_markup: {inline_keyboard: [[{text: '–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É', callback_data: `deletelink:${res.insertId}`}]]}})
        ctx.pinChatMessage(s.message_id);
    }
    else if(data.startsWith(`add_work:`)){
        ctx.deleteMessage();
        let id = parseInt(data.split(':')[1]);
        let hash = generateRandomString(18)

        let res = await query(`INSERT INTO links (zavod, hash, do, \`from\`) VALUES (?,?,?,?)`, [ctx.res.zavod,hash, `add:${id}`,ctx.from.id])

        const s = await ctx.replyWithHTML(`<b>–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è ${status[id]}</b>

<b>–°—Å—ã–ª–∫–∞:</b> <a href="t.me/${(await bot.telegram.getMe()).username}?start=${hash}">*–°–ö–û–ü–ò–†–£–ô–¢–ï*</a>

<i>–°–°–´–õ–ö–ê –û–î–ù–û–†–ê–ó–û–í–ê–Ø</i>`, {reply_markup: {inline_keyboard: [[{text: '–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É', callback_data: `deletelink:${res.insertId}`}]]}})
        ctx.pinChatMessage(s.message_id);
    }
    else if(data.startsWith(`getworker:`)){
        await getWorker(ctx,parseInt(data.split(':')[1]), 0)
    }
    else if(data.startsWith(`deletelink:`)){
        let id = parseInt(data.split(':')[1]);
        await query(`DELETE FROM links WHERE fid=?`, [id])
        await ctx.deleteMessage();
    }
    else if(data.startsWith(`delworker:`)){
        let id = parseInt(data.split(':')[1]);
        await query(`DELETE FROM users WHERE id=?`, [id])
        allWorkers(ctx,0)
    }
    else if(data === `add_car`){
        if(ctx.res.status === 5){
            ctx.deleteMessage();
            return ctx.scene.enter(`add_car`)
        }
    }
    else if(data.startsWith(`deletecar:`)){
        if(ctx.res.status === 5){
            let id = parseInt(data.split(':')[1]);
            await query(`DELETE FROM cars WHERE fid=?`, [id])
            await allCars(ctx,0);
        }
    }
    else if(data === `delmsg`){
        ctx.deleteMessage();
    }
    else {
        ctx.answerCbQuery();
    }
})



bot.catch((err, ctx) => {
    console.error(`Error for ${ctx.updateType}:`, err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
});

bot.launch()
    .then(() => console.log('Bot started'))

process.on('uncaughtException', (err) => {
    console.error('‚ö†Ô∏è –ù–µ–ø–æ–π–º–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
});
process.on('unhandledRejection', (err) => {
    console.error('‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å:', err);
});