const db = require('../database')
const data = require('../data')
const ExcelJS = require('exceljs');
const XLSX = require('xlsx');
const fs = require('fs');

module.exports = {
    createArrayFormsByDate: async (date='', zavod) =>{
        let forms = await db.getFinishedFormsByDate(date, zavod);
        let pickups = await db.getFinishedPickupsByDate(date, zavod);
        let edited_forms = [];

        for(const form of forms){
            let temp = {
                '–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏': data.ancetaStatus[form.status],
                '–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏': form.fid,
                '–î–∞—Ç–∞': String(form.date).substring(0,10),
                '–ò–Ω—Ç–µ—Ä–≤–∞–ª —É –∫–ª–∏–µ–Ω—Ç–∞': String(form.date).slice(11),
                '–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏': form.place,
                '–û–±—å–µ–º': form.betonAmount,
                '–ú–∞—Ä–∫–∞': form.betonType,
                '–¶–µ–Ω–∞ –±–µ—Ç–æ–Ω –ø—Ä–∞–π—Å': form.betonPrice,
                '–¶–µ–Ω–∞ –±–µ—Ç–æ–Ω –≤—ã—Ö–æ–¥': form.betonUserPrice,
                '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–µ—Ç–æ–Ω': form.betonAmount*form.betonUserPrice,
                '–î–æ—Å—Ç–∞–≤–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∞–π—Å': form.deliveryPrice,
                '–î–æ—Å—Ç–∞–≤–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã—Ö–æ–¥': form.deliveryPriceWithAdd,
                '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏/–≤—ã—Ö–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏': form.deliveryPriceWithAdd * form.deliveryAmount,
                '–î–æ–ø—ã —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∞–π—Å': form.dopPrice,
                '–î–æ–ø—ã': String(form.dopAll).split('\n').map(line => removePriceFromDops(line)).join('\n'),
                '–í—Ö–æ–¥': form.enterPrice,
                '–í—ã—Ö–æ–¥': form.exitPrice,
                '–ú–µ–Ω–µ–¥–∂–µ—Ä': form.real_name,
                '–ó–∞–≤–æ–¥ –æ—Ç–≥—Ä—É–∑–∫–∏': await db.getZavodName(form.zavod)
            }
            
            const drivers_trips = await db.getAllTripsByForm(form.fid)
            let trips = [];
            let price = {
                '—Ñ–∞–∫—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å': 0,
                '–§–ê–ö–¢ –í–•–û–î': 0
            }
            for(const trip of drivers_trips){
                trips.push({
                    '–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã': trip.carname || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–∞—à–∏–Ω–∞',
                    '–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫': await db.getZavodNameByUser(trip.created_by),
                    '–í–æ–¥–∏—Ç–µ–ª—å': (await db.getUser(trip.created_by)).real_name,
                    '–û–±—å–µ–º –Ω–∞ –æ–¥–Ω—É –º–∞—à–∏–Ω—É —Ñ–∞–∫—Ç–∏—á –æ–±—å–µ–º': trip.amount,
                    '–î–æ—Å—Ç–∞–≤–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–∞–∫—Ç':  trip.amount <= 10 ? form.deliveryPriceWithAdd*10 : form.deliveryPriceWithAdd * trip.amount,
                    '–¥–æ–ø—ã –ø–æ—Å–ª–µ –æ—Ç–ª–∏–≤–∫–∏': trip.dops,
                    '–ó–∞–±—Ä–∞–ª–∏ –¥–µ–Ω—å–≥–∏': trip.money_get,
                })

                price['—Ñ–∞–∫—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å'] += trip.money_get;
                price['–§–ê–ö–¢ –í–•–û–î'] += trip.money_get;
            }
            if(trips.length > 0) temp = {...temp, ...trips[0]};
            if(trips.length > 1) trips.shift();
            
            edited_forms.push({
                //trips: trips,
                ...temp,
                ...price
            })
            trips.forEach((trip)=>{
                edited_forms.push(trip)
            })
        }
        for(const pickup of pickups){
            let temp = {
                '–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏': `–°–∞–º–æ–≤—ã–≤–æ–∑`,
                '–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏': pickup.fid,
                '–î–∞—Ç–∞': String(pickup.date).substring(0,10),
                '–ò–Ω—Ç–µ—Ä–≤–∞–ª —É –∫–ª–∏–µ–Ω—Ç–∞': String(pickup.date).slice(11),
                '–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏': pickup.place !== '-' ? pickup.place : '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ',
                '–û–±—å–µ–º': pickup.betonAmount,
                '–ú–∞—Ä–∫–∞': pickup.betonType,
                '–¶–µ–Ω–∞ –±–µ—Ç–æ–Ω –ø—Ä–∞–π—Å': pickup.betonPrice,
                '–¶–µ–Ω–∞ –±–µ—Ç–æ–Ω –≤—ã—Ö–æ–¥': pickup.betonUserPrice,
                '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–µ—Ç–æ–Ω': pickup.betonAmount*pickup.betonUserPrice,
                '–î–æ—Å—Ç–∞–≤–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∞–π—Å': pickup.deliveryPrice !== -1 ? pickup.deliveryPrice : '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ',
                '–î–æ—Å—Ç–∞–≤–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã—Ö–æ–¥': pickup.deliveryPriceWithAdd !== -1 ? pickup.deliveryPriceWithAdd : '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ',
                '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏/–≤—ã—Ö–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏': pickup.deliveryPriceWithAdd !== -1 ? pickup.deliveryPriceWithAdd * pickup.deliveryAmount : '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ',
                '–î–æ–ø—ã —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∞–π—Å': pickup.dopPrice !== -1 ? pickup.dopPrice : '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ',
                '–î–æ–ø—ã': pickup.dopAll !== '-' ? String(pickup.dopAll).split('\n').map(line => removePriceFromDops(line)).join('\n') : '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ',
                '–í—Ö–æ–¥': pickup.enterPrice !== -1 ? pickup.enterPrice : '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ',
                '–í—ã—Ö–æ–¥': pickup.exitPrice !== -1 ? pickup.exitPrice : '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ',
                '–ú–µ–Ω–µ–¥–∂–µ—Ä': pickup.real_name !== '-' ? pickup.real_name : '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ',
                '–ó–∞–≤–æ–¥ –æ—Ç–≥—Ä—É–∑–∫–∏': await db.getZavodName(zavod)
            }
            
            const drivers_trips = await db.getAllTripsByForm(pickup.fid)
            let trips = [];
            let price = {
                '—Ñ–∞–∫—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å': 0,
                '–§–ê–ö–¢ –í–•–û–î': 0
            }
            for(const trip of drivers_trips){
                trips.push({
                    '–ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã': trip.carname || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–∞—à–∏–Ω–∞',
                    '–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫': await db.getZavodNameByUser(trip.created_by),
                    '–í–æ–¥–∏—Ç–µ–ª—å': (await db.getUser(trip.created_by)).real_name,
                    '–û–±—å–µ–º –Ω–∞ –æ–¥–Ω—É –º–∞—à–∏–Ω—É —Ñ–∞–∫—Ç–∏—á –æ–±—å–µ–º': trip.amount,
                    '–î–æ—Å—Ç–∞–≤–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–∞–∫—Ç':  trip.amount <= 10 ? pickup.deliveryPriceWithAdd*10 : pickup.deliveryPriceWithAdd * trip.amount,
                    '–¥–æ–ø—ã –ø–æ—Å–ª–µ –æ—Ç–ª–∏–≤–∫–∏': trip.dops,
                    '–ó–∞–±—Ä–∞–ª–∏ –¥–µ–Ω—å–≥–∏': trip.money_get,
                })

                price['—Ñ–∞–∫—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å'] += trip.money_get;
                price['–§–ê–ö–¢ –í–•–û–î'] += trip.money_get;
            }
            if(trips.length > 0) temp = {...temp, ...trips[0]};
            if(trips.length > 1) trips.shift();
            
            edited_forms.push({
                //trips: trips,
                ...temp,
                ...price
            })
            trips.forEach((trip)=>{
                edited_forms.push(trip)
            })
        }
       return edited_forms;
    },
    createExcelTable: async (array, date, zavod) =>{
        const allHeaders = [...new Set(array.flatMap(Object.keys))];
        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('–ó–∞—è–≤–∫–∏');

        worksheet.addRow(allHeaders);

        array.forEach(item => {
            const row = [];
            allHeaders.forEach(header => {
                row.push(item.hasOwnProperty(header) ? item[header] : '');
            });
            worksheet.addRow(row);
        });
        worksheet.columns = allHeaders.map(header => ({
            header,
            width: Math.max(15, header.length * 1.5)
        }));
        await workbook.xlsx.writeFile(`./reports/report_${date}_${zavod}.xlsx`)
        return `./reports/report_${date}_${zavod}.xlsx`
    },
    createArrayFormsShipments: async (zavod) =>{
        const forms = await db.getFormsToShipment(zavod);

        let edited_forms = [];
        for(const form of forms){
            edited_forms.push({
                '–°—Ç–∞—Ç—É—Å': data.ancetaStatus[form.status],
                '–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏': form.fid,
                '–î–∞—Ç–∞': String(form.date).substring(0,10),
                '–ò–Ω—Ç–µ—Ä–≤–∞–ª': String(form.date).slice(11),
                '–§–∏–∑\\—é—Ä': form.entity !== -1 ? data.entity[form.entity] : await db.getUser(form.priv) ? data.entity[(await db.getUser(form.priv)).entity] : `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ`,
                '–ù–æ–º–µ—Ä —Ç–ª—Ñ': form.phone,
                '–ê–¥—Ä–µ—Å': form.place,
                '–ú–∞—Ä–∫–∞': form.betonType,
                '–û–±—å–µ–º': form.betonAmount,
                '–¶–µ–Ω–∞ –í—Ö–æ–¥ (–∑–∞ –º3) (–ø—Ä–∞–π—Å)': form.betonPrice,
                '–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥ (–∑–∞ –º3)': form.betonUserPrice,
                '–î–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∞–π—Å –∑–∞ –º3': form.deliveryPrice,
                '–î–æ—Å—Ç–∞–≤–∫–∞  –≤—ã—Ö–æ–¥ –∑–∞ –º3': form.deliveryPriceWithAdd,
                '–î–æ–ø—ã': String(form.dopAll).split('\n').map(line => removePriceFromDops(line)).join('\n'),
                '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ø—ã': form.dopPrice,
                '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥': form.enterPrice,
                '–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã—Ö–æ–¥': form.exitPrice,
                '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä': form.real_name
            })
        }
        return edited_forms
    },
    getUPDFormsYesterday: async (zavod) => {
        const forms = await db.getUPDFormsYesterday(zavod);
        let but = forms.map(form => {
            return [{
                text: `#${form.fid} | ${form.betonType} ${form.betonAmount}–º¬≥`,
                callback_data: `accountant_form:${form.fid}`
            }]
        })
        return {
            text: '<b>üìã –£–ü–î –∑–∞ –ø—Ä–æ—à–ª—ã–π –¥–µ–Ω—å</b>',
            keyboard: but
        }
    },
    getUPDForms: async (zavod) => {
        const forms = await db.getUPDForms(zavod);
        let but = forms.map(form => {
            return [{
                text: `#${form.fid} | ${form.betonType} ${form.betonAmount}–º¬≥`,
                callback_data: `accountant_form:${form.fid}`
            }]
        })
        return {
            text: '<b>üìã –£–ü–î –æ–±—â–∏–µ</b>',
            keyboard: but
        }
    }
}

function removePriceFromDops(dopsString) {
    return dopsString.split('-')[0].trim();
  }